(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/get-iterator"), __esModule: true };
},{"core-js/library/fn/get-iterator":18}],2:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/is-iterable"), __esModule: true };
},{"core-js/library/fn/is-iterable":19}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/number/is-safe-integer"), __esModule: true };
},{"core-js/library/fn/number/is-safe-integer":20}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":21}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":22}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-names"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-names":23}],7:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":24}],8:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":25}],9:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":26}],10:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":27}],11:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],12:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _assign = require("../core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
},{"../core-js/object/assign":4}],13:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
},{"../core-js/object/create":5,"../core-js/object/set-prototype-of":8,"../helpers/typeof":17}],14:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};
},{}],15:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
},{"../helpers/typeof":17}],16:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _isIterable2 = require("../core-js/is-iterable");

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = require("../core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();
},{"../core-js/get-iterator":1,"../core-js/is-iterable":2}],17:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":9,"../core-js/symbol/iterator":10}],18:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.get-iterator');

},{"../modules/core.get-iterator":89,"../modules/es6.string.iterator":99,"../modules/web.dom.iterable":103}],19:[function(require,module,exports){
require('../modules/web.dom.iterable');
require('../modules/es6.string.iterator');
module.exports = require('../modules/core.is-iterable');

},{"../modules/core.is-iterable":90,"../modules/es6.string.iterator":99,"../modules/web.dom.iterable":103}],20:[function(require,module,exports){
require('../../modules/es6.number.is-safe-integer');
module.exports = require('../../modules/_core').Number.isSafeInteger;

},{"../../modules/_core":34,"../../modules/es6.number.is-safe-integer":92}],21:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;

},{"../../modules/_core":34,"../../modules/es6.object.assign":93}],22:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};

},{"../../modules/_core":34,"../../modules/es6.object.create":94}],23:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-names');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyNames(it) {
  return $Object.getOwnPropertyNames(it);
};

},{"../../modules/_core":34,"../../modules/es6.object.get-own-property-names":95}],24:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;

},{"../../modules/_core":34,"../../modules/es6.object.keys":96}],25:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;

},{"../../modules/_core":34,"../../modules/es6.object.set-prototype-of":97}],26:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;

},{"../../modules/_core":34,"../../modules/es6.object.to-string":98,"../../modules/es6.symbol":100,"../../modules/es7.symbol.async-iterator":101,"../../modules/es7.symbol.observable":102}],27:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');

},{"../../modules/_wks-ext":86,"../../modules/es6.string.iterator":99,"../../modules/web.dom.iterable":103}],28:[function(require,module,exports){
module.exports = function (it) {
  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
  return it;
};

},{}],29:[function(require,module,exports){
module.exports = function () { /* empty */ };

},{}],30:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function (it) {
  if (!isObject(it)) throw TypeError(it + ' is not an object!');
  return it;
};

},{"./_is-object":51}],31:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"./_to-absolute-index":78,"./_to-iobject":80,"./_to-length":81}],32:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

module.exports = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":33,"./_wks":87}],33:[function(require,module,exports){
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],34:[function(require,module,exports){
var core = module.exports = { version: '2.5.1' };
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],35:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"./_a-function":28}],36:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on  " + it);
  return it;
};

},{}],37:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_fails":42}],38:[function(require,module,exports){
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function (it) {
  return is ? document.createElement(it) : {};
};

},{"./_global":43,"./_is-object":51}],39:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

},{}],40:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"./_object-gops":65,"./_object-keys":68,"./_object-pie":69}],41:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var PROTOTYPE = 'prototype';

var $export = function (type, name, source) {
  var IS_FORCED = type & $export.F;
  var IS_GLOBAL = type & $export.G;
  var IS_STATIC = type & $export.S;
  var IS_PROTO = type & $export.P;
  var IS_BIND = type & $export.B;
  var IS_WRAP = type & $export.W;
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE];
  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
  var key, own, out;
  if (IS_GLOBAL) source = name;
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if (own && key in exports) continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function (C) {
      var F = function (a, b, c) {
        if (this instanceof C) {
          switch (arguments.length) {
            case 0: return new C();
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if (IS_PROTO) {
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_core":34,"./_ctx":35,"./_global":43,"./_hide":45}],42:[function(require,module,exports){
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],43:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],44:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],45:[function(require,module,exports){
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"./_descriptors":37,"./_object-dp":60,"./_property-desc":71}],46:[function(require,module,exports){
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":43}],47:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function () {
  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;
});

},{"./_descriptors":37,"./_dom-create":38,"./_fails":42}],48:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":33}],49:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};

},{"./_cof":33}],50:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object');
var floor = Math.floor;
module.exports = function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};

},{"./_is-object":51}],51:[function(require,module,exports){
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],52:[function(require,module,exports){
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });

module.exports = function (Constructor, NAME, next) {
  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_hide":45,"./_object-create":59,"./_property-desc":71,"./_set-to-string-tag":74,"./_wks":87}],53:[function(require,module,exports){
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var has = require('./_has');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) return proto[kind];
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) for (key in methods) {
      if (!(key in proto)) redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

},{"./_export":41,"./_has":44,"./_hide":45,"./_iter-create":52,"./_iterators":55,"./_library":56,"./_object-gpo":66,"./_redefine":72,"./_set-to-string-tag":74,"./_wks":87}],54:[function(require,module,exports){
module.exports = function (done, value) {
  return { value: value, done: !!done };
};

},{}],55:[function(require,module,exports){
module.exports = {};

},{}],56:[function(require,module,exports){
module.exports = true;

},{}],57:[function(require,module,exports){
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !require('./_fails')(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};

},{"./_fails":42,"./_has":44,"./_is-object":51,"./_object-dp":60,"./_uid":84}],58:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
var toObject = require('./_to-object');
var IObject = require('./_iobject');
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : $assign;

},{"./_fails":42,"./_iobject":48,"./_object-gops":65,"./_object-keys":68,"./_object-pie":69,"./_to-object":82}],59:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe');
  var i = enumBugKeys.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":30,"./_dom-create":38,"./_enum-bug-keys":39,"./_html":46,"./_object-dps":61,"./_shared-key":75}],60:[function(require,module,exports){
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return dP(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"./_an-object":30,"./_descriptors":37,"./_ie8-dom-define":47,"./_to-primitive":83}],61:[function(require,module,exports){
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = getKeys(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

},{"./_an-object":30,"./_descriptors":37,"./_object-dp":60,"./_object-keys":68}],62:[function(require,module,exports){
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_descriptors":37,"./_has":44,"./_ie8-dom-define":47,"./_object-pie":69,"./_property-desc":71,"./_to-iobject":80,"./_to-primitive":83}],63:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":64,"./_to-iobject":80}],64:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};

},{"./_enum-bug-keys":39,"./_object-keys-internal":67}],65:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;

},{}],66:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

},{"./_has":44,"./_shared-key":75,"./_to-object":82}],67:[function(require,module,exports){
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');

module.exports = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"./_array-includes":31,"./_has":44,"./_shared-key":75,"./_to-iobject":80}],68:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

},{"./_enum-bug-keys":39,"./_object-keys-internal":67}],69:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;

},{}],70:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};

},{"./_core":34,"./_export":41,"./_fails":42}],71:[function(require,module,exports){
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],72:[function(require,module,exports){
module.exports = require('./_hide');

},{"./_hide":45}],73:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) { buggy = true; }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

},{"./_an-object":30,"./_ctx":35,"./_is-object":51,"./_object-gopd":62}],74:[function(require,module,exports){
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');

module.exports = function (it, tag, stat) {
  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
};

},{"./_has":44,"./_object-dp":60,"./_wks":87}],75:[function(require,module,exports){
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":76,"./_uid":84}],76:[function(require,module,exports){
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
module.exports = function (key) {
  return store[key] || (store[key] = {});
};

},{"./_global":43}],77:[function(require,module,exports){
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined(that));
    var i = toInteger(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

},{"./_defined":36,"./_to-integer":79}],78:[function(require,module,exports){
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function (index, length) {
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":79}],79:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],80:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function (it) {
  return IObject(defined(it));
};

},{"./_defined":36,"./_iobject":48}],81:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":79}],82:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function (it) {
  return Object(defined(it));
};

},{"./_defined":36}],83:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":51}],84:[function(require,module,exports){
var id = 0;
var px = Math.random();
module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],85:[function(require,module,exports){
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};

},{"./_core":34,"./_global":43,"./_library":56,"./_object-dp":60,"./_wks-ext":86}],86:[function(require,module,exports){
exports.f = require('./_wks');

},{"./_wks":87}],87:[function(require,module,exports){
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

},{"./_global":43,"./_shared":76,"./_uid":84}],88:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function (it) {
  if (it != undefined) return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

},{"./_classof":32,"./_core":34,"./_iterators":55,"./_wks":87}],89:[function(require,module,exports){
var anObject = require('./_an-object');
var get = require('./core.get-iterator-method');
module.exports = require('./_core').getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

},{"./_an-object":30,"./_core":34,"./core.get-iterator-method":88}],90:[function(require,module,exports){
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};

},{"./_classof":32,"./_core":34,"./_iterators":55,"./_wks":87}],91:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') return step(0, index);
  if (kind == 'values') return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":29,"./_iter-define":53,"./_iter-step":54,"./_iterators":55,"./_to-iobject":80}],92:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export = require('./_export');
var isInteger = require('./_is-integer');
var abs = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number) {
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});

},{"./_export":41,"./_is-integer":50}],93:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });

},{"./_export":41,"./_object-assign":58}],94:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: require('./_object-create') });

},{"./_export":41,"./_object-create":59}],95:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function () {
  return require('./_object-gopn-ext').f;
});

},{"./_object-gopn-ext":63,"./_object-sap":70}],96:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object');
var $keys = require('./_object-keys');

require('./_object-sap')('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});

},{"./_object-keys":68,"./_object-sap":70,"./_to-object":82}],97:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });

},{"./_export":41,"./_set-proto":73}],98:[function(require,module,exports){

},{}],99:[function(require,module,exports){
'use strict';
var $at = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) return { value: undefined, done: true };
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

},{"./_iter-define":53,"./_string-at":77}],100:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !require('./_library')) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    replacer = args[1];
    if (typeof replacer == 'function') $replacer = replacer;
    if ($replacer || !isArray(replacer)) replacer = function (key, value) {
      if ($replacer) value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_an-object":30,"./_descriptors":37,"./_enum-keys":40,"./_export":41,"./_fails":42,"./_global":43,"./_has":44,"./_hide":45,"./_is-array":49,"./_library":56,"./_meta":57,"./_object-create":59,"./_object-dp":60,"./_object-gopd":62,"./_object-gopn":64,"./_object-gopn-ext":63,"./_object-gops":65,"./_object-keys":68,"./_object-pie":69,"./_property-desc":71,"./_redefine":72,"./_set-to-string-tag":74,"./_shared":76,"./_to-iobject":80,"./_to-primitive":83,"./_uid":84,"./_wks":87,"./_wks-define":85,"./_wks-ext":86}],101:[function(require,module,exports){
require('./_wks-define')('asyncIterator');

},{"./_wks-define":85}],102:[function(require,module,exports){
require('./_wks-define')('observable');

},{"./_wks-define":85}],103:[function(require,module,exports){
require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');

var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
  'TextTrackList,TouchList').split(',');

for (var i = 0; i < DOMIterables.length; i++) {
  var NAME = DOMIterables[i];
  var Collection = global[NAME];
  var proto = Collection && Collection.prototype;
  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

},{"./_global":43,"./_hide":45,"./_iterators":55,"./_wks":87,"./es6.array.iterator":91}],104:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'apathy',
  author: 'jannik siebert (https://github.com/janniks)',
  base00: '#031A16',
  base01: '#0B342D',
  base02: '#184E45',
  base03: '#2B685E',
  base04: '#5F9C92',
  base05: '#81B5AC',
  base06: '#A7CEC8',
  base07: '#D2E7E4',
  base08: '#3E9688',
  base09: '#3E7996',
  base0A: '#3E4C96',
  base0B: '#883E96',
  base0C: '#963E4C',
  base0D: '#96883E',
  base0E: '#4C963E',
  base0F: '#3E965B'
};
module.exports = exports['default'];
},{}],105:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'ashes',
  author: 'jannik siebert (https://github.com/janniks)',
  base00: '#1C2023',
  base01: '#393F45',
  base02: '#565E65',
  base03: '#747C84',
  base04: '#ADB3BA',
  base05: '#C7CCD1',
  base06: '#DFE2E5',
  base07: '#F3F4F5',
  base08: '#C7AE95',
  base09: '#C7C795',
  base0A: '#AEC795',
  base0B: '#95C7AE',
  base0C: '#95AEC7',
  base0D: '#AE95C7',
  base0E: '#C795AE',
  base0F: '#C79595'
};
module.exports = exports['default'];
},{}],106:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'atelier dune',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/dune)',
  base00: '#20201d',
  base01: '#292824',
  base02: '#6e6b5e',
  base03: '#7d7a68',
  base04: '#999580',
  base05: '#a6a28c',
  base06: '#e8e4cf',
  base07: '#fefbec',
  base08: '#d73737',
  base09: '#b65611',
  base0A: '#cfb017',
  base0B: '#60ac39',
  base0C: '#1fad83',
  base0D: '#6684e1',
  base0E: '#b854d4',
  base0F: '#d43552'
};
module.exports = exports['default'];
},{}],107:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'atelier forest',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/forest)',
  base00: '#1b1918',
  base01: '#2c2421',
  base02: '#68615e',
  base03: '#766e6b',
  base04: '#9c9491',
  base05: '#a8a19f',
  base06: '#e6e2e0',
  base07: '#f1efee',
  base08: '#f22c40',
  base09: '#df5320',
  base0A: '#d5911a',
  base0B: '#5ab738',
  base0C: '#00ad9c',
  base0D: '#407ee7',
  base0E: '#6666ea',
  base0F: '#c33ff3'
};
module.exports = exports['default'];
},{}],108:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'atelier heath',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/heath)',
  base00: '#1b181b',
  base01: '#292329',
  base02: '#695d69',
  base03: '#776977',
  base04: '#9e8f9e',
  base05: '#ab9bab',
  base06: '#d8cad8',
  base07: '#f7f3f7',
  base08: '#ca402b',
  base09: '#a65926',
  base0A: '#bb8a35',
  base0B: '#379a37',
  base0C: '#159393',
  base0D: '#516aec',
  base0E: '#7b59c0',
  base0F: '#cc33cc'
};
module.exports = exports['default'];
},{}],109:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'atelier lakeside',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/lakeside/)',
  base00: '#161b1d',
  base01: '#1f292e',
  base02: '#516d7b',
  base03: '#5a7b8c',
  base04: '#7195a8',
  base05: '#7ea2b4',
  base06: '#c1e4f6',
  base07: '#ebf8ff',
  base08: '#d22d72',
  base09: '#935c25',
  base0A: '#8a8a0f',
  base0B: '#568c3b',
  base0C: '#2d8f6f',
  base0D: '#257fad',
  base0E: '#5d5db1',
  base0F: '#b72dd2'
};
module.exports = exports['default'];
},{}],110:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'atelier seaside',
  author: 'bram de haan (http://atelierbram.github.io/syntax-highlighting/atelier-schemes/seaside/)',
  base00: '#131513',
  base01: '#242924',
  base02: '#5e6e5e',
  base03: '#687d68',
  base04: '#809980',
  base05: '#8ca68c',
  base06: '#cfe8cf',
  base07: '#f0fff0',
  base08: '#e6193c',
  base09: '#87711d',
  base0A: '#c3c322',
  base0B: '#29a329',
  base0C: '#1999b3',
  base0D: '#3d62f5',
  base0E: '#ad2bee',
  base0F: '#e619c3'
};
module.exports = exports['default'];
},{}],111:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'bespin',
  author: 'jan t. sott',
  base00: '#28211c',
  base01: '#36312e',
  base02: '#5e5d5c',
  base03: '#666666',
  base04: '#797977',
  base05: '#8a8986',
  base06: '#9d9b97',
  base07: '#baae9e',
  base08: '#cf6a4c',
  base09: '#cf7d34',
  base0A: '#f9ee98',
  base0B: '#54be0d',
  base0C: '#afc4db',
  base0D: '#5ea6ea',
  base0E: '#9b859d',
  base0F: '#937121'
};
module.exports = exports['default'];
},{}],112:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'brewer',
  author: 'timothée poisot (http://github.com/tpoisot)',
  base00: '#0c0d0e',
  base01: '#2e2f30',
  base02: '#515253',
  base03: '#737475',
  base04: '#959697',
  base05: '#b7b8b9',
  base06: '#dadbdc',
  base07: '#fcfdfe',
  base08: '#e31a1c',
  base09: '#e6550d',
  base0A: '#dca060',
  base0B: '#31a354',
  base0C: '#80b1d3',
  base0D: '#3182bd',
  base0E: '#756bb1',
  base0F: '#b15928'
};
module.exports = exports['default'];
},{}],113:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'bright',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#000000',
  base01: '#303030',
  base02: '#505050',
  base03: '#b0b0b0',
  base04: '#d0d0d0',
  base05: '#e0e0e0',
  base06: '#f5f5f5',
  base07: '#ffffff',
  base08: '#fb0120',
  base09: '#fc6d24',
  base0A: '#fda331',
  base0B: '#a1c659',
  base0C: '#76c7b7',
  base0D: '#6fb3d2',
  base0E: '#d381c3',
  base0F: '#be643c'
};
module.exports = exports['default'];
},{}],114:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'chalk',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#151515',
  base01: '#202020',
  base02: '#303030',
  base03: '#505050',
  base04: '#b0b0b0',
  base05: '#d0d0d0',
  base06: '#e0e0e0',
  base07: '#f5f5f5',
  base08: '#fb9fb1',
  base09: '#eda987',
  base0A: '#ddb26f',
  base0B: '#acc267',
  base0C: '#12cfc0',
  base0D: '#6fc2ef',
  base0E: '#e1a3ee',
  base0F: '#deaf8f'
};
module.exports = exports['default'];
},{}],115:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'codeschool',
  author: 'brettof86',
  base00: '#232c31',
  base01: '#1c3657',
  base02: '#2a343a',
  base03: '#3f4944',
  base04: '#84898c',
  base05: '#9ea7a6',
  base06: '#a7cfa3',
  base07: '#b5d8f6',
  base08: '#2a5491',
  base09: '#43820d',
  base0A: '#a03b1e',
  base0B: '#237986',
  base0C: '#b02f30',
  base0D: '#484d79',
  base0E: '#c59820',
  base0F: '#c98344'
};
module.exports = exports['default'];
},{}],116:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'colors',
  author: 'mrmrs (http://clrs.cc)',
  base00: '#111111',
  base01: '#333333',
  base02: '#555555',
  base03: '#777777',
  base04: '#999999',
  base05: '#bbbbbb',
  base06: '#dddddd',
  base07: '#ffffff',
  base08: '#ff4136',
  base09: '#ff851b',
  base0A: '#ffdc00',
  base0B: '#2ecc40',
  base0C: '#7fdbff',
  base0D: '#0074d9',
  base0E: '#b10dc9',
  base0F: '#85144b'
};
module.exports = exports['default'];
},{}],117:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'default',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#181818',
  base01: '#282828',
  base02: '#383838',
  base03: '#585858',
  base04: '#b8b8b8',
  base05: '#d8d8d8',
  base06: '#e8e8e8',
  base07: '#f8f8f8',
  base08: '#ab4642',
  base09: '#dc9656',
  base0A: '#f7ca88',
  base0B: '#a1b56c',
  base0C: '#86c1b9',
  base0D: '#7cafc2',
  base0E: '#ba8baf',
  base0F: '#a16946'
};
module.exports = exports['default'];
},{}],118:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'eighties',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#2d2d2d',
  base01: '#393939',
  base02: '#515151',
  base03: '#747369',
  base04: '#a09f93',
  base05: '#d3d0c8',
  base06: '#e8e6df',
  base07: '#f2f0ec',
  base08: '#f2777a',
  base09: '#f99157',
  base0A: '#ffcc66',
  base0B: '#99cc99',
  base0C: '#66cccc',
  base0D: '#6699cc',
  base0E: '#cc99cc',
  base0F: '#d27b53'
};
module.exports = exports['default'];
},{}],119:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'embers',
  author: 'jannik siebert (https://github.com/janniks)',
  base00: '#16130F',
  base01: '#2C2620',
  base02: '#433B32',
  base03: '#5A5047',
  base04: '#8A8075',
  base05: '#A39A90',
  base06: '#BEB6AE',
  base07: '#DBD6D1',
  base08: '#826D57',
  base09: '#828257',
  base0A: '#6D8257',
  base0B: '#57826D',
  base0C: '#576D82',
  base0D: '#6D5782',
  base0E: '#82576D',
  base0F: '#825757'
};
module.exports = exports['default'];
},{}],120:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'flat',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#2C3E50',
  base01: '#34495E',
  base02: '#7F8C8D',
  base03: '#95A5A6',
  base04: '#BDC3C7',
  base05: '#e0e0e0',
  base06: '#f5f5f5',
  base07: '#ECF0F1',
  base08: '#E74C3C',
  base09: '#E67E22',
  base0A: '#F1C40F',
  base0B: '#2ECC71',
  base0C: '#1ABC9C',
  base0D: '#3498DB',
  base0E: '#9B59B6',
  base0F: '#be643c'
};
module.exports = exports['default'];
},{}],121:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'google',
  author: 'seth wright (http://sethawright.com)',
  base00: '#1d1f21',
  base01: '#282a2e',
  base02: '#373b41',
  base03: '#969896',
  base04: '#b4b7b4',
  base05: '#c5c8c6',
  base06: '#e0e0e0',
  base07: '#ffffff',
  base08: '#CC342B',
  base09: '#F96A38',
  base0A: '#FBA922',
  base0B: '#198844',
  base0C: '#3971ED',
  base0D: '#3971ED',
  base0E: '#A36AC7',
  base0F: '#3971ED'
};
module.exports = exports['default'];
},{}],122:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'grayscale',
  author: 'alexandre gavioli (https://github.com/alexx2/)',
  base00: '#101010',
  base01: '#252525',
  base02: '#464646',
  base03: '#525252',
  base04: '#ababab',
  base05: '#b9b9b9',
  base06: '#e3e3e3',
  base07: '#f7f7f7',
  base08: '#7c7c7c',
  base09: '#999999',
  base0A: '#a0a0a0',
  base0B: '#8e8e8e',
  base0C: '#868686',
  base0D: '#686868',
  base0E: '#747474',
  base0F: '#5e5e5e'
};
module.exports = exports['default'];
},{}],123:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'green screen',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#001100',
  base01: '#003300',
  base02: '#005500',
  base03: '#007700',
  base04: '#009900',
  base05: '#00bb00',
  base06: '#00dd00',
  base07: '#00ff00',
  base08: '#007700',
  base09: '#009900',
  base0A: '#007700',
  base0B: '#00bb00',
  base0C: '#005500',
  base0D: '#009900',
  base0E: '#00bb00',
  base0F: '#005500'
};
module.exports = exports['default'];
},{}],124:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'harmonic16',
  author: 'jannik siebert (https://github.com/janniks)',
  base00: '#0b1c2c',
  base01: '#223b54',
  base02: '#405c79',
  base03: '#627e99',
  base04: '#aabcce',
  base05: '#cbd6e2',
  base06: '#e5ebf1',
  base07: '#f7f9fb',
  base08: '#bf8b56',
  base09: '#bfbf56',
  base0A: '#8bbf56',
  base0B: '#56bf8b',
  base0C: '#568bbf',
  base0D: '#8b56bf',
  base0E: '#bf568b',
  base0F: '#bf5656'
};
module.exports = exports['default'];
},{}],125:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'hopscotch',
  author: 'jan t. sott',
  base00: '#322931',
  base01: '#433b42',
  base02: '#5c545b',
  base03: '#797379',
  base04: '#989498',
  base05: '#b9b5b8',
  base06: '#d5d3d5',
  base07: '#ffffff',
  base08: '#dd464c',
  base09: '#fd8b19',
  base0A: '#fdcc59',
  base0B: '#8fc13e',
  base0C: '#149b93',
  base0D: '#1290bf',
  base0E: '#c85e7c',
  base0F: '#b33508'
};
module.exports = exports['default'];
},{}],126:[function(require,module,exports){
'use strict';

exports.__esModule = true;

function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

var _threezerotwofour = require('./threezerotwofour');

exports.threezerotwofour = _interopRequire(_threezerotwofour);

var _apathy = require('./apathy');

exports.apathy = _interopRequire(_apathy);

var _ashes = require('./ashes');

exports.ashes = _interopRequire(_ashes);

var _atelierDune = require('./atelier-dune');

exports.atelierDune = _interopRequire(_atelierDune);

var _atelierForest = require('./atelier-forest');

exports.atelierForest = _interopRequire(_atelierForest);

var _atelierHeath = require('./atelier-heath');

exports.atelierHeath = _interopRequire(_atelierHeath);

var _atelierLakeside = require('./atelier-lakeside');

exports.atelierLakeside = _interopRequire(_atelierLakeside);

var _atelierSeaside = require('./atelier-seaside');

exports.atelierSeaside = _interopRequire(_atelierSeaside);

var _bespin = require('./bespin');

exports.bespin = _interopRequire(_bespin);

var _brewer = require('./brewer');

exports.brewer = _interopRequire(_brewer);

var _bright = require('./bright');

exports.bright = _interopRequire(_bright);

var _chalk = require('./chalk');

exports.chalk = _interopRequire(_chalk);

var _codeschool = require('./codeschool');

exports.codeschool = _interopRequire(_codeschool);

var _colors = require('./colors');

exports.colors = _interopRequire(_colors);

var _default = require('./default');

exports['default'] = _interopRequire(_default);

var _eighties = require('./eighties');

exports.eighties = _interopRequire(_eighties);

var _embers = require('./embers');

exports.embers = _interopRequire(_embers);

var _flat = require('./flat');

exports.flat = _interopRequire(_flat);

var _google = require('./google');

exports.google = _interopRequire(_google);

var _grayscale = require('./grayscale');

exports.grayscale = _interopRequire(_grayscale);

var _greenscreen = require('./greenscreen');

exports.greenscreen = _interopRequire(_greenscreen);

var _harmonic = require('./harmonic');

exports.harmonic = _interopRequire(_harmonic);

var _hopscotch = require('./hopscotch');

exports.hopscotch = _interopRequire(_hopscotch);

var _isotope = require('./isotope');

exports.isotope = _interopRequire(_isotope);

var _marrakesh = require('./marrakesh');

exports.marrakesh = _interopRequire(_marrakesh);

var _mocha = require('./mocha');

exports.mocha = _interopRequire(_mocha);

var _monokai = require('./monokai');

exports.monokai = _interopRequire(_monokai);

var _ocean = require('./ocean');

exports.ocean = _interopRequire(_ocean);

var _paraiso = require('./paraiso');

exports.paraiso = _interopRequire(_paraiso);

var _pop = require('./pop');

exports.pop = _interopRequire(_pop);

var _railscasts = require('./railscasts');

exports.railscasts = _interopRequire(_railscasts);

var _shapeshifter = require('./shapeshifter');

exports.shapeshifter = _interopRequire(_shapeshifter);

var _solarized = require('./solarized');

exports.solarized = _interopRequire(_solarized);

var _summerfruit = require('./summerfruit');

exports.summerfruit = _interopRequire(_summerfruit);

var _tomorrow = require('./tomorrow');

exports.tomorrow = _interopRequire(_tomorrow);

var _tube = require('./tube');

exports.tube = _interopRequire(_tube);

var _twilight = require('./twilight');

exports.twilight = _interopRequire(_twilight);
},{"./apathy":104,"./ashes":105,"./atelier-dune":106,"./atelier-forest":107,"./atelier-heath":108,"./atelier-lakeside":109,"./atelier-seaside":110,"./bespin":111,"./brewer":112,"./bright":113,"./chalk":114,"./codeschool":115,"./colors":116,"./default":117,"./eighties":118,"./embers":119,"./flat":120,"./google":121,"./grayscale":122,"./greenscreen":123,"./harmonic":124,"./hopscotch":125,"./isotope":127,"./marrakesh":128,"./mocha":129,"./monokai":130,"./ocean":131,"./paraiso":132,"./pop":133,"./railscasts":134,"./shapeshifter":135,"./solarized":136,"./summerfruit":137,"./threezerotwofour":138,"./tomorrow":139,"./tube":140,"./twilight":141}],127:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'isotope',
  author: 'jan t. sott',
  base00: '#000000',
  base01: '#404040',
  base02: '#606060',
  base03: '#808080',
  base04: '#c0c0c0',
  base05: '#d0d0d0',
  base06: '#e0e0e0',
  base07: '#ffffff',
  base08: '#ff0000',
  base09: '#ff9900',
  base0A: '#ff0099',
  base0B: '#33ff00',
  base0C: '#00ffff',
  base0D: '#0066ff',
  base0E: '#cc00ff',
  base0F: '#3300ff'
};
module.exports = exports['default'];
},{}],128:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'marrakesh',
  author: 'alexandre gavioli (http://github.com/alexx2/)',
  base00: '#201602',
  base01: '#302e00',
  base02: '#5f5b17',
  base03: '#6c6823',
  base04: '#86813b',
  base05: '#948e48',
  base06: '#ccc37a',
  base07: '#faf0a5',
  base08: '#c35359',
  base09: '#b36144',
  base0A: '#a88339',
  base0B: '#18974e',
  base0C: '#75a738',
  base0D: '#477ca1',
  base0E: '#8868b3',
  base0F: '#b3588e'
};
module.exports = exports['default'];
},{}],129:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'mocha',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#3B3228',
  base01: '#534636',
  base02: '#645240',
  base03: '#7e705a',
  base04: '#b8afad',
  base05: '#d0c8c6',
  base06: '#e9e1dd',
  base07: '#f5eeeb',
  base08: '#cb6077',
  base09: '#d28b71',
  base0A: '#f4bc87',
  base0B: '#beb55b',
  base0C: '#7bbda4',
  base0D: '#8ab3b5',
  base0E: '#a89bb9',
  base0F: '#bb9584'
};
module.exports = exports['default'];
},{}],130:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'monokai',
  author: 'wimer hazenberg (http://www.monokai.nl)',
  base00: '#272822',
  base01: '#383830',
  base02: '#49483e',
  base03: '#75715e',
  base04: '#a59f85',
  base05: '#f8f8f2',
  base06: '#f5f4f1',
  base07: '#f9f8f5',
  base08: '#f92672',
  base09: '#fd971f',
  base0A: '#f4bf75',
  base0B: '#a6e22e',
  base0C: '#a1efe4',
  base0D: '#66d9ef',
  base0E: '#ae81ff',
  base0F: '#cc6633'
};
module.exports = exports['default'];
},{}],131:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'ocean',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#2b303b',
  base01: '#343d46',
  base02: '#4f5b66',
  base03: '#65737e',
  base04: '#a7adba',
  base05: '#c0c5ce',
  base06: '#dfe1e8',
  base07: '#eff1f5',
  base08: '#bf616a',
  base09: '#d08770',
  base0A: '#ebcb8b',
  base0B: '#a3be8c',
  base0C: '#96b5b4',
  base0D: '#8fa1b3',
  base0E: '#b48ead',
  base0F: '#ab7967'
};
module.exports = exports['default'];
},{}],132:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'paraiso',
  author: 'jan t. sott',
  base00: '#2f1e2e',
  base01: '#41323f',
  base02: '#4f424c',
  base03: '#776e71',
  base04: '#8d8687',
  base05: '#a39e9b',
  base06: '#b9b6b0',
  base07: '#e7e9db',
  base08: '#ef6155',
  base09: '#f99b15',
  base0A: '#fec418',
  base0B: '#48b685',
  base0C: '#5bc4bf',
  base0D: '#06b6ef',
  base0E: '#815ba4',
  base0F: '#e96ba8'
};
module.exports = exports['default'];
},{}],133:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'pop',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#000000',
  base01: '#202020',
  base02: '#303030',
  base03: '#505050',
  base04: '#b0b0b0',
  base05: '#d0d0d0',
  base06: '#e0e0e0',
  base07: '#ffffff',
  base08: '#eb008a',
  base09: '#f29333',
  base0A: '#f8ca12',
  base0B: '#37b349',
  base0C: '#00aabb',
  base0D: '#0e5a94',
  base0E: '#b31e8d',
  base0F: '#7a2d00'
};
module.exports = exports['default'];
},{}],134:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'railscasts',
  author: 'ryan bates (http://railscasts.com)',
  base00: '#2b2b2b',
  base01: '#272935',
  base02: '#3a4055',
  base03: '#5a647e',
  base04: '#d4cfc9',
  base05: '#e6e1dc',
  base06: '#f4f1ed',
  base07: '#f9f7f3',
  base08: '#da4939',
  base09: '#cc7833',
  base0A: '#ffc66d',
  base0B: '#a5c261',
  base0C: '#519f50',
  base0D: '#6d9cbe',
  base0E: '#b6b3eb',
  base0F: '#bc9458'
};
module.exports = exports['default'];
},{}],135:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'shapeshifter',
  author: 'tyler benziger (http://tybenz.com)',
  base00: '#000000',
  base01: '#040404',
  base02: '#102015',
  base03: '#343434',
  base04: '#555555',
  base05: '#ababab',
  base06: '#e0e0e0',
  base07: '#f9f9f9',
  base08: '#e92f2f',
  base09: '#e09448',
  base0A: '#dddd13',
  base0B: '#0ed839',
  base0C: '#23edda',
  base0D: '#3b48e3',
  base0E: '#f996e2',
  base0F: '#69542d'
};
module.exports = exports['default'];
},{}],136:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'solarized',
  author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
  base00: '#002b36',
  base01: '#073642',
  base02: '#586e75',
  base03: '#657b83',
  base04: '#839496',
  base05: '#93a1a1',
  base06: '#eee8d5',
  base07: '#fdf6e3',
  base08: '#dc322f',
  base09: '#cb4b16',
  base0A: '#b58900',
  base0B: '#859900',
  base0C: '#2aa198',
  base0D: '#268bd2',
  base0E: '#6c71c4',
  base0F: '#d33682'
};
module.exports = exports['default'];
},{}],137:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'summerfruit',
  author: 'christopher corley (http://cscorley.github.io/)',
  base00: '#151515',
  base01: '#202020',
  base02: '#303030',
  base03: '#505050',
  base04: '#B0B0B0',
  base05: '#D0D0D0',
  base06: '#E0E0E0',
  base07: '#FFFFFF',
  base08: '#FF0086',
  base09: '#FD8900',
  base0A: '#ABA800',
  base0B: '#00C918',
  base0C: '#1faaaa',
  base0D: '#3777E6',
  base0E: '#AD00A1',
  base0F: '#cc6633'
};
module.exports = exports['default'];
},{}],138:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'threezerotwofour',
  author: 'jan t. sott (http://github.com/idleberg)',
  base00: '#090300',
  base01: '#3a3432',
  base02: '#4a4543',
  base03: '#5c5855',
  base04: '#807d7c',
  base05: '#a5a2a2',
  base06: '#d6d5d4',
  base07: '#f7f7f7',
  base08: '#db2d20',
  base09: '#e8bbd0',
  base0A: '#fded02',
  base0B: '#01a252',
  base0C: '#b5e4f4',
  base0D: '#01a0e4',
  base0E: '#a16a94',
  base0F: '#cdab53'
};
module.exports = exports['default'];
},{}],139:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'tomorrow',
  author: 'chris kempson (http://chriskempson.com)',
  base00: '#1d1f21',
  base01: '#282a2e',
  base02: '#373b41',
  base03: '#969896',
  base04: '#b4b7b4',
  base05: '#c5c8c6',
  base06: '#e0e0e0',
  base07: '#ffffff',
  base08: '#cc6666',
  base09: '#de935f',
  base0A: '#f0c674',
  base0B: '#b5bd68',
  base0C: '#8abeb7',
  base0D: '#81a2be',
  base0E: '#b294bb',
  base0F: '#a3685a'
};
module.exports = exports['default'];
},{}],140:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'london tube',
  author: 'jan t. sott',
  base00: '#231f20',
  base01: '#1c3f95',
  base02: '#5a5758',
  base03: '#737171',
  base04: '#959ca1',
  base05: '#d9d8d8',
  base06: '#e7e7e8',
  base07: '#ffffff',
  base08: '#ee2e24',
  base09: '#f386a1',
  base0A: '#ffd204',
  base0B: '#00853e',
  base0C: '#85cebc',
  base0D: '#009ddc',
  base0E: '#98005d',
  base0F: '#b06110'
};
module.exports = exports['default'];
},{}],141:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'twilight',
  author: 'david hart (http://hart-dev.com)',
  base00: '#1e1e1e',
  base01: '#323537',
  base02: '#464b50',
  base03: '#5f5a60',
  base04: '#838184',
  base05: '#a7a7a7',
  base06: '#c3c3c3',
  base07: '#ffffff',
  base08: '#cf6a4c',
  base09: '#cda869',
  base0A: '#f9ee98',
  base0B: '#8f9d6a',
  base0C: '#afc4db',
  base0D: '#7587a6',
  base0E: '#9b859d',
  base0F: '#9b703f'
};
module.exports = exports['default'];
},{}],142:[function(require,module,exports){
/*!
  Copyright (c) 2016 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				classes.push(classNames.apply(null, arg));
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		module.exports = classNames;
	} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
		// register as 'classnames', consistent with npm package name
		define('classnames', [], function () {
			return classNames;
		});
	} else {
		window.classNames = classNames;
	}
}());

},{}],143:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyObject = require('fbjs/lib/emptyObject');
var _invariant = require('fbjs/lib/invariant');

if (process.env.NODE_ENV !== 'production') {
  var warning = require('fbjs/lib/warning');
}

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
  /**
   * Policies that describe methods in `ReactClassInterface`.
   */

  var injectedMixins = [];

  /**
   * Composite components are higher-level components that compose other composite
   * or host components.
   *
   * To create a new type of `ReactClass`, pass a specification of
   * your new class to `React.createClass`. The only requirement of your class
   * specification is that you implement a `render` method.
   *
   *   var MyComponent = React.createClass({
   *     render: function() {
   *       return <div>Hello World</div>;
   *     }
   *   });
   *
   * The class specification supports a specific protocol of methods that have
   * special meaning (e.g. `render`). See `ReactClassInterface` for
   * more the comprehensive protocol. Any other properties and methods in the
   * class specification will be available on the prototype.
   *
   * @interface ReactClassInterface
   * @internal
   */
  var ReactClassInterface = {
    /**
     * An array of Mixin objects to include when defining your component.
     *
     * @type {array}
     * @optional
     */
    mixins: 'DEFINE_MANY',

    /**
     * An object containing properties and methods that should be defined on
     * the component's constructor instead of its prototype (static methods).
     *
     * @type {object}
     * @optional
     */
    statics: 'DEFINE_MANY',

    /**
     * Definition of prop types for this component.
     *
     * @type {object}
     * @optional
     */
    propTypes: 'DEFINE_MANY',

    /**
     * Definition of context types for this component.
     *
     * @type {object}
     * @optional
     */
    contextTypes: 'DEFINE_MANY',

    /**
     * Definition of context types this component sets for its children.
     *
     * @type {object}
     * @optional
     */
    childContextTypes: 'DEFINE_MANY',

    // ==== Definition methods ====

    /**
     * Invoked when the component is mounted. Values in the mapping will be set on
     * `this.props` if that prop is not specified (i.e. using an `in` check).
     *
     * This method is invoked before `getInitialState` and therefore cannot rely
     * on `this.state` or use `this.setState`.
     *
     * @return {object}
     * @optional
     */
    getDefaultProps: 'DEFINE_MANY_MERGED',

    /**
     * Invoked once before the component is mounted. The return value will be used
     * as the initial value of `this.state`.
     *
     *   getInitialState: function() {
     *     return {
     *       isOn: false,
     *       fooBaz: new BazFoo()
     *     }
     *   }
     *
     * @return {object}
     * @optional
     */
    getInitialState: 'DEFINE_MANY_MERGED',

    /**
     * @return {object}
     * @optional
     */
    getChildContext: 'DEFINE_MANY_MERGED',

    /**
     * Uses props from `this.props` and state from `this.state` to render the
     * structure of the component.
     *
     * No guarantees are made about when or how often this method is invoked, so
     * it must not have side effects.
     *
     *   render: function() {
     *     var name = this.props.name;
     *     return <div>Hello, {name}!</div>;
     *   }
     *
     * @return {ReactComponent}
     * @required
     */
    render: 'DEFINE_ONCE',

    // ==== Delegate methods ====

    /**
     * Invoked when the component is initially created and about to be mounted.
     * This may have side effects, but any external subscriptions or data created
     * by this method must be cleaned up in `componentWillUnmount`.
     *
     * @optional
     */
    componentWillMount: 'DEFINE_MANY',

    /**
     * Invoked when the component has been mounted and has a DOM representation.
     * However, there is no guarantee that the DOM node is in the document.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been mounted (initialized and rendered) for the first time.
     *
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidMount: 'DEFINE_MANY',

    /**
     * Invoked before the component receives new props.
     *
     * Use this as an opportunity to react to a prop transition by updating the
     * state using `this.setState`. Current props are accessed via `this.props`.
     *
     *   componentWillReceiveProps: function(nextProps, nextContext) {
     *     this.setState({
     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
     *     });
     *   }
     *
     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
     * transition may cause a state change, but the opposite is not true. If you
     * need it, you are probably looking for `componentWillUpdate`.
     *
     * @param {object} nextProps
     * @optional
     */
    componentWillReceiveProps: 'DEFINE_MANY',

    /**
     * Invoked while deciding if the component should be updated as a result of
     * receiving new props, state and/or context.
     *
     * Use this as an opportunity to `return false` when you're certain that the
     * transition to the new props/state/context will not require a component
     * update.
     *
     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
     *     return !equal(nextProps, this.props) ||
     *       !equal(nextState, this.state) ||
     *       !equal(nextContext, this.context);
     *   }
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @return {boolean} True if the component should update.
     * @optional
     */
    shouldComponentUpdate: 'DEFINE_ONCE',

    /**
     * Invoked when the component is about to update due to a transition from
     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
     * and `nextContext`.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * NOTE: You **cannot** use `this.setState()` in this method.
     *
     * @param {object} nextProps
     * @param {?object} nextState
     * @param {?object} nextContext
     * @param {ReactReconcileTransaction} transaction
     * @optional
     */
    componentWillUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component's DOM representation has been updated.
     *
     * Use this as an opportunity to operate on the DOM when the component has
     * been updated.
     *
     * @param {object} prevProps
     * @param {?object} prevState
     * @param {?object} prevContext
     * @param {DOMElement} rootNode DOM element representing the component.
     * @optional
     */
    componentDidUpdate: 'DEFINE_MANY',

    /**
     * Invoked when the component is about to be removed from its parent and have
     * its DOM representation destroyed.
     *
     * Use this as an opportunity to deallocate any external resources.
     *
     * NOTE: There is no `componentDidUnmount` since your component will have been
     * destroyed by that point.
     *
     * @optional
     */
    componentWillUnmount: 'DEFINE_MANY',

    // ==== Advanced methods ====

    /**
     * Updates the component's currently mounted DOM representation.
     *
     * By default, this implements React's rendering and reconciliation algorithm.
     * Sophisticated clients may wish to override this.
     *
     * @param {ReactReconcileTransaction} transaction
     * @internal
     * @overridable
     */
    updateComponent: 'OVERRIDE_BASE'
  };

  /**
   * Mapping from class specification keys to special processing functions.
   *
   * Although these are declared like instance properties in the specification
   * when defining classes using `React.createClass`, they are actually static
   * and are accessible on the constructor instead of the prototype. Despite
   * being static, they must be defined outside of the "statics" key under
   * which all other static methods are defined.
   */
  var RESERVED_SPEC_KEYS = {
    displayName: function(Constructor, displayName) {
      Constructor.displayName = displayName;
    },
    mixins: function(Constructor, mixins) {
      if (mixins) {
        for (var i = 0; i < mixins.length; i++) {
          mixSpecIntoComponent(Constructor, mixins[i]);
        }
      }
    },
    childContextTypes: function(Constructor, childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign(
        {},
        Constructor.childContextTypes,
        childContextTypes
      );
    },
    contextTypes: function(Constructor, contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, contextTypes, 'context');
      }
      Constructor.contextTypes = _assign(
        {},
        Constructor.contextTypes,
        contextTypes
      );
    },
    /**
     * Special case getDefaultProps which should move into statics but requires
     * automatic merging.
     */
    getDefaultProps: function(Constructor, getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(
          Constructor.getDefaultProps,
          getDefaultProps
        );
      } else {
        Constructor.getDefaultProps = getDefaultProps;
      }
    },
    propTypes: function(Constructor, propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
    },
    statics: function(Constructor, statics) {
      mixStaticSpecIntoComponent(Constructor, statics);
    },
    autobind: function() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        // use a warning instead of an _invariant so components
        // don't show up in prod but only in __DEV__
        if (process.env.NODE_ENV !== 'production') {
          warning(
            typeof typeDef[propName] === 'function',
            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
              'React.PropTypes.',
            Constructor.displayName || 'ReactClass',
            ReactPropTypeLocationNames[location],
            propName
          );
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name)
      ? ReactClassInterface[name]
      : null;

    // Disallow overriding of base class methods unless explicitly allowed.
    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(
        specPolicy === 'OVERRIDE_BASE',
        'ReactClassInterface: You are attempting to override ' +
          '`%s` from your class specification. Ensure that your method names ' +
          'do not overlap with React methods.',
        name
      );
    }

    // Disallow defining methods more than once unless explicitly allowed.
    if (isAlreadyDefined) {
      _invariant(
        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
        'ReactClassInterface: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be due ' +
          'to a mixin.',
        name
      );
    }
  }

  /**
   * Mixin helper which handles policy validation and reserved
   * specification keys when building React classes.
   */
  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(
            isMixinValid,
            "%s: You're attempting to include a mixin that is either null " +
              'or not an object. Check the mixins included by the component, ' +
              'as well as any mixins they include themselves. ' +
              'Expected object but got %s.',
            Constructor.displayName || 'ReactClass',
            spec === null ? null : typeofSpec
          );
        }
      }

      return;
    }

    _invariant(
      typeof spec !== 'function',
      "ReactClass: You're attempting to " +
        'use a component class or function as a mixin. Instead, just use a ' +
        'regular object.'
    );
    _invariant(
      !isValidElement(spec),
      "ReactClass: You're attempting to " +
        'use a component as a mixin. Instead, just use a regular object.'
    );

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    // By handling mixins before any other properties, we ensure the same
    // chaining order is applied to methods with DEFINE_MANY policy, whether
    // mixins are listed before or after these methods in the spec.
    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        // We have already handled mixins in a special case above.
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        // Setup methods on prototype:
        // The following member methods should not be automatically bound:
        // 1. Expected ReactClass methods (in the "interface").
        // 2. Overridden methods (that were mixed in).
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind =
          isFunction &&
          !isReactClassMethod &&
          !isAlreadyDefined &&
          spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            // These cases should already be caught by validateMethodOverride.
            _invariant(
              isReactClassMethod &&
                (specPolicy === 'DEFINE_MANY_MERGED' ||
                  specPolicy === 'DEFINE_MANY'),
              'ReactClass: Unexpected spec policy %s for key %s ' +
                'when mixing in component specs.',
              specPolicy,
              name
            );

            // For methods which are defined more than once, call the existing
            // methods before calling the new property, merging if appropriate.
            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              // Add verbose displayName to the function, which helps when looking
              // at profiling tools.
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(
        !isReserved,
        'ReactClass: You are attempting to define a reserved ' +
          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
          'as an instance property instead; it will still be accessible on the ' +
          'constructor.',
        name
      );

      var isInherited = name in Constructor;
      _invariant(
        !isInherited,
        'ReactClass: You are attempting to define ' +
          '`%s` on your component more than once. This conflict may be ' +
          'due to a mixin.',
        name
      );
      Constructor[name] = property;
    }
  }

  /**
   * Merge two objects, but throw if both contain the same key.
   *
   * @param {object} one The first object, which is mutated.
   * @param {object} two The second object
   * @return {object} one after it has been mutated to contain everything in two.
   */
  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(
      one && two && typeof one === 'object' && typeof two === 'object',
      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
    );

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(
          one[key] === undefined,
          'mergeIntoWithNoDuplicateKeys(): ' +
            'Tried to merge two objects with the same key: `%s`. This conflict ' +
            'may be due to a mixin; in particular, this may be caused by two ' +
            'getInitialState() or getDefaultProps() methods returning objects ' +
            'with clashing keys.',
          key
        );
        one[key] = two[key];
      }
    }
    return one;
  }

  /**
   * Creates a function that invokes two functions and merges their return values.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  /**
   * Creates a function that invokes two functions and ignores their return vales.
   *
   * @param {function} one Function to invoke first.
   * @param {function} two Function to invoke second.
   * @return {function} Function that invokes the two argument functions.
   * @private
   */
  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  /**
   * Binds a method to the component.
   *
   * @param {object} component Component whose method is going to be bound.
   * @param {function} method Method to be bound.
   * @return {function} The bound method.
   */
  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function(newThis) {
        for (
          var _len = arguments.length,
            args = Array(_len > 1 ? _len - 1 : 0),
            _key = 1;
          _key < _len;
          _key++
        ) {
          args[_key - 1] = arguments[_key];
        }

        // User is trying to bind() an autobound method; we effectively will
        // ignore the value of "this" that the user is trying to use, so
        // let's warn.
        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): React component methods may only be bound to the ' +
                'component instance. See %s',
              componentName
            );
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(
              false,
              'bind(): You are binding a component method to the component. ' +
                'React does this for you automatically in a high-performance ' +
                'way, so you can safely remove this call. See %s',
              componentName
            );
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  /**
   * Binds all auto-bound methods in a component.
   *
   * @param {object} component Component whose method is going to be bound.
   */
  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function() {
      this.__isMounted = false;
    }
  };

  /**
   * Add more to the ReactClass base class. These are all legacy features and
   * therefore not already part of the modern ReactComponent.
   */
  var ReactClassMixin = {
    /**
     * TODO: This will be deprecated because state should always keep a consistent
     * type signature and the only use case for this, is to avoid that.
     */
    replaceState: function(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    /**
     * Checks whether or not this composite component is mounted.
     * @return {boolean} True if mounted, false otherwise.
     * @protected
     * @final
     */
    isMounted: function() {
      if (process.env.NODE_ENV !== 'production') {
        warning(
          this.__didWarnIsMounted,
          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
            'subscriptions and pending requests in componentWillUnmount to ' +
            'prevent memory leaks.',
          (this.constructor && this.constructor.displayName) ||
            this.name ||
            'Component'
        );
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function() {};
  _assign(
    ReactClassComponent.prototype,
    ReactComponent.prototype,
    ReactClassMixin
  );

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  function createClass(spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function(props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        warning(
          this instanceof Constructor,
          'Something is calling a React component directly. Use a factory or ' +
            'JSX instead. See: https://fb.me/react-legacyfactory'
        );
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (
          initialState === undefined &&
          this.getInitialState._isMockFunction
        ) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      _invariant(
        typeof initialState === 'object' && !Array.isArray(initialState),
        '%s.getInitialState(): must return an object or null',
        Constructor.displayName || 'ReactCompositeComponent'
      );

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(
      Constructor.prototype.render,
      'createClass(...): Class specification must implement a `render` method.'
    );

    if (process.env.NODE_ENV !== 'production') {
      warning(
        !Constructor.prototype.componentShouldUpdate,
        '%s has a method called ' +
          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
          'The name is phrased as a question because the function is ' +
          'expected to return a value.',
        spec.displayName || 'A component'
      );
      warning(
        !Constructor.prototype.componentWillRecieveProps,
        '%s has a method called ' +
          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
        spec.displayName || 'A component'
      );
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;

}).call(this,require('_process'))
},{"_process":172,"fbjs/lib/emptyObject":154,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"object-assign":171}],144:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
module.exports = exports['default'];
},{}],145:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (recalc) {
  if (!size || recalc) {
    if (_inDOM2.default) {
      var scrollDiv = document.createElement('div');

      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.width = '50px';
      scrollDiv.style.height = '50px';
      scrollDiv.style.overflow = 'scroll';

      document.body.appendChild(scrollDiv);
      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
  }

  return size;
};

var _inDOM = require('./inDOM');

var _inDOM2 = _interopRequireDefault(_inDOM);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var size = void 0;

module.exports = exports['default'];
},{"./inDOM":144}],146:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var emptyFunction = require('./emptyFunction');

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
}).call(this,require('_process'))
},{"./emptyFunction":153,"_process":172}],147:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;
},{}],148:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;
},{}],149:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var camelize = require('./camelize');

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;
},{"./camelize":148}],150:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = require('./isTextNode');

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;
},{"./isTextNode":163}],151:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = require('./invariant');

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
}).call(this,require('_process'))
},{"./invariant":161,"_process":172}],152:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = require('./ExecutionEnvironment');

var createArrayFromMixed = require('./createArrayFromMixed');
var getMarkupWrap = require('./getMarkupWrap');
var invariant = require('./invariant');

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
}).call(this,require('_process'))
},{"./ExecutionEnvironment":147,"./createArrayFromMixed":151,"./getMarkupWrap":157,"./invariant":161,"_process":172}],153:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],154:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}).call(this,require('_process'))
},{"_process":172}],155:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;
},{}],156:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || (typeof document !== 'undefined' ? document : undefined);
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
},{}],157:[function(require,module,exports){
(function (process){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = require('./ExecutionEnvironment');

var invariant = require('./invariant');

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
}).call(this,require('_process'))
},{"./ExecutionEnvironment":147,"./invariant":161,"_process":172}],158:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;
},{}],159:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;
},{}],160:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var hyphenate = require('./hyphenate');

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;
},{"./hyphenate":159}],161:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":172}],162:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
},{}],163:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = require('./isNode');

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;
},{"./isNode":162}],164:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */

'use strict';

/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;
},{}],165:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

'use strict';

var ExecutionEnvironment = require('./ExecutionEnvironment');

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
},{"./ExecutionEnvironment":147}],166:[function(require,module,exports){
'use strict';

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = require('./performance');

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
},{"./performance":165}],167:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
},{}],168:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))
},{"./emptyFunction":153,"_process":172}],169:[function(require,module,exports){
(function (global){
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var BIND_FLAG = 1,
    BIND_KEY_FLAG = 2,
    CURRY_BOUND_FLAG = 4,
    CURRY_FLAG = 8,
    CURRY_RIGHT_FLAG = 16,
    PARTIAL_FLAG = 32,
    PARTIAL_RIGHT_FLAG = 64,
    ARY_FLAG = 128,
    REARG_FLAG = 256,
    FLIP_FLAG = 512;

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_SAFE_INTEGER = 9007199254740991,
    MAX_INTEGER = 1.7976931348623157e+308,
    NAN = 0 / 0;

/** Used to associate wrap methods with their bit flags. */
var wrapFlags = [
  ['ary', ARY_FLAG],
  ['bind', BIND_FLAG],
  ['bindKey', BIND_KEY_FLAG],
  ['curry', CURRY_FLAG],
  ['curryRight', CURRY_RIGHT_FLAG],
  ['flip', FLIP_FLAG],
  ['partial', PARTIAL_FLAG],
  ['partialRight', PARTIAL_RIGHT_FLAG],
  ['rearg', REARG_FLAG]
];

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to match wrap detail comments. */
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
    reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array ? array.length : 0;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  if (value !== value) {
    return baseFindIndex(array, baseIsNaN, fromIndex);
  }
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */
function countHolders(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      result++;
    }
  }
  return result;
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */
function replaceHolders(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result[resIndex++] = index;
    }
  }
  return result;
}

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var objectCreate = Object.create;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/* Used to set `toString` methods. */
var defineProperty = (function() {
  var func = getNative(Object, 'defineProperty'),
      name = getNative.name;

  return (name && name.length > 2) ? func : undefined;
}());

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(proto) {
  return isObject(proto) ? objectCreate(proto) : {};
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }
  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }
  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }
  return result;
}

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }
  return wrapper;
}

/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */
function createCtor(Ctor) {
  return function() {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;
    switch (args.length) {
      case 0: return new Ctor;
      case 1: return new Ctor(args[0]);
      case 2: return new Ctor(args[0], args[1]);
      case 3: return new Ctor(args[0], args[1], args[2]);
      case 4: return new Ctor(args[0], args[1], args[2], args[3]);
      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }
    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args);

    // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.
    return isObject(result) ? result : thisBinding;
  };
}

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, undefined,
        args, holders, undefined, undefined, arity - length);
    }
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & ARY_FLAG,
      isBind = bitmask & BIND_FLAG,
      isBindKey = bitmask & BIND_KEY_FLAG,
      isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),
      isFlip = bitmask & FLIP_FLAG,
      Ctor = isBindKey ? undefined : createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }
    if (isCurried) {
      var placeholder = getHolder(wrapper),
          holdersCount = countHolders(args, placeholder);
    }
    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }
    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }
    length -= holdersCount;
    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, thisArg,
        args, newHolders, argPos, ary, arity - length
      );
    }
    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;

    length = args.length;
    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }
    if (isAry && ary < length) {
      args.length = ary;
    }
    if (this && this !== root && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }
    return fn.apply(thisBinding, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */
function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }
    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }
    return apply(fn, isBind ? thisArg : this, args);
  }
  return wrapper;
}

/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;

  bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
  bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

  if (!(bitmask & CURRY_BOUND_FLAG)) {
    bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
  }

  var result = wrapFunc(func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity);
  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *  The bitmask may be composed of the following flags:
 *     1 - `_.bind`
 *     2 - `_.bindKey`
 *     4 - `_.curry` or `_.curryRight` of a bound function
 *     8 - `_.curry`
 *    16 - `_.curryRight`
 *    32 - `_.partial`
 *    64 - `_.partialRight`
 *   128 - `_.rearg`
 *   256 - `_.ary`
 *   512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & BIND_KEY_FLAG;
  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var length = partials ? partials.length : 0;
  if (!length) {
    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
    partials = holders = undefined;
  }
  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials,
        holdersRight = holders;

    partials = holders = undefined;
  }

  var newData = [
    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
    argPos, ary, arity
  ];

  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] == null
    ? (isBindKey ? 0 : func.length)
    : nativeMax(newData[9] - length, 0);

  if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {
    bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);
  }
  if (!bitmask || bitmask == BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }
  return setWrapToString(result, func, bitmask);
}

/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */
function getHolder(func) {
  var object = func;
  return object.placeholder;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */
function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */
function insertWrapDetails(source, details) {
  var length = details.length,
      lastIndex = length - 1;

  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */
function reorder(array, indexes) {
  var arrLength = array.length,
      length = nativeMin(indexes.length, arrLength),
      oldArray = copyArray(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
  }
  return array;
}

/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */
var setWrapToString = !defineProperty ? identity : function(wrapper, reference, bitmask) {
  var source = (reference + '');
  return defineProperty(wrapper, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)))
  });
};

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */
function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function(pair) {
    var value = '_.' + pair[0];
    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */
function curry(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curry.placeholder;
  return result;
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

// Assign default placeholders.
curry.placeholder = {};

module.exports = curry;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],170:[function(require,module,exports){
(function (global){
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol,
    propertyIsEnumerable = objectProto.propertyIsEnumerable,
    spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */
function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;

  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];
    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }
  return result;
}

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = array;
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates a `_.flow` or `_.flowRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new flow function.
 */
function createFlow(fromRight) {
  return baseRest(function(funcs) {
    funcs = baseFlatten(funcs, 1);

    var length = funcs.length,
        index = length;

    if (fromRight) {
      funcs.reverse();
    }
    while (index--) {
      if (typeof funcs[index] != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
    }
    return function() {
      var index = 0,
          result = length ? funcs[index].apply(this, arguments) : arguments[0];

      while (++index < length) {
        result = funcs[index].call(this, result);
      }
      return result;
    };
  });
}

/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */
function isFlattenable(value) {
  return isArray(value) || isArguments(value) ||
    !!(spreadableSymbol && value && value[spreadableSymbol]);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates a function that returns the result of invoking the given functions
 * with the `this` binding of the created function, where each successive
 * invocation is supplied the return value of the previous.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flowRight
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flow([_.add, square]);
 * addSquare(1, 2);
 * // => 9
 */
var flow = createFlow();

module.exports = flow;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],171:[function(require,module,exports){
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';
/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],172:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],173:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant = require('fbjs/lib/invariant');
  var warning = require('fbjs/lib/warning');
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

}).call(this,require('_process'))
},{"./lib/ReactPropTypesSecret":176,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168}],174:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

// React 15.5 references this module, and assumes PropTypes are still callable in production.
// Therefore we re-export development-only version with all the PropTypes checks here.
// However if one is migrating to the `prop-types` npm library, they will go through the
// `index.js` entry point, and it will branch depending on the environment.
var factory = require('./factoryWithTypeCheckers');
module.exports = function(isValidElement) {
  // It is still allowed in 15.5.
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};

},{"./factoryWithTypeCheckers":175}],175:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

}).call(this,require('_process'))
},{"./checkPropTypes":173,"./lib/ReactPropTypesSecret":176,"_process":172,"fbjs/lib/emptyFunction":153,"fbjs/lib/invariant":161,"fbjs/lib/warning":168}],176:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],177:[function(require,module,exports){
function hsl2rgb(hsl) {
  var h = hsl[0] / 360,
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      t1, t2, t3, rgb, val;

  if (s == 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5)
    t2 = l * (1 + s);
  else
    t2 = l + s - l * s;
  t1 = 2 * l - t2;

  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * - (i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;

    if (6 * t3 < 1)
      val = t1 + (t2 - t1) * 6 * t3;
    else if (2 * t3 < 1)
      val = t2;
    else if (3 * t3 < 2)
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    else
      val = t1;

    rgb[i] = val * 255;
  }

  return rgb;
}

module.exports = hsl2rgb;
},{}],178:[function(require,module,exports){
var clamp = require("../util/clamp");

function componentToHex(c) {
  var value = Math.round(clamp(c, 0, 255));
  var hex   = value.toString(16);

  return hex.length == 1 ? "0" + hex : hex;
}

function rgb2hex(rgb) {
  var alpha = rgb.length === 4 ? componentToHex(rgb[3] * 255) : "";

  return "#" + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]) + alpha;
}

module.exports = rgb2hex;
},{"../util/clamp":184}],179:[function(require,module,exports){
var component = /-?\d+(\.\d+)?%?/g;
function extractComponents(color) {
  return color.match(component);
}

module.exports = extractComponents;
},{}],180:[function(require,module,exports){
function expand(hex) {
  var result = "#";

  for (var i = 1; i < hex.length; i++) {
    var val = hex.charAt(i);
    result += val + val;
  }

  return result;
}

function hex(hex) {
  // #RGB or #RGBA
  if(hex.length === 4 || hex.length === 5) {
    hex = expand(hex);
  }

  var rgb = [
    parseInt(hex.substring(1,3), 16),
    parseInt(hex.substring(3,5), 16),
    parseInt(hex.substring(5,7), 16)
  ];

  // #RRGGBBAA
  if (hex.length === 9) {
    var alpha = parseFloat((parseInt(hex.substring(7,9), 16) / 255).toFixed(2));
    rgb.push(alpha);
  }

  return rgb;
}

module.exports = hex;
},{}],181:[function(require,module,exports){
var extractComponents = require("./extractComponents");
var clamp = require("../util/clamp");

function parseHslComponent(component, i) {
  component = parseFloat(component);

  switch(i) {
    case 0:
      return clamp(component, 0, 360);
    case 1:
    case 2:
      return clamp(component, 0, 100);
    case 3:
      return clamp(component, 0, 1);
  }
}

function hsl(color) {
  return extractComponents(color).map(parseHslComponent);
}

module.exports = hsl;
},{"../util/clamp":184,"./extractComponents":179}],182:[function(require,module,exports){
var hsl = require("./hsl");
var hex = require("./hex");
var rgb = require("./rgb");
var hsl2rgb = require("../convert/hsl2rgb");

function hsl2rgbParse(color) {
  var h = hsl(color);
  var r = hsl2rgb(h);

  // handle alpha since hsl2rgb doesn't know (or care!) about it
  if(h.length === 4) {
    r.push(h[3]);
  }

  return r;
}

var space2parser = {
  "#" : hex,
  "hsl" : hsl2rgbParse,
  "rgb" : rgb
};

function parse(color) {
  for(var scheme in space2parser) {
    if(color.indexOf(scheme) === 0) {
      return space2parser[scheme](color);
    }
  }
}

parse.rgb = rgb;
parse.hsl = hsl;
parse.hex = hex;

module.exports = parse;
},{"../convert/hsl2rgb":177,"./hex":180,"./hsl":181,"./rgb":183}],183:[function(require,module,exports){
var extractComponents = require("./extractComponents");
var clamp = require("../util/clamp");

function parseRgbComponent(component, i) {
  if (i < 3) {
    if (component.indexOf('%') != -1) {
      return Math.round(255 * clamp(parseInt(component, 10), 0, 100)/100);
    } else {
      return clamp(parseInt(component, 10), 0, 255);
    }
  } else {
    return clamp(parseFloat(component), 0, 1);
  } 
}

function rgb(color) {
  return extractComponents(color).map(parseRgbComponent);
}

module.exports = rgb;
},{"../util/clamp":184,"./extractComponents":179}],184:[function(require,module,exports){
function clamp(val, min, max) {
  return Math.min(Math.max(val, min), max);
}

module.exports = clamp;
},{}],185:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.yuv2rgb = yuv2rgb;
exports.rgb2yuv = rgb2yuv;
function yuv2rgb(yuv) {
  var y = yuv[0],
      u = yuv[1],
      v = yuv[2],
      r,
      g,
      b;

  r = y * 1 + u * 0 + v * 1.13983;
  g = y * 1 + u * -0.39465 + v * -0.58060;
  b = y * 1 + u * 2.02311 + v * 0;

  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);

  return [r * 255, g * 255, b * 255];
}

function rgb2yuv(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255;

  var y = r * 0.299 + g * 0.587 + b * 0.114;
  var u = r * -0.14713 + g * -0.28886 + b * 0.436;
  var v = r * 0.615 + g * -0.51499 + b * -0.10001;

  return [y, u, v];
};
},{}],186:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBase16Theme = exports.createStyling = exports.invertTheme = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _lodash = require('lodash.curry');

var _lodash2 = _interopRequireDefault(_lodash);

var _base = require('base16');

var base16 = _interopRequireWildcard(_base);

var _rgb2hex = require('pure-color/convert/rgb2hex');

var _rgb2hex2 = _interopRequireDefault(_rgb2hex);

var _parse = require('pure-color/parse');

var _parse2 = _interopRequireDefault(_parse);

var _lodash3 = require('lodash.flow');

var _lodash4 = _interopRequireDefault(_lodash3);

var _colorConverters = require('./colorConverters');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_BASE16 = base16.default;

var BASE16_KEYS = (0, _keys2.default)(DEFAULT_BASE16);

// we need a correcting factor, so that a dark, but not black background color
// converts to bright enough inversed color
var flip = function flip(x) {
  return x < 0.25 ? 1 : x < 0.5 ? 0.9 - x : 1.1 - x;
};

var invertColor = (0, _lodash4.default)(_parse2.default, _colorConverters.rgb2yuv, function (_ref) {
  var _ref2 = (0, _slicedToArray3.default)(_ref, 3),
      y = _ref2[0],
      u = _ref2[1],
      v = _ref2[2];

  return [flip(y), u, v];
}, _colorConverters.yuv2rgb, _rgb2hex2.default);

var merger = function merger(styling) {
  return function (prevStyling) {
    return {
      className: [prevStyling.className, styling.className].filter(Boolean).join(' '),
      style: (0, _extends3.default)({}, prevStyling.style || {}, styling.style || {})
    };
  };
};

var mergeStyling = function mergeStyling(customStyling, defaultStyling) {
  if (customStyling === undefined) {
    return defaultStyling;
  }
  if (defaultStyling === undefined) {
    return customStyling;
  }

  var customType = typeof customStyling === 'undefined' ? 'undefined' : (0, _typeof3.default)(customStyling);
  var defaultType = typeof defaultStyling === 'undefined' ? 'undefined' : (0, _typeof3.default)(defaultStyling);

  switch (customType) {
    case 'string':
      switch (defaultType) {
        case 'string':
          return [defaultStyling, customStyling].filter(Boolean).join(' ');
        case 'object':
          return merger({ className: customStyling, style: defaultStyling });
        case 'function':
          return function (styling) {
            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            return merger({
              className: customStyling
            })(defaultStyling.apply(undefined, [styling].concat(args)));
          };
      }
    case 'object':
      switch (defaultType) {
        case 'string':
          return merger({ className: defaultStyling, style: customStyling });
        case 'object':
          return (0, _extends3.default)({}, defaultStyling, customStyling);
        case 'function':
          return function (styling) {
            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            return merger({
              style: customStyling
            })(defaultStyling.apply(undefined, [styling].concat(args)));
          };
      }
    case 'function':
      switch (defaultType) {
        case 'string':
          return function (styling) {
            for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
              args[_key3 - 1] = arguments[_key3];
            }

            return customStyling.apply(undefined, [merger(styling)({
              className: defaultStyling
            })].concat(args));
          };
        case 'object':
          return function (styling) {
            for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
              args[_key4 - 1] = arguments[_key4];
            }

            return customStyling.apply(undefined, [merger(styling)({
              style: defaultStyling
            })].concat(args));
          };
        case 'function':
          return function (styling) {
            for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
              args[_key5 - 1] = arguments[_key5];
            }

            return customStyling.apply(undefined, [defaultStyling.apply(undefined, [styling].concat(args))].concat(args));
          };
      }
  }
};

var mergeStylings = function mergeStylings(customStylings, defaultStylings) {
  var keys = (0, _keys2.default)(defaultStylings);
  for (var key in customStylings) {
    if (keys.indexOf(key) === -1) keys.push(key);
  }

  return keys.reduce(function (mergedStyling, key) {
    return mergedStyling[key] = mergeStyling(customStylings[key], defaultStylings[key]), mergedStyling;
  }, {});
};

var getStylingByKeys = function getStylingByKeys(mergedStyling, keys) {
  for (var _len6 = arguments.length, args = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
    args[_key6 - 2] = arguments[_key6];
  }

  if (keys === null) {
    return mergedStyling;
  }

  if (!Array.isArray(keys)) {
    keys = [keys];
  }

  var styles = keys.map(function (key) {
    return mergedStyling[key];
  }).filter(Boolean);

  var props = styles.reduce(function (obj, s) {
    if (typeof s === 'string') {
      obj.className = [obj.className, s].filter(Boolean).join(' ');
    } else if ((typeof s === 'undefined' ? 'undefined' : (0, _typeof3.default)(s)) === 'object') {
      obj.style = (0, _extends3.default)({}, obj.style, s);
    } else if (typeof s === 'function') {
      obj = (0, _extends3.default)({}, obj, s.apply(undefined, [obj].concat(args)));
    }

    return obj;
  }, { className: '', style: {} });

  if (!props.className) {
    delete props.className;
  }

  if ((0, _keys2.default)(props.style).length === 0) {
    delete props.style;
  }

  return props;
};

var invertTheme = exports.invertTheme = function invertTheme(theme) {
  return (0, _keys2.default)(theme).reduce(function (t, key) {
    return t[key] = /^base/.test(key) ? invertColor(theme[key]) : key === 'scheme' ? theme[key] + ':inverted' : theme[key], t;
  }, {});
};

var createStyling = exports.createStyling = (0, _lodash2.default)(function (getStylingFromBase16) {
  for (var _len7 = arguments.length, args = Array(_len7 > 3 ? _len7 - 3 : 0), _key7 = 3; _key7 < _len7; _key7++) {
    args[_key7 - 3] = arguments[_key7];
  }

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var themeOrStyling = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$defaultBase = options.defaultBase16,
      defaultBase16 = _options$defaultBase === undefined ? DEFAULT_BASE16 : _options$defaultBase,
      _options$base16Themes = options.base16Themes,
      base16Themes = _options$base16Themes === undefined ? null : _options$base16Themes;


  var base16Theme = getBase16Theme(themeOrStyling, base16Themes);
  if (base16Theme) {
    themeOrStyling = (0, _extends3.default)({}, base16Theme, themeOrStyling);
  }

  var theme = BASE16_KEYS.reduce(function (t, key) {
    return t[key] = themeOrStyling[key] || defaultBase16[key], t;
  }, {});

  var customStyling = (0, _keys2.default)(themeOrStyling).reduce(function (s, key) {
    return BASE16_KEYS.indexOf(key) === -1 ? (s[key] = themeOrStyling[key], s) : s;
  }, {});

  var defaultStyling = getStylingFromBase16(theme);

  var mergedStyling = mergeStylings(customStyling, defaultStyling);

  return (0, _lodash2.default)(getStylingByKeys, 2).apply(undefined, [mergedStyling].concat(args));
}, 3);

var getBase16Theme = exports.getBase16Theme = function getBase16Theme(theme, base16Themes) {
  if (theme && theme.extend) {
    theme = theme.extend;
  }

  if (typeof theme === 'string') {
    var _theme$split = theme.split(':'),
        _theme$split2 = (0, _slicedToArray3.default)(_theme$split, 2),
        themeName = _theme$split2[0],
        modifier = _theme$split2[1];

    theme = (base16Themes || {})[themeName] || base16[themeName];
    if (modifier === 'inverted') {
      theme = invertTheme(theme);
    }
  }

  return theme && theme.hasOwnProperty('base00') ? theme : undefined;
};
},{"./colorConverters":185,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/extends":12,"babel-runtime/helpers/slicedToArray":16,"babel-runtime/helpers/typeof":17,"base16":126,"lodash.curry":169,"lodash.flow":170,"pure-color/convert/rgb2hex":178,"pure-color/parse":182}],187:[function(require,module,exports){
'use strict';

module.exports = require('./lib/ReactDOM');

},{"./lib/ReactDOM":217}],188:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;
},{}],189:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var focusNode = require('fbjs/lib/focusNode');

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;
},{"./ReactDOMComponentTree":220,"fbjs/lib/focusNode":155}],190:[function(require,module,exports){
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var FallbackCompositionState = require('./FallbackCompositionState');
var SyntheticCompositionEvent = require('./SyntheticCompositionEvent');
var SyntheticInputEvent = require('./SyntheticInputEvent');

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;
},{"./EventPropagators":206,"./FallbackCompositionState":207,"./SyntheticCompositionEvent":271,"./SyntheticInputEvent":275,"fbjs/lib/ExecutionEnvironment":147}],191:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;
},{}],192:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactInstrumentation = require('./ReactInstrumentation');

var camelizeStyleName = require('fbjs/lib/camelizeStyleName');
var dangerousStyleValue = require('./dangerousStyleValue');
var hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');
var memoizeStringOnly = require('fbjs/lib/memoizeStringOnly');
var warning = require('fbjs/lib/warning');

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {
  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styleValue, component);
        }
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var isCustomProperty = styleName.indexOf('--') === 0;
      if (process.env.NODE_ENV !== 'production') {
        if (!isCustomProperty) {
          warnValidStyle(styleName, styles[styleName], component);
        }
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (isCustomProperty) {
        style.setProperty(styleName, styleValue);
      } else if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }
};

module.exports = CSSPropertyOperations;
}).call(this,require('_process'))
},{"./CSSProperty":191,"./ReactInstrumentation":249,"./dangerousStyleValue":288,"_process":172,"fbjs/lib/ExecutionEnvironment":147,"fbjs/lib/camelizeStyleName":149,"fbjs/lib/hyphenateStyleName":160,"fbjs/lib/memoizeStringOnly":164,"fbjs/lib/warning":168}],193:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = require('./PooledClass');

var invariant = require('fbjs/lib/invariant');

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
}).call(this,require('_process'))
},{"./PooledClass":211,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],194:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');
var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');
var SyntheticEvent = require('./SyntheticEvent');

var inputValueTracking = require('./inputValueTracking');
var getEventTarget = require('./getEventTarget');
var isEventSupported = require('./isEventSupported');
var isTextInputElement = require('./isTextInputElement');

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
  event.type = 'change';
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getInstIfValueChanged(targetInst, nativeEvent) {
  var updated = inputValueTracking.updateValueIfChanged(targetInst);
  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;

  if (updated || simulated) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}

function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.

  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
}

/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}

/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onpropertychange', handlePropertyChange);

  activeElement = null;
  activeElementInst = null;
}

/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst, nativeEvent);
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topClick') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
    return getInstIfValueChanged(targetInst, nativeEvent);
  }
}

function handleControlledInputBlur(inst, node) {
  // TODO: In IE, inst is occasionally null. Why?
  if (inst == null) {
    return;
  }

  // Fiber and ReactDOM keep wrapper state in separate places
  var state = inst._wrapperState || node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  // If controlled, assign the value attribute to the current value on blur
  var value = '' + node.value;
  if (node.getAttribute('value') !== value) {
    node.setAttribute('value', value);
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {
  eventTypes: eventTypes,

  _allowSimulatedPassThrough: true,
  _isInputEventSupported: isInputEventSupported,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }

    // When blurring, set the value attribute for number inputs
    if (topLevelType === 'topBlur') {
      handleControlledInputBlur(targetInst, targetNode);
    }
  }
};

module.exports = ChangeEventPlugin;
},{"./EventPluginHub":203,"./EventPropagators":206,"./ReactDOMComponentTree":220,"./ReactUpdates":264,"./SyntheticEvent":273,"./getEventTarget":296,"./inputValueTracking":302,"./isEventSupported":304,"./isTextInputElement":305,"fbjs/lib/ExecutionEnvironment":147}],195:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMLazyTree = require('./DOMLazyTree');
var Danger = require('./Danger');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstrumentation = require('./ReactInstrumentation');

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
var setInnerHTML = require('./setInnerHTML');
var setTextContent = require('./setTextContent');

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {
  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: {
                toIndex: update.toIndex,
                content: update.content.toString()
              }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }
};

module.exports = DOMChildrenOperations;
}).call(this,require('_process'))
},{"./DOMLazyTree":196,"./Danger":200,"./ReactDOMComponentTree":220,"./ReactInstrumentation":249,"./createMicrosoftUnsafeLocalFunction":287,"./setInnerHTML":309,"./setTextContent":310,"_process":172}],196:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMNamespaces = require('./DOMNamespaces');
var setInnerHTML = require('./setInnerHTML');

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');
var setTextContent = require('./setTextContent');

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;
},{"./DOMNamespaces":197,"./createMicrosoftUnsafeLocalFunction":287,"./setInnerHTML":309,"./setTextContent":310}],197:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;
},{}],198:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {
  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],199:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstrumentation = require('./ReactInstrumentation');

var quoteAttributeValueForBrowser = require('./quoteAttributeValueForBrowser');
var warning = require('fbjs/lib/warning');

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {
  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }
};

module.exports = DOMPropertyOperations;
}).call(this,require('_process'))
},{"./DOMProperty":198,"./ReactDOMComponentTree":220,"./ReactInstrumentation":249,"./quoteAttributeValueForBrowser":306,"_process":172,"fbjs/lib/warning":168}],200:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMLazyTree = require('./DOMLazyTree');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');
var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');

var Danger = {
  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }
};

module.exports = Danger;
}).call(this,require('_process'))
},{"./DOMLazyTree":196,"./reactProdInvariant":307,"_process":172,"fbjs/lib/ExecutionEnvironment":147,"fbjs/lib/createNodesFromMarkup":152,"fbjs/lib/emptyFunction":153,"fbjs/lib/invariant":161}],201:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;
},{}],202:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {
  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }
};

module.exports = EnterLeaveEventPlugin;
},{"./EventPropagators":206,"./ReactDOMComponentTree":220,"./SyntheticMouseEvent":277}],203:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var EventPluginRegistry = require('./EventPluginRegistry');
var EventPluginUtils = require('./EventPluginUtils');
var ReactErrorUtils = require('./ReactErrorUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var invariant = require('fbjs/lib/invariant');

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {
  /**
   * Methods for injecting dependencies.
   */
  injection: {
    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }
};

module.exports = EventPluginHub;
}).call(this,require('_process'))
},{"./EventPluginRegistry":204,"./EventPluginUtils":205,"./ReactErrorUtils":240,"./accumulateInto":284,"./forEachAccumulated":292,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],204:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {
  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }
};

module.exports = EventPluginRegistry;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],205:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactErrorUtils = require('./ReactErrorUtils');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}).call(this,require('_process'))
},{"./ReactErrorUtils":240,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168}],206:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');
var EventPluginUtils = require('./EventPluginUtils');

var accumulateInto = require('./accumulateInto');
var forEachAccumulated = require('./forEachAccumulated');
var warning = require('fbjs/lib/warning');

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}).call(this,require('_process'))
},{"./EventPluginHub":203,"./EventPluginUtils":205,"./accumulateInto":284,"./forEachAccumulated":292,"_process":172,"fbjs/lib/warning":168}],207:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');

var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;
},{"./PooledClass":211,"./getTextContentAccessor":300,"object-assign":171}],208:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {},
  DOMMutationMethods: {
    value: function (node, value) {
      if (value == null) {
        return node.removeAttribute('value');
      }

      // Number inputs get special treatment due to some edge cases in
      // Chrome. Let everything else assign the value attribute as normal.
      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
      if (node.type !== 'number' || node.hasAttribute('value') === false) {
        node.setAttribute('value', '' + value);
      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
        // Don't assign an attribute if validation reports bad
        // input. Chrome will clear the value. Additionally, don't
        // operate on inputs that have focus, otherwise Chrome might
        // strip off trailing decimal places and cause the user's
        // cursor position to jump to the beginning of the input.
        //
        // In ReactDOMInput, we have an onBlur event that will trigger
        // this function again when focus is lost.
        node.setAttribute('value', '' + value);
      }
    }
  }
};

module.exports = HTMLDOMPropertyConfig;
},{"./DOMProperty":198}],209:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
},{}],210:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypesSecret = require('./ReactPropTypesSecret');
var propTypesFactory = require('prop-types/factory');

var React = require('react/lib/React');
var PropTypes = propTypesFactory(React.isValidElement);

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
}).call(this,require('_process'))
},{"./ReactPropTypesSecret":257,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"prop-types/factory":174,"react/lib/React":410}],211:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],212:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var EventPluginRegistry = require('./EventPluginRegistry');
var ReactEventEmitterMixin = require('./ReactEventEmitterMixin');
var ViewportMetrics = require('./ViewportMetrics');

var getVendorPrefixedEventName = require('./getVendorPrefixedEventName');
var isEventSupported = require('./isEventSupported');

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {
          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }
});

module.exports = ReactBrowserEventEmitter;
},{"./EventPluginRegistry":204,"./ReactEventEmitterMixin":241,"./ViewportMetrics":283,"./getVendorPrefixedEventName":301,"./isEventSupported":304,"object-assign":171}],213:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactReconciler = require('./ReactReconciler');

var instantiateReactComponent = require('./instantiateReactComponent');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
  {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
  {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }
};

module.exports = ReactChildReconciler;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":209,"./ReactReconciler":259,"./instantiateReactComponent":303,"./shouldUpdateReactComponent":311,"./traverseAllChildren":312,"_process":172,"fbjs/lib/warning":168,"react/lib/ReactComponentTreeHook":413}],214:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var ReactDOMIDOperations = require('./ReactDOMIDOperations');

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {
  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
};

module.exports = ReactComponentBrowserEnvironment;
},{"./DOMChildrenOperations":195,"./ReactDOMIDOperations":224}],215:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var injected = false;

var ReactComponentEnvironment = {
  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }
};

module.exports = ReactComponentEnvironment;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],216:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var React = require('react/lib/React');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactErrorUtils = require('./ReactErrorUtils');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactNodeTypes = require('./ReactNodeTypes');
var ReactReconciler = require('./ReactReconciler');

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = require('./checkReactTypeSpec');
}

var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var shallowEqual = require('fbjs/lib/shallowEqual');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {
  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null
};

module.exports = ReactCompositeComponent;
}).call(this,require('_process'))
},{"./ReactComponentEnvironment":215,"./ReactErrorUtils":240,"./ReactInstanceMap":248,"./ReactInstrumentation":249,"./ReactNodeTypes":254,"./ReactReconciler":259,"./checkReactTypeSpec":286,"./reactProdInvariant":307,"./shouldUpdateReactComponent":311,"_process":172,"fbjs/lib/emptyObject":154,"fbjs/lib/invariant":161,"fbjs/lib/shallowEqual":167,"fbjs/lib/warning":168,"object-assign":171,"react/lib/React":410,"react/lib/ReactCurrentOwner":414}],217:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDefaultInjection = require('./ReactDefaultInjection');
var ReactMount = require('./ReactMount');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdates = require('./ReactUpdates');
var ReactVersion = require('./ReactVersion');

var findDOMNode = require('./findDOMNode');
var getHostComponentFromComposite = require('./getHostComponentFromComposite');
var renderSubtreeIntoContainer = require('./renderSubtreeIntoContainer');
var warning = require('fbjs/lib/warning');

ReactDefaultInjection.inject();

var ReactDOM = {
  findDOMNode: findDOMNode,
  render: ReactMount.render,
  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
  version: ReactVersion,

  /* eslint-disable camelcase */
  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
  /* eslint-enable camelcase */
};

// Inject the runtime into a devtools global hook regardless of browser.
// Allows for debugging when the hook is injected on the page.
if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
      getNodeFromInstance: function (inst) {
        // inst is an internal instance (but could be a composite)
        if (inst._renderedComponent) {
          inst = getHostComponentFromComposite(inst);
        }
        if (inst) {
          return ReactDOMComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactMount,
    Reconciler: ReactReconciler
  });
}

if (process.env.NODE_ENV !== 'production') {
  var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
    // First check if devtools is not installed
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
      // If we're in Chrome or Firefox, provide a download link if not installed.
      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
        // Firefox does not have the issue with devtools loaded over file://
        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
      }
    }

    var testFunc = function testFn() {};
    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;

    // If we're in IE8, check to see if we are in compatibility mode and provide
    // information on preventing compatibility mode
    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;

    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;

    var expectedFeatures = [
    // shims
    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];

    for (var i = 0; i < expectedFeatures.length; i++) {
      if (!expectedFeatures[i]) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
        break;
      }
    }
  }
}

if (process.env.NODE_ENV !== 'production') {
  var ReactInstrumentation = require('./ReactInstrumentation');
  var ReactDOMUnknownPropertyHook = require('./ReactDOMUnknownPropertyHook');
  var ReactDOMNullInputValuePropHook = require('./ReactDOMNullInputValuePropHook');
  var ReactDOMInvalidARIAHook = require('./ReactDOMInvalidARIAHook');

  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
}

module.exports = ReactDOM;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":220,"./ReactDOMInvalidARIAHook":226,"./ReactDOMNullInputValuePropHook":227,"./ReactDOMUnknownPropertyHook":234,"./ReactDefaultInjection":237,"./ReactInstrumentation":249,"./ReactMount":252,"./ReactReconciler":259,"./ReactUpdates":264,"./ReactVersion":265,"./findDOMNode":290,"./getHostComponentFromComposite":297,"./renderSubtreeIntoContainer":308,"_process":172,"fbjs/lib/ExecutionEnvironment":147,"fbjs/lib/warning":168}],218:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var AutoFocusUtils = require('./AutoFocusUtils');
var CSSPropertyOperations = require('./CSSPropertyOperations');
var DOMLazyTree = require('./DOMLazyTree');
var DOMNamespaces = require('./DOMNamespaces');
var DOMProperty = require('./DOMProperty');
var DOMPropertyOperations = require('./DOMPropertyOperations');
var EventPluginHub = require('./EventPluginHub');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMInput = require('./ReactDOMInput');
var ReactDOMOption = require('./ReactDOMOption');
var ReactDOMSelect = require('./ReactDOMSelect');
var ReactDOMTextarea = require('./ReactDOMTextarea');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactMultiChild = require('./ReactMultiChild');
var ReactServerRenderingTransaction = require('./ReactServerRenderingTransaction');

var emptyFunction = require('fbjs/lib/emptyFunction');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var isEventSupported = require('./isEventSupported');
var shallowEqual = require('fbjs/lib/shallowEqual');
var inputValueTracking = require('./inputValueTracking');
var validateDOMNesting = require('./validateDOMNesting');
var warning = require('fbjs/lib/warning');

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { string: true, number: true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trackInputValue() {
  inputValueTracking.track(this);
}

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':
      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true
  // NOTE: menuitem's close tag should be omitted, but that causes problems.
};

var newlineEatingTags = {
  listing: true,
  pre: true,
  textarea: true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {
  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trackInputValue, this);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'input':
      case 'textarea':
        inputValueTracking.stopTracking(this);
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
        !false ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }
};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
}).call(this,require('_process'))
},{"./AutoFocusUtils":189,"./CSSPropertyOperations":192,"./DOMLazyTree":196,"./DOMNamespaces":197,"./DOMProperty":198,"./DOMPropertyOperations":199,"./EventPluginHub":203,"./EventPluginRegistry":204,"./ReactBrowserEventEmitter":212,"./ReactDOMComponentFlags":219,"./ReactDOMComponentTree":220,"./ReactDOMInput":225,"./ReactDOMOption":228,"./ReactDOMSelect":229,"./ReactDOMTextarea":232,"./ReactInstrumentation":249,"./ReactMultiChild":253,"./ReactServerRenderingTransaction":261,"./escapeTextContentForBrowser":289,"./inputValueTracking":302,"./isEventSupported":304,"./reactProdInvariant":307,"./validateDOMNesting":313,"_process":172,"fbjs/lib/emptyFunction":153,"fbjs/lib/invariant":161,"fbjs/lib/shallowEqual":167,"fbjs/lib/warning":168,"object-assign":171}],219:[function(require,module,exports){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;
},{}],220:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMProperty = require('./DOMProperty');
var ReactDOMComponentFlags = require('./ReactDOMComponentFlags');

var invariant = require('fbjs/lib/invariant');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
}).call(this,require('_process'))
},{"./DOMProperty":198,"./ReactDOMComponentFlags":219,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],221:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var validateDOMNesting = require('./validateDOMNesting');

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
}).call(this,require('_process'))
},{"./validateDOMNesting":313,"_process":172}],222:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var DOMLazyTree = require('./DOMLazyTree');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;
},{"./DOMLazyTree":196,"./ReactDOMComponentTree":220,"object-assign":171}],223:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMFeatureFlags = {
  useCreateElement: true,
  useFiber: false
};

module.exports = ReactDOMFeatureFlags;
},{}],224:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMChildrenOperations = require('./DOMChildrenOperations');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {
  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;
},{"./DOMChildrenOperations":195,"./ReactDOMComponentTree":220}],225:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var DOMPropertyOperations = require('./DOMPropertyOperations');
var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      controlled: isControlled(props)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      if (value === 0 && node.value === '') {
        node.value = '0';
        // Note: IE9 reports a number inputs as 'text', so check props instead.
      } else if (props.type === 'number') {
        // Simulate `input.valueAsNumber`. IE9 does not support it
        var valueAsNumber = parseFloat(node.value, 10) || 0;

        if (
        // eslint-disable-next-line
        value != valueAsNumber ||
        // eslint-disable-next-line
        value == valueAsNumber && node.value != value) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          node.value = '' + value;
        }
      } else if (node.value !== '' + value) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        node.value = '' + value;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
}).call(this,require('_process'))
},{"./DOMPropertyOperations":199,"./LinkedValueUtils":210,"./ReactDOMComponentTree":220,"./ReactUpdates":264,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"object-assign":171}],226:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');

function validateProperty(tagName, name, debugID) {
  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
    return true;
  }

  if (rARIA.test(name)) {
    var lowerCasedName = name.toLowerCase();
    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    // If this is an aria-* attribute, but is not listed in the known DOM
    // DOM properties, then it is an invalid aria-* attribute.
    if (standardName == null) {
      warnedProperties[name] = true;
      return false;
    }
    // aria-* attributes should be lowercase; suggest the lowercase version.
    if (name !== standardName) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      warnedProperties[name] = true;
      return true;
    }
  }

  return true;
}

function warnInvalidARIAProps(debugID, element) {
  var invalidProps = [];

  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      invalidProps.push(key);
    }
  }

  var unknownPropString = invalidProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (invalidProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (invalidProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
}

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }

  warnInvalidARIAProps(debugID, element);
}

var ReactDOMInvalidARIAHook = {
  onBeforeMountComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  },
  onBeforeUpdateComponent: function (debugID, element) {
    if (process.env.NODE_ENV !== 'production') {
      handleElement(debugID, element);
    }
  }
};

module.exports = ReactDOMInvalidARIAHook;
}).call(this,require('_process'))
},{"./DOMProperty":198,"_process":172,"fbjs/lib/warning":168,"react/lib/ReactComponentTreeHook":413}],227:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

var didWarnValueNull = false;

function handleElement(debugID, element) {
  if (element == null) {
    return;
  }
  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
    return;
  }
  if (element.props != null && element.props.value === null && !didWarnValueNull) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;

    didWarnValueNull = true;
  }
}

var ReactDOMNullInputValuePropHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMNullInputValuePropHook;
}).call(this,require('_process'))
},{"_process":172,"fbjs/lib/warning":168,"react/lib/ReactComponentTreeHook":413}],228:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var React = require('react/lib/React');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMSelect = require('./ReactDOMSelect');

var warning = require('fbjs/lib/warning');
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }
};

module.exports = ReactDOMOption;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":220,"./ReactDOMSelect":229,"_process":172,"fbjs/lib/warning":168,"object-assign":171,"react/lib/React":410}],229:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
}).call(this,require('_process'))
},{"./LinkedValueUtils":210,"./ReactDOMComponentTree":220,"./ReactUpdates":264,"_process":172,"fbjs/lib/warning":168,"object-assign":171}],230:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var getNodeForCharacterOffset = require('./getNodeForCharacterOffset');
var getTextContentAccessor = require('./getTextContentAccessor');

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;
},{"./getNodeForCharacterOffset":299,"./getTextContentAccessor":300,"fbjs/lib/ExecutionEnvironment":147}],231:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var DOMChildrenOperations = require('./DOMChildrenOperations');
var DOMLazyTree = require('./DOMLazyTree');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var invariant = require('fbjs/lib/invariant');
var validateDOMNesting = require('./validateDOMNesting');

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {
  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMTextComponent;
}).call(this,require('_process'))
},{"./DOMChildrenOperations":195,"./DOMLazyTree":196,"./ReactDOMComponentTree":220,"./escapeTextContentForBrowser":289,"./reactProdInvariant":307,"./validateDOMNesting":313,"_process":172,"fbjs/lib/invariant":161,"object-assign":171}],232:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var LinkedValueUtils = require('./LinkedValueUtils');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
}).call(this,require('_process'))
},{"./LinkedValueUtils":210,"./ReactDOMComponentTree":220,"./ReactUpdates":264,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"object-assign":171}],233:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],234:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginRegistry = require('./EventPluginRegistry');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');

var warning = require('fbjs/lib/warning');

if (process.env.NODE_ENV !== 'production') {
  var reactProps = {
    children: true,
    dangerouslySetInnerHTML: true,
    key: true,
    ref: true,

    autoFocus: true,
    defaultValue: true,
    valueLink: true,
    defaultChecked: true,
    checkedLink: true,
    innerHTML: true,
    suppressContentEditableWarning: true,
    onFocusIn: true,
    onFocusOut: true
  };
  var warnedProperties = {};

  var validateProperty = function (tagName, name, debugID) {
    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
      return true;
    }
    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
      return true;
    }
    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
      return true;
    }
    warnedProperties[name] = true;
    var lowerCasedName = name.toLowerCase();

    // data-* attributes should be lowercase; suggest the lowercase version
    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;

    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;

    if (standardName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else if (registrationName != null) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
      return true;
    } else {
      // We were unable to guess which prop the user intended.
      // It is likely that the user was just blindly spreading/forwarding props
      // Components should be careful to only render valid props/attributes.
      // Warning will be invoked in warnUnknownProperties to allow grouping.
      return false;
    }
  };
}

var warnUnknownProperties = function (debugID, element) {
  var unknownProps = [];
  for (var key in element.props) {
    var isValid = validateProperty(element.type, key, debugID);
    if (!isValid) {
      unknownProps.push(key);
    }
  }

  var unknownPropString = unknownProps.map(function (prop) {
    return '`' + prop + '`';
  }).join(', ');

  if (unknownProps.length === 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  } else if (unknownProps.length > 1) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
  }
};

function handleElement(debugID, element) {
  if (element == null || typeof element.type !== 'string') {
    return;
  }
  if (element.type.indexOf('-') >= 0 || element.props.is) {
    return;
  }
  warnUnknownProperties(debugID, element);
}

var ReactDOMUnknownPropertyHook = {
  onBeforeMountComponent: function (debugID, element) {
    handleElement(debugID, element);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    handleElement(debugID, element);
  }
};

module.exports = ReactDOMUnknownPropertyHook;
}).call(this,require('_process'))
},{"./DOMProperty":198,"./EventPluginRegistry":204,"_process":172,"fbjs/lib/warning":168,"react/lib/ReactComponentTreeHook":413}],235:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactInvalidSetStateWarningHook = require('./ReactInvalidSetStateWarningHook');
var ReactHostOperationHistoryHook = require('./ReactHostOperationHistoryHook');
var ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var performanceNow = require('fbjs/lib/performanceNow');
var warning = require('fbjs/lib/warning');

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  if (measurementName) {
    performance.clearMeasures(measurementName);
  }
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
}).call(this,require('_process'))
},{"./ReactHostOperationHistoryHook":245,"./ReactInvalidSetStateWarningHook":250,"_process":172,"fbjs/lib/ExecutionEnvironment":147,"fbjs/lib/performanceNow":166,"fbjs/lib/warning":168,"react/lib/ReactComponentTreeHook":413}],236:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactUpdates = require('./ReactUpdates');
var Transaction = require('./Transaction');

var emptyFunction = require('fbjs/lib/emptyFunction');

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
},{"./ReactUpdates":264,"./Transaction":282,"fbjs/lib/emptyFunction":153,"object-assign":171}],237:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ARIADOMPropertyConfig = require('./ARIADOMPropertyConfig');
var BeforeInputEventPlugin = require('./BeforeInputEventPlugin');
var ChangeEventPlugin = require('./ChangeEventPlugin');
var DefaultEventPluginOrder = require('./DefaultEventPluginOrder');
var EnterLeaveEventPlugin = require('./EnterLeaveEventPlugin');
var HTMLDOMPropertyConfig = require('./HTMLDOMPropertyConfig');
var ReactComponentBrowserEnvironment = require('./ReactComponentBrowserEnvironment');
var ReactDOMComponent = require('./ReactDOMComponent');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMEmptyComponent = require('./ReactDOMEmptyComponent');
var ReactDOMTreeTraversal = require('./ReactDOMTreeTraversal');
var ReactDOMTextComponent = require('./ReactDOMTextComponent');
var ReactDefaultBatchingStrategy = require('./ReactDefaultBatchingStrategy');
var ReactEventListener = require('./ReactEventListener');
var ReactInjection = require('./ReactInjection');
var ReactReconcileTransaction = require('./ReactReconcileTransaction');
var SVGDOMPropertyConfig = require('./SVGDOMPropertyConfig');
var SelectEventPlugin = require('./SelectEventPlugin');
var SimpleEventPlugin = require('./SimpleEventPlugin');

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};
},{"./ARIADOMPropertyConfig":188,"./BeforeInputEventPlugin":190,"./ChangeEventPlugin":194,"./DefaultEventPluginOrder":201,"./EnterLeaveEventPlugin":202,"./HTMLDOMPropertyConfig":208,"./ReactComponentBrowserEnvironment":214,"./ReactDOMComponent":218,"./ReactDOMComponentTree":220,"./ReactDOMEmptyComponent":222,"./ReactDOMTextComponent":231,"./ReactDOMTreeTraversal":233,"./ReactDefaultBatchingStrategy":236,"./ReactEventListener":242,"./ReactInjection":246,"./ReactReconcileTransaction":258,"./SVGDOMPropertyConfig":266,"./SelectEventPlugin":267,"./SimpleEventPlugin":268}],238:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
},{}],239:[function(require,module,exports){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
},{}],240:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}).call(this,require('_process'))
},{"_process":172}],241:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPluginHub = require('./EventPluginHub');

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
},{"./EventPluginHub":203}],242:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var EventListener = require('fbjs/lib/EventListener');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var PooledClass = require('./PooledClass');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactUpdates = require('./ReactUpdates');

var getEventTarget = require('./getEventTarget');
var getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;
},{"./PooledClass":211,"./ReactDOMComponentTree":220,"./ReactUpdates":264,"./getEventTarget":296,"fbjs/lib/EventListener":146,"fbjs/lib/ExecutionEnvironment":147,"fbjs/lib/getUnboundedScrollPosition":158,"object-assign":171}],243:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;
},{}],244:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],245:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;
},{}],246:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var DOMProperty = require('./DOMProperty');
var EventPluginHub = require('./EventPluginHub');
var EventPluginUtils = require('./EventPluginUtils');
var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactHostComponent = require('./ReactHostComponent');
var ReactUpdates = require('./ReactUpdates');

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;
},{"./DOMProperty":198,"./EventPluginHub":203,"./EventPluginUtils":205,"./ReactBrowserEventEmitter":212,"./ReactComponentEnvironment":215,"./ReactEmptyComponent":239,"./ReactHostComponent":244,"./ReactUpdates":264}],247:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMSelection = require('./ReactDOMSelection');

var containsNode = require('fbjs/lib/containsNode');
var focusNode = require('fbjs/lib/focusNode');
var getActiveElement = require('fbjs/lib/getActiveElement');

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {
  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;
},{"./ReactDOMSelection":230,"fbjs/lib/containsNode":150,"fbjs/lib/focusNode":155,"fbjs/lib/getActiveElement":156}],248:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {
  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }
};

module.exports = ReactInstanceMap;
},{}],249:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = require('./ReactDebugTool');
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
}).call(this,require('_process'))
},{"./ReactDebugTool":235,"_process":172}],250:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var warning = require('fbjs/lib/warning');

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
}).call(this,require('_process'))
},{"_process":172,"fbjs/lib/warning":168}],251:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var adler32 = require('./adler32');

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;
},{"./adler32":285}],252:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var DOMLazyTree = require('./DOMLazyTree');
var DOMProperty = require('./DOMProperty');
var React = require('react/lib/React');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactDOMContainerInfo = require('./ReactDOMContainerInfo');
var ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');
var ReactFeatureFlags = require('./ReactFeatureFlags');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactMarkupChecksum = require('./ReactMarkupChecksum');
var ReactReconciler = require('./ReactReconciler');
var ReactUpdateQueue = require('./ReactUpdateQueue');
var ReactUpdates = require('./ReactUpdates');

var emptyObject = require('fbjs/lib/emptyObject');
var instantiateReactComponent = require('./instantiateReactComponent');
var invariant = require('fbjs/lib/invariant');
var setInnerHTML = require('./setInnerHTML');
var shouldUpdateReactComponent = require('./shouldUpdateReactComponent');
var warning = require('fbjs/lib/warning');

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;

var ELEMENT_NODE_TYPE = 1;
var DOC_NODE_TYPE = 9;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

var instancesByReactRootID = {};

/**
 * Finds the index of the first character
 * that's not common between the two given strings.
 *
 * @return {number} the index of the character where the strings diverge
 */
function firstDifferenceIndex(string1, string2) {
  var minLen = Math.min(string1.length, string2.length);
  for (var i = 0; i < minLen; i++) {
    if (string1.charAt(i) !== string2.charAt(i)) {
      return i;
    }
  }
  return string1.length === string2.length ? -1 : minLen;
}

/**
 * @param {DOMElement|DOMDocument} container DOM element that may contain
 * a React component
 * @return {?*} DOM element that may have the reactRoot ID, or null.
 */
function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function internalGetID(node) {
  // If node is something like a window, document, or text node, none of
  // which support attributes or a .getAttribute method, gracefully return
  // the empty string, as if the attribute were missing.
  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
}

/**
 * Mounts this component and inserts it into the DOM.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {ReactReconcileTransaction} transaction
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
  var markerName;
  if (ReactFeatureFlags.logTopLevelRenders) {
    var wrappedElement = wrapperInstance._currentElement.props.child;
    var type = wrappedElement.type;
    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
    console.time(markerName);
  }

  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
  );

  if (markerName) {
    console.timeEnd(markerName);
  }

  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
}

/**
 * Batched mount.
 *
 * @param {ReactComponent} componentInstance The instance to mount.
 * @param {DOMElement} container DOM element to mount into.
 * @param {boolean} shouldReuseMarkup If true, do not insert markup
 */
function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */
  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

/**
 * Unmounts a component and removes it from the DOM.
 *
 * @param {ReactComponent} instance React component instance.
 * @param {DOMElement} container DOM element to unmount from.
 * @final
 * @internal
 * @see {ReactMount.unmountComponentAtNode}
 */
function unmountComponentFromNode(instance, container, safely) {
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onBeginFlush();
  }
  ReactReconciler.unmountComponent(instance, safely);
  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onEndFlush();
  }

  if (container.nodeType === DOC_NODE_TYPE) {
    container = container.documentElement;
  }

  // http://jsperf.com/emptying-a-node
  while (container.lastChild) {
    container.removeChild(container.lastChild);
  }
}

/**
 * True if the supplied DOM node has a direct React-rendered child that is
 * not a React root element. Useful for warning in `render`,
 * `unmountComponentAtNode`, etc.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM element contains a direct child that was
 * rendered by React but is not a root element.
 * @internal
 */
function hasNonRootReactChild(container) {
  var rootEl = getReactRootElementInContainer(container);
  if (rootEl) {
    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
    return !!(inst && inst._hostParent);
  }
}

/**
 * True if the supplied DOM node is a React DOM element and
 * it has been rendered by another copy of React.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM has been rendered by another copy of React
 * @internal
 */
function nodeIsRenderedByOtherInstance(container) {
  var rootEl = getReactRootElementInContainer(container);
  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
}

/**
 * True if the supplied DOM node is a valid node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid DOM node.
 * @internal
 */
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
}

/**
 * True if the supplied DOM node is a valid React node element.
 *
 * @param {?DOMElement} node The candidate DOM node.
 * @return {boolean} True if the DOM is a valid React DOM node.
 * @internal
 */
function isReactNode(node) {
  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
}

function getHostRootInstanceInContainer(container) {
  var rootEl = getReactRootElementInContainer(container);
  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
}

function getTopLevelWrapperInContainer(container) {
  var root = getHostRootInstanceInContainer(container);
  return root ? root._hostContainerInfo._topLevelWrapper : null;
}

/**
 * Temporary (?) hack so that we can store all top-level pending updates on
 * composites instead of having to worry about different types of components
 * here.
 */
var topLevelRootCounter = 1;
var TopLevelWrapper = function () {
  this.rootID = topLevelRootCounter++;
};
TopLevelWrapper.prototype.isReactComponent = {};
if (process.env.NODE_ENV !== 'production') {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

/**
 * Mounting is the process of initializing a React component by creating its
 * representative DOM elements and inserting them into a supplied `container`.
 * Any prior content inside `container` is destroyed in the process.
 *
 *   ReactMount.render(
 *     component,
 *     document.getElementById('container')
 *   );
 *
 *   <div id="container">                   <-- Supplied `container`.
 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
 *       // ...                                 component.
 *     </div>
 *   </div>
 *
 * Inside of `container`, the first element rendered is the "reactRoot".
 */
var ReactMount = {
  TopLevelWrapper: TopLevelWrapper,

  /**
   * Used by devtools. The keys are not important.
   */
  _instancesByReactRootID: instancesByReactRootID,

  /**
   * This is a hook provided to support rendering React components while
   * ensuring that the apparent scroll position of its `container` does not
   * change.
   *
   * @param {DOMElement} container The `container` being rendered into.
   * @param {function} renderCallback This must be called once to do the render.
   */
  scrollMonitor: function (container, renderCallback) {
    renderCallback();
  },

  /**
   * Take a component that's already mounted into the DOM and replace its props
   * @param {ReactComponent} prevComponent component instance already in the DOM
   * @param {ReactElement} nextElement component instance to render
   * @param {DOMElement} container container to render into
   * @param {?function} callback function triggered on completion
   */
  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
    ReactMount.scrollMonitor(container, function () {
      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
      if (callback) {
        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
      }
    });

    return prevComponent;
  },

  /**
   * Render a new component into the DOM. Hooked by hooks!
   *
   * @param {ReactElement} nextElement element to render
   * @param {DOMElement} container container to render into
   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
   * @return {ReactComponent} nextComponent
   */
  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case.
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;

    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
    var componentInstance = instantiateReactComponent(nextElement, false);

    // The initial render is synchronous but any updates that happen during
    // rendering, in componentWillMount or componentDidMount, will be batched
    // according to the current batching strategy.

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);

    var wrapperID = componentInstance._instance.rootID;
    instancesByReactRootID[wrapperID] = componentInstance;

    return componentInstance;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
  },

  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;

    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;

    var nextWrappedElement = React.createElement(TopLevelWrapper, {
      child: nextElement
    });

    var nextContext;
    if (parentComponent) {
      var parentInst = ReactInstanceMap.get(parentComponent);
      nextContext = parentInst._processChildContext(parentInst._context);
    } else {
      nextContext = emptyObject;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);

    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        var publicInst = prevComponent._renderedComponent.getPublicInstance();
        var updatedCallback = callback && function () {
          callback.call(publicInst);
        };
        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
        return publicInst;
      } else {
        ReactMount.unmountComponentAtNode(container);
      }
    }

    var reactRootElement = getReactRootElementInContainer(container);
    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
    var containerHasNonRootReactChild = hasNonRootReactChild(container);

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;

      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
        var rootElementSibling = reactRootElement;
        while (rootElementSibling) {
          if (internalGetID(rootElementSibling)) {
            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
            break;
          }
          rootElementSibling = rootElementSibling.nextSibling;
        }
      }
    }

    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  /**
   * Renders a React component into the DOM in the supplied `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
   *
   * If the React component was previously rendered into `container`, this will
   * perform an update on it and only mutate the DOM as necessary to reflect the
   * latest React component.
   *
   * @param {ReactElement} nextElement Component element to render.
   * @param {DOMElement} container DOM element to render into.
   * @param {?function} callback function triggered on completion
   * @return {ReactComponent} Component instance rendered in `container`.
   */
  render: function (nextElement, container, callback) {
    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
  },

  /**
   * Unmounts and destroys the React component rendered in the `container`.
   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
   *
   * @param {DOMElement} container DOM element containing a React component.
   * @return {boolean} True if a component was found in and unmounted from
   *                   `container`
   */
  unmountComponentAtNode: function (container) {
    // Various parts of our code (such as ReactCompositeComponent's
    // _renderValidatedComponent) assume that calls to render aren't nested;
    // verify that that's the case. (Strictly speaking, unmounting won't cause a
    // render but we still don't expect to be in a render call here.)
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;

    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
    }

    var prevComponent = getTopLevelWrapperInContainer(container);
    if (!prevComponent) {
      // Check if the node being unmounted was rendered by React, but isn't a
      // root node.
      var containerHasNonRootReactChild = hasNonRootReactChild(container);

      // Check if the container itself is a React root node.
      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
      }

      return false;
    }
    delete instancesByReactRootID[prevComponent._instance.rootID];
    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
    return true;
  },

  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;

    if (shouldReuseMarkup) {
      var rootElement = getReactRootElementInContainer(container);
      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
        ReactDOMComponentTree.precacheNode(instance, rootElement);
        return;
      } else {
        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

        var rootMarkup = rootElement.outerHTML;
        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);

        var normalizedMarkup = markup;
        if (process.env.NODE_ENV !== 'production') {
          // because rootMarkup is retrieved from the DOM, various normalizations
          // will have occurred which will not be present in `markup`. Here,
          // insert markup into a <div> or <iframe> depending on the container
          // type to perform the same normalizations before comparing.
          var normalizer;
          if (container.nodeType === ELEMENT_NODE_TYPE) {
            normalizer = document.createElement('div');
            normalizer.innerHTML = markup;
            normalizedMarkup = normalizer.innerHTML;
          } else {
            normalizer = document.createElement('iframe');
            document.body.appendChild(normalizer);
            normalizer.contentDocument.write(markup);
            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
            document.body.removeChild(normalizer);
          }
        }

        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;

        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
        }
      }
    }

    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;

    if (transaction.useCreateElement) {
      while (container.lastChild) {
        container.removeChild(container.lastChild);
      }
      DOMLazyTree.insertTreeBefore(container, markup, null);
    } else {
      setInnerHTML(container, markup);
      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
    }

    if (process.env.NODE_ENV !== 'production') {
      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
      if (hostNode._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: hostNode._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  }
};

module.exports = ReactMount;
}).call(this,require('_process'))
},{"./DOMLazyTree":196,"./DOMProperty":198,"./ReactBrowserEventEmitter":212,"./ReactDOMComponentTree":220,"./ReactDOMContainerInfo":221,"./ReactDOMFeatureFlags":223,"./ReactFeatureFlags":243,"./ReactInstanceMap":248,"./ReactInstrumentation":249,"./ReactMarkupChecksum":251,"./ReactReconciler":259,"./ReactUpdateQueue":263,"./ReactUpdates":264,"./instantiateReactComponent":303,"./reactProdInvariant":307,"./setInnerHTML":309,"./shouldUpdateReactComponent":311,"_process":172,"fbjs/lib/emptyObject":154,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"react/lib/React":410,"react/lib/ReactCurrentOwner":414}],253:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactComponentEnvironment = require('./ReactComponentEnvironment');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactReconciler = require('./ReactReconciler');
var ReactChildReconciler = require('./ReactChildReconciler');

var emptyFunction = require('fbjs/lib/emptyFunction');
var flattenChildren = require('./flattenChildren');
var invariant = require('fbjs/lib/invariant');

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {
  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {
    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
          !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }
  }
};

module.exports = ReactMultiChild;
}).call(this,require('_process'))
},{"./ReactChildReconciler":213,"./ReactComponentEnvironment":215,"./ReactInstanceMap":248,"./ReactInstrumentation":249,"./ReactReconciler":259,"./flattenChildren":291,"./reactProdInvariant":307,"_process":172,"fbjs/lib/emptyFunction":153,"fbjs/lib/invariant":161,"react/lib/ReactCurrentOwner":414}],254:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var React = require('react/lib/React');

var invariant = require('fbjs/lib/invariant');

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"react/lib/React":410}],255:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }
};

module.exports = ReactOwner;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],256:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}).call(this,require('_process'))
},{"_process":172}],257:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
},{}],258:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');
var ReactInputSelection = require('./ReactInputSelection');
var ReactInstrumentation = require('./ReactInstrumentation');
var Transaction = require('./Transaction');
var ReactUpdateQueue = require('./ReactUpdateQueue');

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
}).call(this,require('_process'))
},{"./CallbackQueue":193,"./PooledClass":211,"./ReactBrowserEventEmitter":212,"./ReactInputSelection":247,"./ReactInstrumentation":249,"./ReactUpdateQueue":263,"./Transaction":282,"_process":172,"object-assign":171}],259:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactRef = require('./ReactRef');
var ReactInstrumentation = require('./ReactInstrumentation');

var warning = require('fbjs/lib/warning');

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
  {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }
};

module.exports = ReactReconciler;
}).call(this,require('_process'))
},{"./ReactInstrumentation":249,"./ReactRef":260,"_process":172,"fbjs/lib/warning":168}],260:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var ReactOwner = require('./ReactOwner');

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
},{"./ReactOwner":255}],261:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');
var Transaction = require('./Transaction');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactServerUpdateQueue = require('./ReactServerUpdateQueue');

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
}).call(this,require('_process'))
},{"./PooledClass":211,"./ReactInstrumentation":249,"./ReactServerUpdateQueue":262,"./Transaction":282,"_process":172,"object-assign":171}],262:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = require('./ReactUpdateQueue');

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
}).call(this,require('_process'))
},{"./ReactUpdateQueue":263,"_process":172,"fbjs/lib/warning":168}],263:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactInstanceMap = require('./ReactInstanceMap');
var ReactInstrumentation = require('./ReactInstrumentation');
var ReactUpdates = require('./ReactUpdates');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    // Future-proof 15.5
    if (callback !== undefined && callback !== null) {
      ReactUpdateQueue.validateCallback(callback, 'replaceState');
      if (internalInstance._pendingCallbacks) {
        internalInstance._pendingCallbacks.push(callback);
      } else {
        internalInstance._pendingCallbacks = [callback];
      }
    }

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }
};

module.exports = ReactUpdateQueue;
}).call(this,require('_process'))
},{"./ReactInstanceMap":248,"./ReactInstrumentation":249,"./ReactUpdates":264,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"react/lib/ReactCurrentOwner":414}],264:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var CallbackQueue = require('./CallbackQueue');
var PooledClass = require('./PooledClass');
var ReactFeatureFlags = require('./ReactFeatureFlags');
var ReactReconciler = require('./ReactReconciler');
var Transaction = require('./Transaction');

var invariant = require('fbjs/lib/invariant');

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}).call(this,require('_process'))
},{"./CallbackQueue":193,"./PooledClass":211,"./ReactFeatureFlags":243,"./ReactReconciler":259,"./Transaction":282,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"object-assign":171}],265:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

module.exports = '15.6.1';
},{}],266:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;
},{}],267:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var EventPropagators = require('./EventPropagators');
var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInputSelection = require('./ReactInputSelection');
var SyntheticEvent = require('./SyntheticEvent');

var getActiveElement = require('fbjs/lib/getActiveElement');
var isTextInputElement = require('./isTextInputElement');
var shallowEqual = require('fbjs/lib/shallowEqual');

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;
},{"./EventPropagators":206,"./ReactDOMComponentTree":220,"./ReactInputSelection":247,"./SyntheticEvent":273,"./isTextInputElement":305,"fbjs/lib/ExecutionEnvironment":147,"fbjs/lib/getActiveElement":156,"fbjs/lib/shallowEqual":167}],268:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var EventListener = require('fbjs/lib/EventListener');
var EventPropagators = require('./EventPropagators');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var SyntheticAnimationEvent = require('./SyntheticAnimationEvent');
var SyntheticClipboardEvent = require('./SyntheticClipboardEvent');
var SyntheticEvent = require('./SyntheticEvent');
var SyntheticFocusEvent = require('./SyntheticFocusEvent');
var SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');
var SyntheticMouseEvent = require('./SyntheticMouseEvent');
var SyntheticDragEvent = require('./SyntheticDragEvent');
var SyntheticTouchEvent = require('./SyntheticTouchEvent');
var SyntheticTransitionEvent = require('./SyntheticTransitionEvent');
var SyntheticUIEvent = require('./SyntheticUIEvent');
var SyntheticWheelEvent = require('./SyntheticWheelEvent');

var emptyFunction = require('fbjs/lib/emptyFunction');
var getEventCharCode = require('./getEventCharCode');
var invariant = require('fbjs/lib/invariant');

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {
  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }
};

module.exports = SimpleEventPlugin;
}).call(this,require('_process'))
},{"./EventPropagators":206,"./ReactDOMComponentTree":220,"./SyntheticAnimationEvent":269,"./SyntheticClipboardEvent":270,"./SyntheticDragEvent":272,"./SyntheticEvent":273,"./SyntheticFocusEvent":274,"./SyntheticKeyboardEvent":276,"./SyntheticMouseEvent":277,"./SyntheticTouchEvent":278,"./SyntheticTransitionEvent":279,"./SyntheticUIEvent":280,"./SyntheticWheelEvent":281,"./getEventCharCode":293,"./reactProdInvariant":307,"_process":172,"fbjs/lib/EventListener":146,"fbjs/lib/emptyFunction":153,"fbjs/lib/invariant":161}],269:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;
},{"./SyntheticEvent":273}],270:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;
},{"./SyntheticEvent":273}],271:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;
},{"./SyntheticEvent":273}],272:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;
},{"./SyntheticMouseEvent":277}],273:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var PooledClass = require('./PooledClass');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
      // eslint-disable-next-line valid-typeof
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }
});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
}).call(this,require('_process'))
},{"./PooledClass":211,"_process":172,"fbjs/lib/emptyFunction":153,"fbjs/lib/warning":168,"object-assign":171}],274:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;
},{"./SyntheticUIEvent":280}],275:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;
},{"./SyntheticEvent":273}],276:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventCharCode = require('./getEventCharCode');
var getEventKey = require('./getEventKey');
var getEventModifierState = require('./getEventModifierState');

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;
},{"./SyntheticUIEvent":280,"./getEventCharCode":293,"./getEventKey":294,"./getEventModifierState":295}],277:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');
var ViewportMetrics = require('./ViewportMetrics');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;
},{"./SyntheticUIEvent":280,"./ViewportMetrics":283,"./getEventModifierState":295}],278:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticUIEvent = require('./SyntheticUIEvent');

var getEventModifierState = require('./getEventModifierState');

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;
},{"./SyntheticUIEvent":280,"./getEventModifierState":295}],279:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;
},{"./SyntheticEvent":273}],280:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticEvent = require('./SyntheticEvent');

var getEventTarget = require('./getEventTarget');

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;
},{"./SyntheticEvent":273,"./getEventTarget":296}],281:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var SyntheticMouseEvent = require('./SyntheticMouseEvent');

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;
},{"./SyntheticMouseEvent":277}],282:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /* eslint-disable space-before-function-paren */

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    /* eslint-enable space-before-function-paren */
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],283:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ViewportMetrics = {
  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }
};

module.exports = ViewportMetrics;
},{}],284:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var invariant = require('fbjs/lib/invariant');

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}).call(this,require('_process'))
},{"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161}],285:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;
},{}],286:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactPropTypeLocationNames":256,"./ReactPropTypesSecret":257,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"react/lib/ReactComponentTreeHook":413}],287:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */

'use strict';

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;
},{}],288:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var CSSProperty = require('./CSSProperty');
var warning = require('fbjs/lib/warning');

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
}).call(this,require('_process'))
},{"./CSSProperty":191,"_process":172,"fbjs/lib/warning":168}],289:[function(require,module,exports){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

'use strict';

// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html

/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;
},{}],290:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var ReactDOMComponentTree = require('./ReactDOMComponentTree');
var ReactInstanceMap = require('./ReactInstanceMap');

var getHostComponentFromComposite = require('./getHostComponentFromComposite');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

/**
 * Returns the DOM node rendered by this element.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
 *
 * @param {ReactComponent|DOMElement} componentOrElement
 * @return {?DOMElement} The root node of this element.
 */
function findDOMNode(componentOrElement) {
  if (process.env.NODE_ENV !== 'production') {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrElement == null) {
    return null;
  }
  if (componentOrElement.nodeType === 1) {
    return componentOrElement;
  }

  var inst = ReactInstanceMap.get(componentOrElement);
  if (inst) {
    inst = getHostComponentFromComposite(inst);
    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
  }

  if (typeof componentOrElement.render === 'function') {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
  }
}

module.exports = findDOMNode;
}).call(this,require('_process'))
},{"./ReactDOMComponentTree":220,"./ReactInstanceMap":248,"./getHostComponentFromComposite":297,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"react/lib/ReactCurrentOwner":414}],291:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var KeyEscapeUtils = require('./KeyEscapeUtils');
var traverseAllChildren = require('./traverseAllChildren');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":209,"./traverseAllChildren":312,"_process":172,"fbjs/lib/warning":168,"react/lib/ReactComponentTreeHook":413}],292:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;
},{}],293:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;
},{}],294:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var getEventCharCode = require('./getEventCharCode');

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1',
  113: 'F2',
  114: 'F3',
  115: 'F4',
  116: 'F5',
  117: 'F6',
  118: 'F7',
  119: 'F8',
  120: 'F9',
  121: 'F10',
  122: 'F11',
  123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;
},{"./getEventCharCode":293}],295:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;
},{}],296:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;
},{}],297:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactNodeTypes = require('./ReactNodeTypes');

function getHostComponentFromComposite(inst) {
  var type;

  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
    inst = inst._renderedComponent;
  }

  if (type === ReactNodeTypes.HOST) {
    return inst._renderedComponent;
  } else if (type === ReactNodeTypes.EMPTY) {
    return null;
  }
}

module.exports = getHostComponentFromComposite;
},{"./ReactNodeTypes":254}],298:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
},{}],299:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;
},{}],300:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;
},{"fbjs/lib/ExecutionEnvironment":147}],301:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;
},{"fbjs/lib/ExecutionEnvironment":147}],302:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactDOMComponentTree = require('./ReactDOMComponentTree');

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(inst) {
  return inst._wrapperState.valueTracker;
}

function attachTracker(inst, tracker) {
  inst._wrapperState.valueTracker = tracker;
}

function detachTracker(inst) {
  delete inst._wrapperState.valueTracker;
}

function getValueFromNode(node) {
  var value;
  if (node) {
    value = isCheckable(node) ? '' + node.checked : node.value;
  }
  return value;
}

var inputValueTracking = {
  // exposed for testing
  _getTrackerFromNode: function (node) {
    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
  },


  track: function (inst) {
    if (getTracker(inst)) {
      return;
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var valueField = isCheckable(node) ? 'checked' : 'value';
    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

    var currentValue = '' + node[valueField];

    // if someone has already defined a value or Safari, then bail
    // and don't track value will cause over reporting of changes,
    // but it's better then a hard failure
    // (needed for certain tests that spyOn input values and Safari)
    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
      return;
    }

    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable,
      configurable: true,
      get: function () {
        return descriptor.get.call(this);
      },
      set: function (value) {
        currentValue = '' + value;
        descriptor.set.call(this, value);
      }
    });

    attachTracker(inst, {
      getValue: function () {
        return currentValue;
      },
      setValue: function (value) {
        currentValue = '' + value;
      },
      stopTracking: function () {
        detachTracker(inst);
        delete node[valueField];
      }
    });
  },

  updateValueIfChanged: function (inst) {
    if (!inst) {
      return false;
    }
    var tracker = getTracker(inst);

    if (!tracker) {
      inputValueTracking.track(inst);
      return true;
    }

    var lastValue = tracker.getValue();
    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));

    if (nextValue !== lastValue) {
      tracker.setValue(nextValue);
      return true;
    }

    return false;
  },
  stopTracking: function (inst) {
    var tracker = getTracker(inst);
    if (tracker) {
      tracker.stopTracking();
    }
  }
};

module.exports = inputValueTracking;
},{"./ReactDOMComponentTree":220}],303:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactCompositeComponent = require('./ReactCompositeComponent');
var ReactEmptyComponent = require('./ReactEmptyComponent');
var ReactHostComponent = require('./ReactHostComponent');

var getNextDebugID = require('react/lib/getNextDebugID');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

module.exports = instantiateReactComponent;
}).call(this,require('_process'))
},{"./ReactCompositeComponent":216,"./ReactEmptyComponent":239,"./ReactHostComponent":244,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"object-assign":171,"react/lib/getNextDebugID":428}],304:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;
},{"fbjs/lib/ExecutionEnvironment":147}],305:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;
},{}],306:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;
},{"./escapeTextContentForBrowser":289}],307:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */
'use strict';

/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;
},{}],308:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactMount = require('./ReactMount');

module.exports = ReactMount.renderSubtreeIntoContainer;
},{"./ReactMount":252}],309:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var DOMNamespaces = require('./DOMNamespaces');

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xfeff) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;
},{"./DOMNamespaces":197,"./createMicrosoftUnsafeLocalFunction":287,"fbjs/lib/ExecutionEnvironment":147}],310:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');
var escapeTextContentForBrowser = require('./escapeTextContentForBrowser');
var setInnerHTML = require('./setInnerHTML');

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;
},{"./escapeTextContentForBrowser":289,"./setInnerHTML":309,"fbjs/lib/ExecutionEnvironment":147}],311:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;
},{}],312:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('react/lib/ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":209,"./ReactElementSymbol":238,"./getIteratorFn":298,"./reactProdInvariant":307,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168,"react/lib/ReactCurrentOwner":414}],313:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var emptyFunction = require('fbjs/lib/emptyFunction');
var warning = require('fbjs/lib/warning');

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
}).call(this,require('_process'))
},{"_process":172,"fbjs/lib/emptyFunction":153,"fbjs/lib/warning":168,"object-assign":171}],314:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _JSONArrow = require('./JSONArrow');

var _JSONArrow2 = _interopRequireDefault(_JSONArrow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var ItemRange = function (_React$Component) {
  (0, _inherits3['default'])(ItemRange, _React$Component);

  function ItemRange(props) {
    (0, _classCallCheck3['default'])(this, ItemRange);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.state = { expanded: false };

    _this.handleClick = _this.handleClick.bind(_this);
    return _this;
  }

  ItemRange.prototype.render = function render() {
    var _props = this.props,
        styling = _props.styling,
        from = _props.from,
        to = _props.to,
        renderChildNodes = _props.renderChildNodes,
        nodeType = _props.nodeType;


    return this.state.expanded ? _react2['default'].createElement(
      'div',
      styling('itemRange', this.state.expanded),
      renderChildNodes(this.props, from, to)
    ) : _react2['default'].createElement(
      'div',
      (0, _extends3['default'])({}, styling('itemRange', this.state.expanded), {
        onClick: this.handleClick
      }),
      _react2['default'].createElement(_JSONArrow2['default'], {
        nodeType: nodeType,
        styling: styling,
        expanded: false,
        onClick: this.handleClick,
        arrowStyle: 'double'
      }),
      from + ' ... ' + to
    );
  };

  ItemRange.prototype.handleClick = function handleClick() {
    this.setState({ expanded: !this.state.expanded });
  };

  return ItemRange;
}(_react2['default'].Component);

ItemRange.propTypes = {
  styling: _propTypes2['default'].func.isRequired,
  from: _propTypes2['default'].number.isRequired,
  to: _propTypes2['default'].number.isRequired,
  renderChildNodes: _propTypes2['default'].func.isRequired,
  nodeType: _propTypes2['default'].string.isRequired
};
exports['default'] = ItemRange;
},{"./JSONArrow":316,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/extends":12,"babel-runtime/helpers/inherits":13,"babel-runtime/helpers/possibleConstructorReturn":15,"prop-types":333,"react":433}],315:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _JSONNestedNode = require('./JSONNestedNode');

var _JSONNestedNode2 = _interopRequireDefault(_JSONNestedNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// Returns the "n Items" string for this node,
// generating and caching it if it hasn't been created yet.
function createItemString(data) {
  return data.length + ' ' + (data.length !== 1 ? 'items' : 'item');
}

// Configures <JSONNestedNode> to render an Array
var JSONArrayNode = function JSONArrayNode(_ref) {
  var data = _ref.data,
      props = (0, _objectWithoutProperties3['default'])(_ref, ['data']);
  return _react2['default'].createElement(_JSONNestedNode2['default'], (0, _extends3['default'])({}, props, {
    data: data,
    nodeType: 'Array',
    nodeTypeIndicator: '[]',
    createItemString: createItemString,
    expandable: data.length > 0
  }));
};

JSONArrayNode.propTypes = {
  data: _propTypes2['default'].array
};

exports['default'] = JSONArrayNode;
},{"./JSONNestedNode":318,"babel-runtime/helpers/extends":12,"babel-runtime/helpers/objectWithoutProperties":14,"prop-types":333,"react":433}],316:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var JSONArrow = function JSONArrow(_ref) {
  var styling = _ref.styling,
      arrowStyle = _ref.arrowStyle,
      expanded = _ref.expanded,
      nodeType = _ref.nodeType,
      onClick = _ref.onClick;
  return _react2['default'].createElement(
    'div',
    (0, _extends3['default'])({}, styling('arrowContainer', arrowStyle), { onClick: onClick }),
    _react2['default'].createElement(
      'div',
      styling(['arrow', 'arrowSign'], nodeType, expanded, arrowStyle),
      '\u25B6',
      arrowStyle === 'double' && _react2['default'].createElement(
        'div',
        styling(['arrowSign', 'arrowSignInner']),
        '\u25B6'
      )
    )
  );
};

JSONArrow.propTypes = {
  styling: _propTypes2['default'].func.isRequired,
  arrowStyle: _propTypes2['default'].oneOf(['single', 'double']),
  expanded: _propTypes2['default'].bool.isRequired,
  nodeType: _propTypes2['default'].string.isRequired,
  onClick: _propTypes2['default'].func.isRequired
};

JSONArrow.defaultProps = {
  arrowStyle: 'single'
};

exports['default'] = JSONArrow;
},{"babel-runtime/helpers/extends":12,"prop-types":333,"react":433}],317:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _isSafeInteger = require('babel-runtime/core-js/number/is-safe-integer');

var _isSafeInteger2 = _interopRequireDefault(_isSafeInteger);

exports['default'] = JSONIterableNode;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _JSONNestedNode = require('./JSONNestedNode');

var _JSONNestedNode2 = _interopRequireDefault(_JSONNestedNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// Returns the "n Items" string for this node,
// generating and caching it if it hasn't been created yet.
function createItemString(data, limit) {
  var count = 0;
  var hasMore = false;
  if ((0, _isSafeInteger2['default'])(data.size)) {
    count = data.size;
  } else {
    // eslint-disable-next-line no-unused-vars
    for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3['default'])(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var entry = _ref;

      if (limit && count + 1 > limit) {
        hasMore = true;
        break;
      }
      count += 1;
    }
  }
  return '' + (hasMore ? '>' : '') + count + ' ' + (count !== 1 ? 'entries' : 'entry');
}

// Configures <JSONNestedNode> to render an iterable
function JSONIterableNode(_ref2) {
  var props = (0, _objectWithoutProperties3['default'])(_ref2, []);

  return _react2['default'].createElement(_JSONNestedNode2['default'], (0, _extends3['default'])({}, props, {
    nodeType: 'Iterable',
    nodeTypeIndicator: '()',
    createItemString: createItemString
  }));
}
},{"./JSONNestedNode":318,"babel-runtime/core-js/get-iterator":1,"babel-runtime/core-js/number/is-safe-integer":3,"babel-runtime/helpers/extends":12,"babel-runtime/helpers/objectWithoutProperties":14,"react":433}],318:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _JSONArrow = require('./JSONArrow');

var _JSONArrow2 = _interopRequireDefault(_JSONArrow);

var _getCollectionEntries = require('./getCollectionEntries');

var _getCollectionEntries2 = _interopRequireDefault(_getCollectionEntries);

var _JSONNode = require('./JSONNode');

var _JSONNode2 = _interopRequireDefault(_JSONNode);

var _ItemRange = require('./ItemRange');

var _ItemRange2 = _interopRequireDefault(_ItemRange);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * Renders nested values (eg. objects, arrays, lists, etc.)
 */

function renderChildNodes(props, from, to) {
  var nodeType = props.nodeType,
      data = props.data,
      collectionLimit = props.collectionLimit,
      circularCache = props.circularCache,
      keyPath = props.keyPath,
      postprocessValue = props.postprocessValue,
      sortObjectKeys = props.sortObjectKeys;

  var childNodes = [];

  (0, _getCollectionEntries2['default'])(nodeType, data, sortObjectKeys, collectionLimit, from, to).forEach(function (entry) {
    if (entry.to) {
      childNodes.push(_react2['default'].createElement(_ItemRange2['default'], (0, _extends3['default'])({}, props, {
        key: 'ItemRange--' + entry.from + '-' + entry.to,
        from: entry.from,
        to: entry.to,
        renderChildNodes: renderChildNodes
      })));
    } else {
      var key = entry.key,
          value = entry.value;

      var isCircular = circularCache.indexOf(value) !== -1;

      var node = _react2['default'].createElement(_JSONNode2['default'], (0, _extends3['default'])({}, props, { postprocessValue: postprocessValue, collectionLimit: collectionLimit }, {
        key: 'Node--' + key,
        keyPath: [key].concat(keyPath),
        value: postprocessValue(value),
        circularCache: [].concat(circularCache, [value]),
        isCircular: isCircular,
        hideRoot: false
      }));

      if (node !== false) {
        childNodes.push(node);
      }
    }
  });

  return childNodes;
}

function getStateFromProps(props) {
  // calculate individual node expansion if necessary
  var expanded = props.shouldExpandNode && !props.isCircular ? props.shouldExpandNode(props.keyPath, props.data, props.level) : false;
  return {
    expanded: expanded
  };
}

var JSONNestedNode = function (_React$Component) {
  (0, _inherits3['default'])(JSONNestedNode, _React$Component);

  function JSONNestedNode(props) {
    (0, _classCallCheck3['default'])(this, JSONNestedNode);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.handleClick = function () {
      if (_this.props.expandable) {
        _this.setState({ expanded: !_this.state.expanded });
      }
    };

    _this.state = getStateFromProps(props);
    return _this;
  }

  JSONNestedNode.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var nextState = getStateFromProps(nextProps);
    if (getStateFromProps(this.props).expanded !== nextState.expanded) {
      this.setState(nextState);
    }
  };

  JSONNestedNode.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
    var _this2 = this;

    return !!(0, _keys2['default'])(nextProps).find(function (key) {
      return key !== 'circularCache' && (key === 'keyPath' ? nextProps[key].join('/') !== _this2.props[key].join('/') : nextProps[key] !== _this2.props[key]);
    }) || nextState.expanded !== this.state.expanded;
  };

  JSONNestedNode.prototype.render = function render() {
    var _props = this.props,
        getItemString = _props.getItemString,
        nodeTypeIndicator = _props.nodeTypeIndicator,
        nodeType = _props.nodeType,
        data = _props.data,
        hideRoot = _props.hideRoot,
        createItemString = _props.createItemString,
        styling = _props.styling,
        collectionLimit = _props.collectionLimit,
        keyPath = _props.keyPath,
        labelRenderer = _props.labelRenderer,
        expandable = _props.expandable;
    var expanded = this.state.expanded;

    var renderedChildren = expanded || hideRoot && this.props.level === 0 ? renderChildNodes((0, _extends3['default'])({}, this.props, { level: this.props.level + 1 })) : null;

    var itemType = _react2['default'].createElement(
      'span',
      styling('nestedNodeItemType', expanded),
      nodeTypeIndicator
    );
    var renderedItemString = getItemString(nodeType, data, itemType, createItemString(data, collectionLimit));
    var stylingArgs = [keyPath, nodeType, expanded, expandable];

    return hideRoot ? _react2['default'].createElement(
      'li',
      styling.apply(undefined, ['rootNode'].concat(stylingArgs)),
      _react2['default'].createElement(
        'ul',
        styling.apply(undefined, ['rootNodeChildren'].concat(stylingArgs)),
        renderedChildren
      )
    ) : _react2['default'].createElement(
      'li',
      styling.apply(undefined, ['nestedNode'].concat(stylingArgs)),
      expandable && _react2['default'].createElement(_JSONArrow2['default'], {
        styling: styling,
        nodeType: nodeType,
        expanded: expanded,
        onClick: this.handleClick
      }),
      _react2['default'].createElement(
        'label',
        (0, _extends3['default'])({}, styling.apply(undefined, [['label', 'nestedNodeLabel']].concat(stylingArgs)), {
          onClick: this.handleClick
        }),
        labelRenderer.apply(undefined, stylingArgs)
      ),
      _react2['default'].createElement(
        'span',
        (0, _extends3['default'])({}, styling.apply(undefined, ['nestedNodeItemString'].concat(stylingArgs)), {
          onClick: this.handleClick
        }),
        renderedItemString
      ),
      _react2['default'].createElement(
        'ul',
        styling.apply(undefined, ['nestedNodeChildren'].concat(stylingArgs)),
        renderedChildren
      )
    );
  };

  return JSONNestedNode;
}(_react2['default'].Component);

JSONNestedNode.propTypes = {
  getItemString: _propTypes2['default'].func.isRequired,
  nodeTypeIndicator: _propTypes2['default'].any,
  nodeType: _propTypes2['default'].string.isRequired,
  data: _propTypes2['default'].any,
  hideRoot: _propTypes2['default'].bool.isRequired,
  createItemString: _propTypes2['default'].func.isRequired,
  styling: _propTypes2['default'].func.isRequired,
  collectionLimit: _propTypes2['default'].number,
  keyPath: _propTypes2['default'].arrayOf(_propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number])).isRequired,
  labelRenderer: _propTypes2['default'].func.isRequired,
  shouldExpandNode: _propTypes2['default'].func,
  level: _propTypes2['default'].number.isRequired,
  sortObjectKeys: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].bool]),
  isCircular: _propTypes2['default'].bool,
  expandable: _propTypes2['default'].bool
};
JSONNestedNode.defaultProps = {
  data: [],
  circularCache: [],
  level: 0,
  expandable: true
};
exports['default'] = JSONNestedNode;
},{"./ItemRange":314,"./JSONArrow":316,"./JSONNode":319,"./getCollectionEntries":323,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/extends":12,"babel-runtime/helpers/inherits":13,"babel-runtime/helpers/possibleConstructorReturn":15,"prop-types":333,"react":433}],319:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _objType = require('./objType');

var _objType2 = _interopRequireDefault(_objType);

var _JSONObjectNode = require('./JSONObjectNode');

var _JSONObjectNode2 = _interopRequireDefault(_JSONObjectNode);

var _JSONArrayNode = require('./JSONArrayNode');

var _JSONArrayNode2 = _interopRequireDefault(_JSONArrayNode);

var _JSONIterableNode = require('./JSONIterableNode');

var _JSONIterableNode2 = _interopRequireDefault(_JSONIterableNode);

var _JSONValueNode = require('./JSONValueNode');

var _JSONValueNode2 = _interopRequireDefault(_JSONValueNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var JSONNode = function JSONNode(_ref) {
  var getItemString = _ref.getItemString,
      keyPath = _ref.keyPath,
      labelRenderer = _ref.labelRenderer,
      styling = _ref.styling,
      value = _ref.value,
      valueRenderer = _ref.valueRenderer,
      isCustomNode = _ref.isCustomNode,
      rest = (0, _objectWithoutProperties3['default'])(_ref, ['getItemString', 'keyPath', 'labelRenderer', 'styling', 'value', 'valueRenderer', 'isCustomNode']);

  var nodeType = isCustomNode(value) ? 'Custom' : (0, _objType2['default'])(value);

  var simpleNodeProps = {
    getItemString: getItemString,
    key: keyPath[0],
    keyPath: keyPath,
    labelRenderer: labelRenderer,
    nodeType: nodeType,
    styling: styling,
    value: value,
    valueRenderer: valueRenderer
  };

  var nestedNodeProps = (0, _extends3['default'])({}, rest, simpleNodeProps, {
    data: value,
    isCustomNode: isCustomNode
  });

  switch (nodeType) {
    case 'Object':
    case 'Error':
    case 'WeakMap':
    case 'WeakSet':
      return _react2['default'].createElement(_JSONObjectNode2['default'], nestedNodeProps);
    case 'Array':
      return _react2['default'].createElement(_JSONArrayNode2['default'], nestedNodeProps);
    case 'Iterable':
    case 'Map':
    case 'Set':
      return _react2['default'].createElement(_JSONIterableNode2['default'], nestedNodeProps);
    case 'String':
      return _react2['default'].createElement(_JSONValueNode2['default'], (0, _extends3['default'])({}, simpleNodeProps, { valueGetter: function valueGetter(raw) {
          return '"' + raw + '"';
        } }));
    case 'Number':
      return _react2['default'].createElement(_JSONValueNode2['default'], simpleNodeProps);
    case 'Boolean':
      return _react2['default'].createElement(_JSONValueNode2['default'], (0, _extends3['default'])({}, simpleNodeProps, {
        valueGetter: function valueGetter(raw) {
          return raw ? 'true' : 'false';
        }
      }));
    case 'Date':
      return _react2['default'].createElement(_JSONValueNode2['default'], (0, _extends3['default'])({}, simpleNodeProps, {
        valueGetter: function valueGetter(raw) {
          return raw.toISOString();
        }
      }));
    case 'Null':
      return _react2['default'].createElement(_JSONValueNode2['default'], (0, _extends3['default'])({}, simpleNodeProps, { valueGetter: function valueGetter() {
          return 'null';
        } }));
    case 'Undefined':
      return _react2['default'].createElement(_JSONValueNode2['default'], (0, _extends3['default'])({}, simpleNodeProps, { valueGetter: function valueGetter() {
          return 'undefined';
        } }));
    case 'Function':
    case 'Symbol':
      return _react2['default'].createElement(_JSONValueNode2['default'], (0, _extends3['default'])({}, simpleNodeProps, {
        valueGetter: function valueGetter(raw) {
          return raw.toString();
        }
      }));
    case 'Custom':
      return _react2['default'].createElement(_JSONValueNode2['default'], simpleNodeProps);
    default:
      return null;
  }
};

JSONNode.propTypes = {
  getItemString: _propTypes2['default'].func.isRequired,
  keyPath: _propTypes2['default'].arrayOf(_propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number])).isRequired,
  labelRenderer: _propTypes2['default'].func.isRequired,
  styling: _propTypes2['default'].func.isRequired,
  value: _propTypes2['default'].any,
  valueRenderer: _propTypes2['default'].func.isRequired,
  isCustomNode: _propTypes2['default'].func.isRequired
};

exports['default'] = JSONNode;
},{"./JSONArrayNode":315,"./JSONIterableNode":317,"./JSONObjectNode":320,"./JSONValueNode":321,"./objType":325,"babel-runtime/helpers/extends":12,"babel-runtime/helpers/objectWithoutProperties":14,"prop-types":333,"react":433}],320:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names');

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _JSONNestedNode = require('./JSONNestedNode');

var _JSONNestedNode2 = _interopRequireDefault(_JSONNestedNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

// Returns the "n Items" string for this node,
// generating and caching it if it hasn't been created yet.
function createItemString(data) {
  var len = (0, _getOwnPropertyNames2['default'])(data).length;
  return len + ' ' + (len !== 1 ? 'keys' : 'key');
}

// Configures <JSONNestedNode> to render an Object
var JSONObjectNode = function JSONObjectNode(_ref) {
  var data = _ref.data,
      props = (0, _objectWithoutProperties3['default'])(_ref, ['data']);
  return _react2['default'].createElement(_JSONNestedNode2['default'], (0, _extends3['default'])({}, props, {
    data: data,
    nodeType: 'Object',
    nodeTypeIndicator: props.nodeType === 'Error' ? 'Error()' : '{}',
    createItemString: createItemString,
    expandable: (0, _getOwnPropertyNames2['default'])(data).length > 0
  }));
};

JSONObjectNode.propTypes = {
  data: _propTypes2['default'].object,
  nodeType: _propTypes2['default'].string
};

exports['default'] = JSONObjectNode;
},{"./JSONNestedNode":318,"babel-runtime/core-js/object/get-own-property-names":6,"babel-runtime/helpers/extends":12,"babel-runtime/helpers/objectWithoutProperties":14,"prop-types":333,"react":433}],321:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

/**
 * Renders simple values (eg. strings, numbers, booleans, etc)
 */

var JSONValueNode = function JSONValueNode(_ref) {
  var nodeType = _ref.nodeType,
      styling = _ref.styling,
      labelRenderer = _ref.labelRenderer,
      keyPath = _ref.keyPath,
      valueRenderer = _ref.valueRenderer,
      value = _ref.value,
      valueGetter = _ref.valueGetter;
  return _react2['default'].createElement(
    'li',
    styling('value', nodeType, keyPath),
    _react2['default'].createElement(
      'label',
      styling(['label', 'valueLabel'], nodeType, keyPath),
      labelRenderer(keyPath, nodeType, false, false)
    ),
    _react2['default'].createElement(
      'span',
      styling('valueText', nodeType, keyPath),
      valueRenderer.apply(undefined, [valueGetter(value), value].concat(keyPath))
    )
  );
};

JSONValueNode.propTypes = {
  nodeType: _propTypes2['default'].string.isRequired,
  styling: _propTypes2['default'].func.isRequired,
  labelRenderer: _propTypes2['default'].func.isRequired,
  keyPath: _propTypes2['default'].arrayOf(_propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number])).isRequired,
  valueRenderer: _propTypes2['default'].func.isRequired,
  value: _propTypes2['default'].any,
  valueGetter: _propTypes2['default'].func
};

JSONValueNode.defaultProps = {
  valueGetter: function valueGetter(value) {
    return value;
  }
};

exports['default'] = JSONValueNode;
},{"prop-types":333,"react":433}],322:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _reactBase16Styling = require('react-base16-styling');

var _solarized = require('./themes/solarized');

var _solarized2 = _interopRequireDefault(_solarized);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var colorMap = function colorMap(theme) {
  return {
    BACKGROUND_COLOR: theme.base00,
    TEXT_COLOR: theme.base07,
    STRING_COLOR: theme.base0B,
    DATE_COLOR: theme.base0B,
    NUMBER_COLOR: theme.base09,
    BOOLEAN_COLOR: theme.base09,
    NULL_COLOR: theme.base08,
    UNDEFINED_COLOR: theme.base08,
    FUNCTION_COLOR: theme.base08,
    SYMBOL_COLOR: theme.base08,
    LABEL_COLOR: theme.base0D,
    ARROW_COLOR: theme.base0D,
    ITEM_STRING_COLOR: theme.base0B,
    ITEM_STRING_EXPANDED_COLOR: theme.base03
  };
};

var valueColorMap = function valueColorMap(colors) {
  return {
    String: colors.STRING_COLOR,
    Date: colors.DATE_COLOR,
    Number: colors.NUMBER_COLOR,
    Boolean: colors.BOOLEAN_COLOR,
    Null: colors.NULL_COLOR,
    Undefined: colors.UNDEFINED_COLOR,
    Function: colors.FUNCTION_COLOR,
    Symbol: colors.SYMBOL_COLOR
  };
};

var getDefaultThemeStyling = function getDefaultThemeStyling(theme) {
  var colors = colorMap(theme);

  return {
    tree: {
      border: 0,
      padding: 0,
      marginTop: '0.5em',
      marginBottom: '0.5em',
      marginLeft: '0.125em',
      marginRight: 0,
      listStyle: 'none',
      MozUserSelect: 'none',
      WebkitUserSelect: 'none',
      backgroundColor: colors.BACKGROUND_COLOR
    },

    value: function value(_ref, nodeType, keyPath) {
      var style = _ref.style;
      return {
        style: (0, _extends3['default'])({}, style, {
          paddingTop: '0.25em',
          paddingRight: 0,
          marginLeft: '0.875em',
          WebkitUserSelect: 'text',
          MozUserSelect: 'text',
          wordWrap: 'break-word',
          paddingLeft: keyPath.length > 1 ? '2.125em' : '1.25em',
          textIndent: '-0.5em',
          wordBreak: 'break-all'
        })
      };
    },

    label: {
      display: 'inline-block',
      color: colors.LABEL_COLOR
    },

    valueLabel: {
      margin: '0 0.5em 0 0'
    },

    valueText: function valueText(_ref2, nodeType) {
      var style = _ref2.style;
      return {
        style: (0, _extends3['default'])({}, style, {
          color: valueColorMap(colors)[nodeType]
        })
      };
    },

    itemRange: function itemRange(styling, expanded) {
      return {
        style: {
          paddingTop: expanded ? 0 : '0.25em',
          cursor: 'pointer',
          color: colors.LABEL_COLOR
        }
      };
    },

    arrow: function arrow(_ref3, nodeType, expanded) {
      var style = _ref3.style;
      return {
        style: (0, _extends3['default'])({}, style, {
          marginLeft: 0,
          transition: '150ms',
          WebkitTransition: '150ms',
          MozTransition: '150ms',
          WebkitTransform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
          MozTransform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
          transform: expanded ? 'rotateZ(90deg)' : 'rotateZ(0deg)',
          transformOrigin: '45% 50%',
          WebkitTransformOrigin: '45% 50%',
          MozTransformOrigin: '45% 50%',
          position: 'relative',
          lineHeight: '1.1em',
          fontSize: '0.75em'
        })
      };
    },

    arrowContainer: function arrowContainer(_ref4, arrowStyle) {
      var style = _ref4.style;
      return {
        style: (0, _extends3['default'])({}, style, {
          display: 'inline-block',
          paddingRight: '0.5em',
          paddingLeft: arrowStyle === 'double' ? '1em' : 0,
          cursor: 'pointer'
        })
      };
    },

    arrowSign: {
      color: colors.ARROW_COLOR
    },

    arrowSignInner: {
      position: 'absolute',
      top: 0,
      left: '-0.4em'
    },

    nestedNode: function nestedNode(_ref5, keyPath, nodeType, expanded, expandable) {
      var style = _ref5.style;
      return {
        style: (0, _extends3['default'])({}, style, {
          position: 'relative',
          paddingTop: '0.25em',
          marginLeft: keyPath.length > 1 ? '0.875em' : 0,
          paddingLeft: !expandable ? '1.125em' : 0
        })
      };
    },

    rootNode: {
      padding: 0,
      margin: 0
    },

    nestedNodeLabel: function nestedNodeLabel(_ref6, keyPath, nodeType, expanded, expandable) {
      var style = _ref6.style;
      return {
        style: (0, _extends3['default'])({}, style, {
          margin: 0,
          padding: 0,
          WebkitUserSelect: expandable ? 'inherit' : 'text',
          MozUserSelect: expandable ? 'inherit' : 'text',
          cursor: expandable ? 'pointer' : 'default'
        })
      };
    },

    nestedNodeItemString: function nestedNodeItemString(_ref7, keyPath, nodeType, expanded) {
      var style = _ref7.style;
      return {
        style: (0, _extends3['default'])({}, style, {
          paddingLeft: '0.5em',
          cursor: 'default',
          color: expanded ? colors.ITEM_STRING_EXPANDED_COLOR : colors.ITEM_STRING_COLOR
        })
      };
    },

    nestedNodeItemType: {
      marginLeft: '0.3em',
      marginRight: '0.3em'
    },

    nestedNodeChildren: function nestedNodeChildren(_ref8, nodeType, expanded) {
      var style = _ref8.style;
      return {
        style: (0, _extends3['default'])({}, style, {
          padding: 0,
          margin: 0,
          listStyle: 'none',
          display: expanded ? 'block' : 'none'
        })
      };
    },

    rootNodeChildren: {
      padding: 0,
      margin: 0,
      listStyle: 'none'
    }
  };
};

exports['default'] = (0, _reactBase16Styling.createStyling)(getDefaultThemeStyling, {
  defaultBase16: _solarized2['default']
});
},{"./themes/solarized":326,"babel-runtime/helpers/extends":12,"react-base16-styling":186}],323:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names');

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports['default'] = getCollectionEntries;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function getLength(type, collection) {
  if (type === 'Object') {
    return (0, _keys2['default'])(collection).length;
  } else if (type === 'Array') {
    return collection.length;
  }

  return Infinity;
}

function isIterableMap(collection) {
  return typeof collection.set === 'function';
}

function getEntries(type, collection, sortObjectKeys) {
  var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Infinity;

  var res = void 0;

  if (type === 'Object') {
    var keys = (0, _getOwnPropertyNames2['default'])(collection);

    if (typeof sortObjectKeys !== 'undefined') {
      keys.sort(sortObjectKeys);
    }

    keys = keys.slice(from, to + 1);

    res = {
      entries: keys.map(function (key) {
        return { key: key, value: collection[key] };
      })
    };
  } else if (type === 'Array') {
    res = {
      entries: collection.slice(from, to + 1).map(function (val, idx) {
        return { key: idx + from, value: val };
      })
    };
  } else {
    var idx = 0;
    var entries = [];
    var done = true;

    var isMap = isIterableMap(collection);

    for (var _iterator = collection, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3['default'])(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var item = _ref;

      if (idx > to) {
        done = false;
        break;
      }
      if (from <= idx) {
        if (isMap && Array.isArray(item)) {
          if (typeof item[0] === 'string' || typeof item[0] === 'number') {
            entries.push({ key: item[0], value: item[1] });
          } else {
            entries.push({
              key: '[entry ' + idx + ']',
              value: {
                '[key]': item[0],
                '[value]': item[1]
              }
            });
          }
        } else {
          entries.push({ key: idx, value: item });
        }
      }
      idx++;
    }

    res = {
      hasMore: !done,
      entries: entries
    };
  }

  return res;
}

function getRanges(from, to, limit) {
  var ranges = [];
  while (to - from > limit * limit) {
    limit = limit * limit;
  }
  for (var i = from; i <= to; i += limit) {
    ranges.push({ from: i, to: Math.min(to, i + limit - 1) });
  }

  return ranges;
}

function getCollectionEntries(type, collection, sortObjectKeys, limit) {
  var from = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var to = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Infinity;

  var getEntriesBound = getEntries.bind(null, type, collection, sortObjectKeys);

  if (!limit) {
    return getEntriesBound().entries;
  }

  var isSubset = to < Infinity;
  var length = Math.min(to - from, getLength(type, collection));

  if (type !== 'Iterable') {
    if (length <= limit || limit < 7) {
      return getEntriesBound(from, to).entries;
    }
  } else {
    if (length <= limit && !isSubset) {
      return getEntriesBound(from, to).entries;
    }
  }

  var limitedEntries = void 0;
  if (type === 'Iterable') {
    var _getEntriesBound = getEntriesBound(from, from + limit - 1),
        hasMore = _getEntriesBound.hasMore,
        entries = _getEntriesBound.entries;

    limitedEntries = hasMore ? [].concat(entries, getRanges(from + limit, from + 2 * limit - 1, limit)) : entries;
  } else {
    limitedEntries = isSubset ? getRanges(from, to, limit) : [].concat(getEntriesBound(0, limit - 5).entries, getRanges(limit - 4, length - 5, limit), getEntriesBound(length - 4, length - 1).entries);
  }

  return limitedEntries;
}
},{"babel-runtime/core-js/get-iterator":1,"babel-runtime/core-js/object/get-own-property-names":6,"babel-runtime/core-js/object/keys":7}],324:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _JSONNode = require('./JSONNode');

var _JSONNode2 = _interopRequireDefault(_JSONNode);

var _createStylingFromTheme = require('./createStylingFromTheme');

var _createStylingFromTheme2 = _interopRequireDefault(_createStylingFromTheme);

var _reactBase16Styling = require('react-base16-styling');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var identity = function identity(value) {
  return value;
}; // ES6 + inline style port of JSONViewer https://bitbucket.org/davevedder/react-json-viewer/
// all credits and original code to the author
// Dave Vedder <veddermatic@gmail.com> http://www.eskimospy.com/
// port by Daniele Zannotti http://www.github.com/dzannotti <dzannotti@me.com>

var expandRootNode = function expandRootNode(keyName, data, level) {
  return level === 0;
};
var defaultItemString = function defaultItemString(type, data, itemType, itemString) {
  return _react2['default'].createElement(
    'span',
    null,
    itemType,
    ' ',
    itemString
  );
};
var defaultLabelRenderer = function defaultLabelRenderer(_ref) {
  var label = _ref[0];
  return _react2['default'].createElement(
    'span',
    null,
    label,
    ':'
  );
};
var noCustomNode = function noCustomNode() {
  return false;
};

function checkLegacyTheming(theme, props) {
  var deprecatedStylingMethodsMap = {
    getArrowStyle: 'arrow',
    getListStyle: 'nestedNodeChildren',
    getItemStringStyle: 'nestedNodeItemString',
    getLabelStyle: 'label',
    getValueStyle: 'valueText'
  };

  var deprecatedStylingMethods = (0, _keys2['default'])(deprecatedStylingMethodsMap).filter(function (name) {
    return props[name];
  });

  if (deprecatedStylingMethods.length > 0) {
    if (typeof theme === 'string') {
      theme = {
        extend: theme
      };
    } else {
      theme = (0, _extends3['default'])({}, theme);
    }

    deprecatedStylingMethods.forEach(function (name) {
      // eslint-disable-next-line no-console
      console.error('Styling method "' + name + '" is deprecated, use "theme" property instead');

      theme[deprecatedStylingMethodsMap[name]] = function (_ref2) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var style = _ref2.style;
        return {
          style: (0, _extends3['default'])({}, style, props[name].apply(props, args))
        };
      };
    });
  }

  return theme;
}

function getStateFromProps(props) {
  var theme = checkLegacyTheming(props.theme, props);
  if (props.invertTheme) {
    if (typeof theme === 'string') {
      theme = theme + ':inverted';
    } else if (theme && theme.extend) {
      if (typeof theme === 'string') {
        theme = (0, _extends3['default'])({}, theme, { extend: theme.extend + ':inverted' });
      } else {
        theme = (0, _extends3['default'])({}, theme, { extend: (0, _reactBase16Styling.invertTheme)(theme.extend) });
      }
    } else if (theme) {
      theme = (0, _reactBase16Styling.invertTheme)(theme);
    }
  }
  return {
    styling: (0, _createStylingFromTheme2['default'])(theme)
  };
}

var JSONTree = function (_React$Component) {
  (0, _inherits3['default'])(JSONTree, _React$Component);

  function JSONTree(props) {
    (0, _classCallCheck3['default'])(this, JSONTree);

    var _this = (0, _possibleConstructorReturn3['default'])(this, _React$Component.call(this, props));

    _this.state = getStateFromProps(props);
    return _this;
  }

  JSONTree.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (['theme', 'invertTheme'].find(function (k) {
      return nextProps[k] !== _this2.props[k];
    })) {
      this.setState(getStateFromProps(nextProps));
    }
  };

  JSONTree.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
    var _this3 = this;

    return !!(0, _keys2['default'])(nextProps).find(function (k) {
      return k === 'keyPath' ? nextProps[k].join('/') !== _this3.props[k].join('/') : nextProps[k] !== _this3.props[k];
    });
  };

  JSONTree.prototype.render = function render() {
    var _props = this.props,
        value = _props.data,
        keyPath = _props.keyPath,
        postprocessValue = _props.postprocessValue,
        hideRoot = _props.hideRoot,
        theme = _props.theme,
        _ = _props.invertTheme,
        rest = (0, _objectWithoutProperties3['default'])(_props, ['data', 'keyPath', 'postprocessValue', 'hideRoot', 'theme', 'invertTheme']);
    var styling = this.state.styling;


    return _react2['default'].createElement(
      'ul',
      styling('tree'),
      _react2['default'].createElement(_JSONNode2['default'], (0, _extends3['default'])({}, (0, _extends3['default'])({ postprocessValue: postprocessValue, hideRoot: hideRoot, styling: styling }, rest), {
        keyPath: hideRoot ? [] : keyPath,
        value: postprocessValue(value)
      }))
    );
  };

  return JSONTree;
}(_react2['default'].Component);

JSONTree.propTypes = {
  data: _propTypes2['default'].oneOfType([_propTypes2['default'].array, _propTypes2['default'].object]).isRequired,
  hideRoot: _propTypes2['default'].bool,
  theme: _propTypes2['default'].oneOfType([_propTypes2['default'].object, _propTypes2['default'].string]),
  invertTheme: _propTypes2['default'].bool,
  keyPath: _propTypes2['default'].arrayOf(_propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number])),
  postprocessValue: _propTypes2['default'].func,
  sortObjectKeys: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].bool])
};
JSONTree.defaultProps = {
  shouldExpandNode: expandRootNode,
  hideRoot: false,
  keyPath: ['root'],
  getItemString: defaultItemString,
  labelRenderer: defaultLabelRenderer,
  valueRenderer: identity,
  postprocessValue: identity,
  isCustomNode: noCustomNode,
  collectionLimit: 50,
  invertTheme: true
};
exports['default'] = JSONTree;
},{"./JSONNode":319,"./createStylingFromTheme":322,"babel-runtime/core-js/object/keys":7,"babel-runtime/helpers/classCallCheck":11,"babel-runtime/helpers/extends":12,"babel-runtime/helpers/inherits":13,"babel-runtime/helpers/objectWithoutProperties":14,"babel-runtime/helpers/possibleConstructorReturn":15,"prop-types":333,"react":433,"react-base16-styling":186}],325:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _iterator = require('babel-runtime/core-js/symbol/iterator');

var _iterator2 = _interopRequireDefault(_iterator);

exports['default'] = objType;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function objType(obj) {
  var type = Object.prototype.toString.call(obj).slice(8, -1);
  if (type === 'Object' && typeof obj[_iterator2['default']] === 'function') {
    return 'Iterable';
  }

  return type;
}
},{"babel-runtime/core-js/symbol/iterator":10}],326:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports['default'] = {
  scheme: 'solarized',
  author: 'ethan schoonover (http://ethanschoonover.com/solarized)',
  base00: '#002b36',
  base01: '#073642',
  base02: '#586e75',
  base03: '#657b83',
  base04: '#839496',
  base05: '#93a1a1',
  base06: '#eee8d5',
  base07: '#fdf6e3',
  base08: '#dc322f',
  base09: '#cb4b16',
  base0A: '#b58900',
  base0B: '#859900',
  base0C: '#2aa198',
  base0D: '#268bd2',
  base0E: '#6c71c4',
  base0F: '#d33682'
};
},{}],327:[function(require,module,exports){
"use strict";

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
},{}],328:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
}).call(this,require('_process'))
},{"_process":172}],329:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

'use strict';

var emptyFunction = require('./emptyFunction');

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return; // Ignore CompositeComponent proptype check.
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
}).call(this,require('_process'))
},{"./emptyFunction":327,"_process":172}],330:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant = require('fbjs/lib/invariant');
  var warning = require('fbjs/lib/warning');
  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
  var loggedTypeFailures = {};
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;

}).call(this,require('_process'))
},{"./lib/ReactPropTypesSecret":334,"_process":172,"fbjs/lib/invariant":328,"fbjs/lib/warning":329}],331:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    invariant(
      false,
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

},{"./lib/ReactPropTypesSecret":334,"fbjs/lib/emptyFunction":327,"fbjs/lib/invariant":328}],332:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var emptyFunction = require('fbjs/lib/emptyFunction');
var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');
var assign = require('object-assign');

var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');
var checkPropTypes = require('./checkPropTypes');

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          invariant(
            false,
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            warning(
              false,
              'You are manually calling a React.PropTypes validation ' +
              'function for the `%s` prop on `%s`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
              propFullName,
              componentName
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(
          false,
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received %s at index %s.',
          getPostfixForTypeWarning(checker),
          i
        );
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

}).call(this,require('_process'))
},{"./checkPropTypes":330,"./lib/ReactPropTypesSecret":334,"_process":172,"fbjs/lib/emptyFunction":327,"fbjs/lib/invariant":328,"fbjs/lib/warning":329,"object-assign":171}],333:[function(require,module,exports){
(function (process){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = require('./factoryWithThrowingShims')();
}

}).call(this,require('_process'))
},{"./factoryWithThrowingShims":331,"./factoryWithTypeCheckers":332,"_process":172}],334:[function(require,module,exports){
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

},{}],335:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var babelPluginFlowReactPropTypes_proptype_RenderedSection = require('../Grid').babelPluginFlowReactPropTypes_proptype_RenderedSection || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_ScrollIndices = require('./types').babelPluginFlowReactPropTypes_proptype_ScrollIndices || require('prop-types').any;

/**
 * This HOC decorates a virtualized component and responds to arrow-key events by scrolling one row or column at a time.
 */

var ArrowKeyStepper = function (_React$PureComponent) {
  _inherits(ArrowKeyStepper, _React$PureComponent);

  function ArrowKeyStepper(props) {
    _classCallCheck(this, ArrowKeyStepper);

    var _this = _possibleConstructorReturn(this, (ArrowKeyStepper.__proto__ || Object.getPrototypeOf(ArrowKeyStepper)).call(this, props));

    _this._columnStartIndex = 0;
    _this._columnStopIndex = 0;
    _this._rowStartIndex = 0;
    _this._rowStopIndex = 0;

    _this._onKeyDown = function (event) {
      var _this$props = _this.props,
          columnCount = _this$props.columnCount,
          disabled = _this$props.disabled,
          mode = _this$props.mode,
          rowCount = _this$props.rowCount;


      if (disabled) {
        return;
      }

      var _this$_getScrollState = _this._getScrollState(),
          scrollToColumnPrevious = _this$_getScrollState.scrollToColumn,
          scrollToRowPrevious = _this$_getScrollState.scrollToRow;

      var _this$_getScrollState2 = _this._getScrollState(),
          scrollToColumn = _this$_getScrollState2.scrollToColumn,
          scrollToRow = _this$_getScrollState2.scrollToRow;

      // The above cases all prevent default event event behavior.
      // This is to keep the grid from scrolling after the snap-to update.


      switch (event.key) {
        case 'ArrowDown':
          scrollToRow = mode === 'cells' ? Math.min(scrollToRow + 1, rowCount - 1) : Math.min(_this._rowStopIndex + 1, rowCount - 1);
          break;
        case 'ArrowLeft':
          scrollToColumn = mode === 'cells' ? Math.max(scrollToColumn - 1, 0) : Math.max(_this._columnStartIndex - 1, 0);
          break;
        case 'ArrowRight':
          scrollToColumn = mode === 'cells' ? Math.min(scrollToColumn + 1, columnCount - 1) : Math.min(_this._columnStopIndex + 1, columnCount - 1);
          break;
        case 'ArrowUp':
          scrollToRow = mode === 'cells' ? Math.max(scrollToRow - 1, 0) : Math.max(_this._rowStartIndex - 1, 0);
          break;
      }

      if (scrollToColumn !== scrollToColumnPrevious || scrollToRow !== scrollToRowPrevious) {
        event.preventDefault();

        _this._updateScrollState({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
      }
    };

    _this._onSectionRendered = function (_ref) {
      var columnStartIndex = _ref.columnStartIndex,
          columnStopIndex = _ref.columnStopIndex,
          rowStartIndex = _ref.rowStartIndex,
          rowStopIndex = _ref.rowStopIndex;

      _this._columnStartIndex = columnStartIndex;
      _this._columnStopIndex = columnStopIndex;
      _this._rowStartIndex = rowStartIndex;
      _this._rowStopIndex = rowStopIndex;
    };

    _this.state = {
      scrollToColumn: props.scrollToColumn,
      scrollToRow: props.scrollToRow
    };
    return _this;
  }

  _createClass(ArrowKeyStepper, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.isControlled) {
        return;
      }

      var scrollToColumn = nextProps.scrollToColumn,
          scrollToRow = nextProps.scrollToRow;
      var _props = this.props,
          prevScrollToColumn = _props.scrollToColumn,
          prevScrollToRow = _props.scrollToRow;


      if (prevScrollToColumn !== scrollToColumn && prevScrollToRow !== scrollToRow) {
        this.setState({
          scrollToColumn: scrollToColumn,
          scrollToRow: scrollToRow
        });
      } else if (prevScrollToColumn !== scrollToColumn) {
        this.setState({ scrollToColumn: scrollToColumn });
      } else if (prevScrollToRow !== scrollToRow) {
        this.setState({ scrollToRow: scrollToRow });
      }
    }
  }, {
    key: 'setScrollIndexes',
    value: function setScrollIndexes(_ref2) {
      var scrollToColumn = _ref2.scrollToColumn,
          scrollToRow = _ref2.scrollToRow;

      this.setState({
        scrollToRow: scrollToRow,
        scrollToColumn: scrollToColumn
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          className = _props2.className,
          children = _props2.children;

      var _getScrollState2 = this._getScrollState(),
          scrollToColumn = _getScrollState2.scrollToColumn,
          scrollToRow = _getScrollState2.scrollToRow;

      return _react2.default.createElement(
        'div',
        { className: className, onKeyDown: this._onKeyDown },
        children({
          onSectionRendered: this._onSectionRendered,
          scrollToColumn: scrollToColumn,
          scrollToRow: scrollToRow
        })
      );
    }
  }, {
    key: '_getScrollState',
    value: function _getScrollState() {
      return this.props.isControlled ? this.props : this.state;
    }
  }, {
    key: '_updateScrollState',
    value: function _updateScrollState(_ref3) {
      var scrollToColumn = _ref3.scrollToColumn,
          scrollToRow = _ref3.scrollToRow;
      var _props3 = this.props,
          isControlled = _props3.isControlled,
          onScrollToChange = _props3.onScrollToChange;


      if (typeof onScrollToChange === 'function') {
        onScrollToChange({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
      }

      if (!isControlled) {
        this.setState({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
      }
    }
  }]);

  return ArrowKeyStepper;
}(_react2.default.PureComponent);

ArrowKeyStepper.defaultProps = {
  disabled: false,
  isControlled: false,
  mode: 'edges',
  scrollToColumn: 0,
  scrollToRow: 0
};
ArrowKeyStepper.propTypes = {
  children: require('prop-types').func.isRequired,
  className: require('prop-types').string,
  columnCount: require('prop-types').number.isRequired,
  disabled: require('prop-types').bool.isRequired,
  isControlled: require('prop-types').bool.isRequired,
  mode: require('prop-types').oneOf(['cells', 'edges']).isRequired,
  onScrollToChange: require('prop-types').func,
  rowCount: require('prop-types').number.isRequired,
  scrollToColumn: require('prop-types').number.isRequired,
  scrollToRow: require('prop-types').number.isRequired
};
exports.default = ArrowKeyStepper;
},{"../Grid":357,"./types":337,"prop-types":406,"react":433}],336:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ArrowKeyStepper = require('./ArrowKeyStepper');

Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ArrowKeyStepper).default;
  }
});
Object.defineProperty(exports, 'ArrowKeyStepper', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_ArrowKeyStepper).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./ArrowKeyStepper":335}],337:[function(require,module,exports){
"use strict";

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_ScrollIndices", {
  value: {
    scrollToColumn: require("prop-types").number.isRequired,
    scrollToRow: require("prop-types").number.isRequired
  },
  configurable: true
});
},{"prop-types":406}],338:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _detectElementResize = require('../vendor/detectElementResize');

var _detectElementResize2 = _interopRequireDefault(_detectElementResize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var babelPluginFlowReactPropTypes_proptype_Size = require('./types').babelPluginFlowReactPropTypes_proptype_Size || require('prop-types').any;

var AutoSizer = function (_React$PureComponent) {
  _inherits(AutoSizer, _React$PureComponent);

  function AutoSizer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AutoSizer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AutoSizer.__proto__ || Object.getPrototypeOf(AutoSizer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      height: _this.props.defaultHeight || 0,
      width: _this.props.defaultWidth || 0
    }, _this._onResize = function () {
      var _this$props = _this.props,
          disableHeight = _this$props.disableHeight,
          disableWidth = _this$props.disableWidth,
          onResize = _this$props.onResize;


      if (_this._parentNode) {
        // Guard against AutoSizer component being removed from the DOM immediately after being added.
        // This can result in invalid style values which can result in NaN values if we don't handle them.
        // See issue #150 for more context.

        var height = _this._parentNode.offsetHeight || 0;
        var width = _this._parentNode.offsetWidth || 0;

        var style = window.getComputedStyle(_this._parentNode) || {};
        var paddingLeft = parseInt(style.paddingLeft, 10) || 0;
        var paddingRight = parseInt(style.paddingRight, 10) || 0;
        var paddingTop = parseInt(style.paddingTop, 10) || 0;
        var paddingBottom = parseInt(style.paddingBottom, 10) || 0;

        var newHeight = height - paddingTop - paddingBottom;
        var newWidth = width - paddingLeft - paddingRight;

        if (!disableHeight && _this.state.height !== newHeight || !disableWidth && _this.state.width !== newWidth) {
          _this.setState({
            height: height - paddingTop - paddingBottom,
            width: width - paddingLeft - paddingRight
          });

          onResize({ height: height, width: width });
        }
      }
    }, _this._setRef = function (autoSizer) {
      _this._autoSizer = autoSizer;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AutoSizer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var nonce = this.props.nonce;

      if (this._autoSizer && this._autoSizer.parentNode instanceof HTMLElement) {
        // Delay access of parentNode until mount.
        // This handles edge-cases where the component has already been unmounted before its ref has been set,
        // As well as libraries like react-lite which have a slightly different lifecycle.
        this._parentNode = this._autoSizer.parentNode;

        // Defer requiring resize handler in order to support server-side rendering.
        // See issue #41
        this._detectElementResize = (0, _detectElementResize2.default)(nonce);
        this._detectElementResize.addResizeListener(this._parentNode, this._onResize);

        this._onResize();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._detectElementResize && this._parentNode) {
        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          disableHeight = _props.disableHeight,
          disableWidth = _props.disableWidth;
      var _state = this.state,
          height = _state.height,
          width = _state.width;

      // Outer div should not force width/height since that may prevent containers from shrinking.
      // Inner component should overflow and use calculated width/height.
      // See issue #68 for more information.

      var outerStyle = { overflow: 'visible' };
      var childParams = {};

      if (!disableHeight) {
        outerStyle.height = 0;
        childParams.height = height;
      }

      if (!disableWidth) {
        outerStyle.width = 0;
        childParams.width = width;
      }

      /**
       * TODO: Avoid rendering children before the initial measurements have been collected.
       * At best this would just be wasting cycles.
       * Add this check into version 10 though as it could break too many ref callbacks in version 9.
       * Note that if default width/height props were provided this would still work with SSR.
      if (
        height !== 0 &&
        width !== 0
      ) {
        child = children({ height, width })
      }
      */

      return _react2.default.createElement(
        'div',
        { ref: this._setRef, style: outerStyle },
        children(childParams)
      );
    }
  }]);

  return AutoSizer;
}(_react2.default.PureComponent);

AutoSizer.defaultProps = {
  onResize: function onResize() {},
  disableHeight: false,
  disableWidth: false
};
AutoSizer.propTypes = {
  children: require('prop-types').func.isRequired,
  defaultHeight: require('prop-types').number,
  defaultWidth: require('prop-types').number,
  disableHeight: require('prop-types').bool.isRequired,
  disableWidth: require('prop-types').bool.isRequired,
  nonce: require('prop-types').string,
  onResize: require('prop-types').func.isRequired
};
exports.default = AutoSizer;
},{"../vendor/detectElementResize":398,"./types":340,"prop-types":406,"react":433}],339:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AutoSizer = require('./AutoSizer');

Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AutoSizer).default;
  }
});
Object.defineProperty(exports, 'AutoSizer', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_AutoSizer).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./AutoSizer":338}],340:[function(require,module,exports){
"use strict";

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_Size", {
  value: {
    height: require("prop-types").number.isRequired,
    width: require("prop-types").number.isRequired
  },
  configurable: true
});
},{"prop-types":406}],341:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _CellMeasurerCache = require('./CellMeasurerCache.js');

var _CellMeasurerCache2 = _interopRequireDefault(_CellMeasurerCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Wraps a cell and measures its rendered content.
 * Measurements are stored in a per-cell cache.
 * Cached-content is not be re-measured.
 */
var CellMeasurer = function (_React$PureComponent) {
  _inherits(CellMeasurer, _React$PureComponent);

  function CellMeasurer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, CellMeasurer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CellMeasurer.__proto__ || Object.getPrototypeOf(CellMeasurer)).call.apply(_ref, [this].concat(args))), _this), _this._measure = function () {
      var _this$props = _this.props,
          cache = _this$props.cache,
          _this$props$columnInd = _this$props.columnIndex,
          columnIndex = _this$props$columnInd === undefined ? 0 : _this$props$columnInd,
          parent = _this$props.parent,
          _this$props$rowIndex = _this$props.rowIndex,
          rowIndex = _this$props$rowIndex === undefined ? _this.props.index || 0 : _this$props$rowIndex;

      var _this$_getCellMeasure = _this._getCellMeasurements(),
          height = _this$_getCellMeasure.height,
          width = _this$_getCellMeasure.width;

      if (height !== cache.getHeight(rowIndex, columnIndex) || width !== cache.getWidth(rowIndex, columnIndex)) {
        cache.set(rowIndex, columnIndex, width, height);

        if (parent && typeof parent.recomputeGridSize === 'function') {
          parent.recomputeGridSize({
            columnIndex: columnIndex,
            rowIndex: rowIndex
          });
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(CellMeasurer, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._maybeMeasureCell();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._maybeMeasureCell();
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;


      return typeof children === 'function' ? children({ measure: this._measure }) : children;
    }
  }, {
    key: '_getCellMeasurements',
    value: function _getCellMeasurements() {
      var cache = this.props.cache;


      var node = (0, _reactDom.findDOMNode)(this);

      // TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height

      if (node instanceof HTMLElement) {
        var styleWidth = node.style.width;
        var styleHeight = node.style.height;

        // If we are re-measuring a cell that has already been measured,
        // It will have a hard-coded width/height from the previous measurement.
        // The fact that we are measuring indicates this measurement is probably stale,
        // So explicitly clear it out (eg set to "auto") so we can recalculate.
        // See issue #593 for more info.
        // Even if we are measuring initially- if we're inside of a MultiGrid component,
        // Explicitly clear width/height before measuring to avoid being tainted by another Grid.
        // eg top/left Grid renders before bottom/right Grid
        // Since the CellMeasurerCache is shared between them this taints derived cell size values.
        if (!cache.hasFixedWidth()) {
          node.style.width = 'auto';
        }
        if (!cache.hasFixedHeight()) {
          node.style.height = 'auto';
        }

        var height = Math.ceil(node.offsetHeight);
        var width = Math.ceil(node.offsetWidth);

        // Reset after measuring to avoid breaking styles; see #660
        if (styleWidth) {
          node.style.width = styleWidth;
        }
        if (styleHeight) {
          node.style.height = styleHeight;
        }

        return { height: height, width: width };
      } else {
        return { height: 0, width: 0 };
      }
    }
  }, {
    key: '_maybeMeasureCell',
    value: function _maybeMeasureCell() {
      var _props = this.props,
          cache = _props.cache,
          _props$columnIndex = _props.columnIndex,
          columnIndex = _props$columnIndex === undefined ? 0 : _props$columnIndex,
          parent = _props.parent,
          _props$rowIndex = _props.rowIndex,
          rowIndex = _props$rowIndex === undefined ? this.props.index || 0 : _props$rowIndex;


      if (!cache.has(rowIndex, columnIndex)) {
        var _getCellMeasurements2 = this._getCellMeasurements(),
            height = _getCellMeasurements2.height,
            width = _getCellMeasurements2.width;

        cache.set(rowIndex, columnIndex, width, height);

        // If size has changed, let Grid know to re-render.
        if (parent && typeof parent.invalidateCellSizeAfterRender === 'function') {
          parent.invalidateCellSizeAfterRender({
            columnIndex: columnIndex,
            rowIndex: rowIndex
          });
        }
      }
    }
  }]);

  return CellMeasurer;
}(_react2.default.PureComponent);

// Used for DEV mode warning check


CellMeasurer.__internalCellMeasurerFlag = false;
CellMeasurer.propTypes = {
  cache: typeof _CellMeasurerCache2.default === 'function' ? require('prop-types').instanceOf(_CellMeasurerCache2.default).isRequired : require('prop-types').any.isRequired,
  children: require('prop-types').oneOfType([require('prop-types').func, typeof (_react2.default.Element == null ? {} : _react2.default.Element) === 'function' ? require('prop-types').instanceOf(_react2.default.Element == null ? {} : _react2.default.Element) : require('prop-types').any]).isRequired,
  columnIndex: require('prop-types').number,
  index: require('prop-types').number,
  parent: require('prop-types').shape({
    invalidateCellSizeAfterRender: require('prop-types').func,
    recomputeGridSize: require('prop-types').func
  }).isRequired,
  rowIndex: require('prop-types').number
};
exports.default = CellMeasurer;
if (process.env.NODE_ENV !== 'production') {
  CellMeasurer.__internalCellMeasurerFlag = true;
}
}).call(this,require('_process'))
},{"./CellMeasurerCache.js":342,"_process":172,"prop-types":406,"react":433,"react-dom":187}],342:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DEFAULT_HEIGHT = exports.DEFAULT_HEIGHT = 30;
var DEFAULT_WIDTH = exports.DEFAULT_WIDTH = 100;

// Enables more intelligent mapping of a given column and row index to an item ID.
// This prevents a cell cache from being invalidated when its parent collection is modified.

/**
 * Caches measurements for a given cell.
 */
var CellMeasurerCache = function () {
  function CellMeasurerCache() {
    var _this = this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CellMeasurerCache);

    this._cellHeightCache = {};
    this._cellWidthCache = {};
    this._columnWidthCache = {};
    this._rowHeightCache = {};
    this._columnCount = 0;
    this._rowCount = 0;

    this.columnWidth = function (_ref) {
      var index = _ref.index;

      var key = _this._keyMapper(0, index);

      return _this._columnWidthCache.hasOwnProperty(key) ? _this._columnWidthCache[key] : _this._defaultWidth;
    };

    this.rowHeight = function (_ref2) {
      var index = _ref2.index;

      var key = _this._keyMapper(index, 0);

      return _this._rowHeightCache.hasOwnProperty(key) ? _this._rowHeightCache[key] : _this._defaultHeight;
    };

    var defaultHeight = params.defaultHeight,
        defaultWidth = params.defaultWidth,
        fixedHeight = params.fixedHeight,
        fixedWidth = params.fixedWidth,
        keyMapper = params.keyMapper,
        minHeight = params.minHeight,
        minWidth = params.minWidth;


    this._hasFixedHeight = fixedHeight === true;
    this._hasFixedWidth = fixedWidth === true;
    this._minHeight = minHeight || 0;
    this._minWidth = minWidth || 0;
    this._keyMapper = keyMapper || defaultKeyMapper;

    this._defaultHeight = Math.max(this._minHeight, typeof defaultHeight === 'number' ? defaultHeight : DEFAULT_HEIGHT);
    this._defaultWidth = Math.max(this._minWidth, typeof defaultWidth === 'number' ? defaultWidth : DEFAULT_WIDTH);

    if (process.env.NODE_ENV !== 'production') {
      if (this._hasFixedHeight === false && this._hasFixedWidth === false) {
        console.warn("CellMeasurerCache should only measure a cell's width or height. " + 'You have configured CellMeasurerCache to measure both. ' + 'This will result in poor performance.');
      }

      if (this._hasFixedHeight === false && this._defaultHeight === 0) {
        console.warn('Fixed height CellMeasurerCache should specify a :defaultHeight greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');
      }

      if (this._hasFixedWidth === false && this._defaultWidth === 0) {
        console.warn('Fixed width CellMeasurerCache should specify a :defaultWidth greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');
      }
    }
  }

  _createClass(CellMeasurerCache, [{
    key: 'clear',
    value: function clear(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var key = this._keyMapper(rowIndex, columnIndex);

      delete this._cellHeightCache[key];
      delete this._cellWidthCache[key];

      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);
    }
  }, {
    key: 'clearAll',
    value: function clearAll() {
      this._cellHeightCache = {};
      this._cellWidthCache = {};
      this._columnWidthCache = {};
      this._rowHeightCache = {};
      this._rowCount = 0;
      this._columnCount = 0;
    }
  }, {
    key: 'hasFixedHeight',
    value: function hasFixedHeight() {
      return this._hasFixedHeight;
    }
  }, {
    key: 'hasFixedWidth',
    value: function hasFixedWidth() {
      return this._hasFixedWidth;
    }
  }, {
    key: 'getHeight',
    value: function getHeight(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this._hasFixedHeight) {
        return this._defaultHeight;
      } else {
        var _key = this._keyMapper(rowIndex, columnIndex);

        return this._cellHeightCache.hasOwnProperty(_key) ? Math.max(this._minHeight, this._cellHeightCache[_key]) : this._defaultHeight;
      }
    }
  }, {
    key: 'getWidth',
    value: function getWidth(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (this._hasFixedWidth) {
        return this._defaultWidth;
      } else {
        var _key2 = this._keyMapper(rowIndex, columnIndex);

        return this._cellWidthCache.hasOwnProperty(_key2) ? Math.max(this._minWidth, this._cellWidthCache[_key2]) : this._defaultWidth;
      }
    }
  }, {
    key: 'has',
    value: function has(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var key = this._keyMapper(rowIndex, columnIndex);

      return this._cellHeightCache.hasOwnProperty(key);
    }
  }, {
    key: 'set',
    value: function set(rowIndex, columnIndex, width, height) {
      var key = this._keyMapper(rowIndex, columnIndex);

      if (columnIndex >= this._columnCount) {
        this._columnCount = columnIndex + 1;
      }
      if (rowIndex >= this._rowCount) {
        this._rowCount = rowIndex + 1;
      }

      // Size is cached per cell so we don't have to re-measure if cells are re-ordered.
      this._cellHeightCache[key] = height;
      this._cellWidthCache[key] = width;

      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);
    }
  }, {
    key: '_updateCachedColumnAndRowSizes',
    value: function _updateCachedColumnAndRowSizes(rowIndex, columnIndex) {
      // :columnWidth and :rowHeight are derived based on all cells in a column/row.
      // Pre-cache these derived values for faster lookup later.
      // Reads are expected to occur more frequently than writes in this case.
      // Only update non-fixed dimensions though to avoid doing unnecessary work.
      if (!this._hasFixedWidth) {
        var columnWidth = 0;
        for (var i = 0; i < this._rowCount; i++) {
          columnWidth = Math.max(columnWidth, this.getWidth(i, columnIndex));
        }
        var columnKey = this._keyMapper(0, columnIndex);
        this._columnWidthCache[columnKey] = columnWidth;
      }
      if (!this._hasFixedHeight) {
        var rowHeight = 0;
        for (var _i = 0; _i < this._columnCount; _i++) {
          rowHeight = Math.max(rowHeight, this.getHeight(rowIndex, _i));
        }
        var rowKey = this._keyMapper(rowIndex, 0);
        this._rowHeightCache[rowKey] = rowHeight;
      }
    }
  }, {
    key: 'defaultHeight',
    get: function get() {
      return this._defaultHeight;
    }
  }, {
    key: 'defaultWidth',
    get: function get() {
      return this._defaultWidth;
    }
  }]);

  return CellMeasurerCache;
}();

exports.default = CellMeasurerCache;


function defaultKeyMapper(rowIndex, columnIndex) {
  return rowIndex + '-' + columnIndex;
}
}).call(this,require('_process'))
},{"_process":172}],343:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CellMeasurerCache = exports.CellMeasurer = undefined;

var _CellMeasurer = require('./CellMeasurer');

var _CellMeasurer2 = _interopRequireDefault(_CellMeasurer);

var _CellMeasurerCache = require('./CellMeasurerCache');

var _CellMeasurerCache2 = _interopRequireDefault(_CellMeasurerCache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _CellMeasurer2.default;
exports.CellMeasurer = _CellMeasurer2.default;
exports.CellMeasurerCache = _CellMeasurerCache2.default;
},{"./CellMeasurer":341,"./CellMeasurerCache":342}],344:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _CollectionView = require('./CollectionView');

var _CollectionView2 = _interopRequireDefault(_CollectionView);

var _calculateSizeAndPositionData2 = require('./utils/calculateSizeAndPositionData');

var _calculateSizeAndPositionData3 = _interopRequireDefault(_calculateSizeAndPositionData2);

var _getUpdatedOffsetForIndex = require('../utils/getUpdatedOffsetForIndex');

var _getUpdatedOffsetForIndex2 = _interopRequireDefault(_getUpdatedOffsetForIndex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Renders scattered or non-linear data.
 * Unlike Grid, which renders checkerboard data, Collection can render arbitrarily positioned- even overlapping- data.
 */
var babelPluginFlowReactPropTypes_proptype_SizeInfo = require('./types').babelPluginFlowReactPropTypes_proptype_SizeInfo || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_ScrollPosition = require('./types').babelPluginFlowReactPropTypes_proptype_ScrollPosition || require('prop-types').any;

var Collection = function (_PureComponent) {
  _inherits(Collection, _PureComponent);

  function Collection(props, context) {
    _classCallCheck(this, Collection);

    var _this = _possibleConstructorReturn(this, (Collection.__proto__ || Object.getPrototypeOf(Collection)).call(this, props, context));

    _this._cellMetadata = [];
    _this._lastRenderedCellIndices = [];

    // Cell cache during scroll (for perforamnce)
    _this._cellCache = [];

    _this._isScrollingChange = _this._isScrollingChange.bind(_this);
    _this._setCollectionViewRef = _this._setCollectionViewRef.bind(_this);
    return _this;
  }

  _createClass(Collection, [{
    key: 'forceUpdate',
    value: function forceUpdate() {
      if (this._collectionView !== undefined) {
        this._collectionView.forceUpdate();
      }
    }

    /** See Collection#recomputeCellSizesAndPositions */

  }, {
    key: 'recomputeCellSizesAndPositions',
    value: function recomputeCellSizesAndPositions() {
      this._cellCache = [];
      this._collectionView.recomputeCellSizesAndPositions();
    }

    /** React lifecycle methods */

  }, {
    key: 'render',
    value: function render() {
      var props = _objectWithoutProperties(this.props, []);

      return _react2.default.createElement(_CollectionView2.default, _extends({
        cellLayoutManager: this,
        isScrollingChange: this._isScrollingChange,
        ref: this._setCollectionViewRef
      }, props));
    }

    /** CellLayoutManager interface */

  }, {
    key: 'calculateSizeAndPositionData',
    value: function calculateSizeAndPositionData() {
      var _props = this.props,
          cellCount = _props.cellCount,
          cellSizeAndPositionGetter = _props.cellSizeAndPositionGetter,
          sectionSize = _props.sectionSize;


      var data = (0, _calculateSizeAndPositionData3.default)({
        cellCount: cellCount,
        cellSizeAndPositionGetter: cellSizeAndPositionGetter,
        sectionSize: sectionSize
      });

      this._cellMetadata = data.cellMetadata;
      this._sectionManager = data.sectionManager;
      this._height = data.height;
      this._width = data.width;
    }

    /**
     * Returns the most recently rendered set of cell indices.
     */

  }, {
    key: 'getLastRenderedIndices',
    value: function getLastRenderedIndices() {
      return this._lastRenderedCellIndices;
    }

    /**
     * Calculates the minimum amount of change from the current scroll position to ensure the specified cell is (fully) visible.
     */

  }, {
    key: 'getScrollPositionForCell',
    value: function getScrollPositionForCell(_ref) {
      var align = _ref.align,
          cellIndex = _ref.cellIndex,
          height = _ref.height,
          scrollLeft = _ref.scrollLeft,
          scrollTop = _ref.scrollTop,
          width = _ref.width;
      var cellCount = this.props.cellCount;


      if (cellIndex >= 0 && cellIndex < cellCount) {
        var cellMetadata = this._cellMetadata[cellIndex];

        scrollLeft = (0, _getUpdatedOffsetForIndex2.default)({
          align: align,
          cellOffset: cellMetadata.x,
          cellSize: cellMetadata.width,
          containerSize: width,
          currentOffset: scrollLeft,
          targetIndex: cellIndex
        });

        scrollTop = (0, _getUpdatedOffsetForIndex2.default)({
          align: align,
          cellOffset: cellMetadata.y,
          cellSize: cellMetadata.height,
          containerSize: height,
          currentOffset: scrollTop,
          targetIndex: cellIndex
        });
      }

      return {
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      };
    }
  }, {
    key: 'getTotalSize',
    value: function getTotalSize() {
      return {
        height: this._height,
        width: this._width
      };
    }
  }, {
    key: 'cellRenderers',
    value: function cellRenderers(_ref2) {
      var _this2 = this;

      var height = _ref2.height,
          isScrolling = _ref2.isScrolling,
          width = _ref2.width,
          x = _ref2.x,
          y = _ref2.y;
      var _props2 = this.props,
          cellGroupRenderer = _props2.cellGroupRenderer,
          cellRenderer = _props2.cellRenderer;

      // Store for later calls to getLastRenderedIndices()

      this._lastRenderedCellIndices = this._sectionManager.getCellIndices({
        height: height,
        width: width,
        x: x,
        y: y
      });

      return cellGroupRenderer({
        cellCache: this._cellCache,
        cellRenderer: cellRenderer,
        cellSizeAndPositionGetter: function cellSizeAndPositionGetter(_ref3) {
          var index = _ref3.index;
          return _this2._sectionManager.getCellMetadata({ index: index });
        },
        indices: this._lastRenderedCellIndices,
        isScrolling: isScrolling
      });
    }
  }, {
    key: '_isScrollingChange',
    value: function _isScrollingChange(isScrolling) {
      if (!isScrolling) {
        this._cellCache = [];
      }
    }
  }, {
    key: '_setCollectionViewRef',
    value: function _setCollectionViewRef(ref) {
      this._collectionView = ref;
    }
  }]);

  return Collection;
}(_react.PureComponent);

Collection.defaultProps = {
  'aria-label': 'grid',
  cellGroupRenderer: defaultCellGroupRenderer
};
exports.default = Collection;
Collection.propTypes = process.env.NODE_ENV !== "production" ? {
  'aria-label': _propTypes2.default.string,

  /**
   * Number of cells in Collection.
   */
  cellCount: _propTypes2.default.number.isRequired,

  /**
   * Responsible for rendering a group of cells given their indices.
   * Should implement the following interface: ({
   *   cellSizeAndPositionGetter:Function,
   *   indices: Array<number>,
   *   cellRenderer: Function
   * }): Array<PropTypes.node>
   */
  cellGroupRenderer: _propTypes2.default.func.isRequired,

  /**
   * Responsible for rendering a cell given an row and column index.
   * Should implement the following interface: ({ index: number, key: string, style: object }): PropTypes.element
   */
  cellRenderer: _propTypes2.default.func.isRequired,

  /**
   * Callback responsible for returning size and offset/position information for a given cell (index).
   * ({ index: number }): { height: number, width: number, x: number, y: number }
   */
  cellSizeAndPositionGetter: _propTypes2.default.func.isRequired,

  /**
   * Optionally override the size of the sections a Collection's cells are split into.
   */
  sectionSize: _propTypes2.default.number
} : {};


function defaultCellGroupRenderer(_ref4) {
  var cellCache = _ref4.cellCache,
      cellRenderer = _ref4.cellRenderer,
      cellSizeAndPositionGetter = _ref4.cellSizeAndPositionGetter,
      indices = _ref4.indices,
      isScrolling = _ref4.isScrolling;

  return indices.map(function (index) {
    var cellMetadata = cellSizeAndPositionGetter({ index: index });

    var cellRendererProps = {
      index: index,
      isScrolling: isScrolling,
      key: index,
      style: {
        height: cellMetadata.height,
        left: cellMetadata.x,
        position: 'absolute',
        top: cellMetadata.y,
        width: cellMetadata.width
      }
    };

    // Avoid re-creating cells while scrolling.
    // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
    // If a scroll is in progress- cache and reuse cells.
    // This cache will be thrown away once scrolling complets.
    if (isScrolling) {
      if (!(index in cellCache)) {
        cellCache[index] = cellRenderer(cellRendererProps);
      }

      return cellCache[index];
    } else {
      return cellRenderer(cellRendererProps);
    }
  }).filter(function (renderedCell) {
    return !!renderedCell;
  });
}
}).call(this,require('_process'))
},{"../utils/getUpdatedOffsetForIndex":395,"./CollectionView":345,"./types":349,"./utils/calculateSizeAndPositionData":350,"_process":172,"prop-types":406,"react":433}],345:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _createCallbackMemoizer = require('../utils/createCallbackMemoizer');

var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);

var _scrollbarSize = require('dom-helpers/util/scrollbarSize');

var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// @TODO Merge Collection and CollectionView

/**
 * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.
 * This improves performance and makes scrolling smoother.
 */
var IS_SCROLLING_TIMEOUT = 150;

/**
 * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
 * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
 */
var SCROLL_POSITION_CHANGE_REASONS = {
  OBSERVED: 'observed',
  REQUESTED: 'requested'
};

/**
 * Monitors changes in properties (eg. cellCount) and state (eg. scroll offsets) to determine when rendering needs to occur.
 * This component does not render any visible content itself; it defers to the specified :cellLayoutManager.
 */

var CollectionView = function (_PureComponent) {
  _inherits(CollectionView, _PureComponent);

  function CollectionView(props, context) {
    _classCallCheck(this, CollectionView);

    var _this = _possibleConstructorReturn(this, (CollectionView.__proto__ || Object.getPrototypeOf(CollectionView)).call(this, props, context));

    _this.state = {
      isScrolling: false,
      scrollLeft: 0,
      scrollTop: 0
    };

    _this._calculateSizeAndPositionDataOnNextUpdate = false;

    // Invokes callbacks only when their values have changed.
    _this._onSectionRenderedMemoizer = (0, _createCallbackMemoizer2.default)();
    _this._onScrollMemoizer = (0, _createCallbackMemoizer2.default)(false);

    // Bind functions to instance so they don't lose context when passed around.
    _this._invokeOnSectionRenderedHelper = _this._invokeOnSectionRenderedHelper.bind(_this);
    _this._onScroll = _this._onScroll.bind(_this);
    _this._setScrollingContainerRef = _this._setScrollingContainerRef.bind(_this);
    _this._updateScrollPositionForScrollToCell = _this._updateScrollPositionForScrollToCell.bind(_this);
    return _this;
  }

  /**
   * Forced recompute of cell sizes and positions.
   * This function should be called if cell sizes have changed but nothing else has.
   * Since cell positions are calculated by callbacks, the collection view has no way of detecting when the underlying data has changed.
   */


  _createClass(CollectionView, [{
    key: 'recomputeCellSizesAndPositions',
    value: function recomputeCellSizesAndPositions() {
      this._calculateSizeAndPositionDataOnNextUpdate = true;
      this.forceUpdate();
    }

    /* ---------------------------- Component lifecycle methods ---------------------------- */

  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props = this.props,
          cellLayoutManager = _props.cellLayoutManager,
          scrollLeft = _props.scrollLeft,
          scrollToCell = _props.scrollToCell,
          scrollTop = _props.scrollTop;

      // If this component was first rendered server-side, scrollbar size will be undefined.
      // In that event we need to remeasure.

      if (!this._scrollbarSizeMeasured) {
        this._scrollbarSize = (0, _scrollbarSize2.default)();
        this._scrollbarSizeMeasured = true;
        this.setState({});
      }

      if (scrollToCell >= 0) {
        this._updateScrollPositionForScrollToCell();
      } else if (scrollLeft >= 0 || scrollTop >= 0) {
        this._setScrollPosition({ scrollLeft: scrollLeft, scrollTop: scrollTop });
      }

      // Update onSectionRendered callback.
      this._invokeOnSectionRenderedHelper();

      var _cellLayoutManager$ge = cellLayoutManager.getTotalSize(),
          totalHeight = _cellLayoutManager$ge.height,
          totalWidth = _cellLayoutManager$ge.width;

      // Initialize onScroll callback.


      this._invokeOnScrollMemoizer({
        scrollLeft: scrollLeft || 0,
        scrollTop: scrollTop || 0,
        totalHeight: totalHeight,
        totalWidth: totalWidth
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var _props2 = this.props,
          height = _props2.height,
          scrollToAlignment = _props2.scrollToAlignment,
          scrollToCell = _props2.scrollToCell,
          width = _props2.width;
      var _state = this.state,
          scrollLeft = _state.scrollLeft,
          scrollPositionChangeReason = _state.scrollPositionChangeReason,
          scrollTop = _state.scrollTop;

      // Make sure requested changes to :scrollLeft or :scrollTop get applied.
      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
      // So we only set these when we require an adjustment of the scroll position.
      // See issue #2 for more information.

      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {
        if (scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft) {
          this._scrollingContainer.scrollLeft = scrollLeft;
        }
        if (scrollTop >= 0 && scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop) {
          this._scrollingContainer.scrollTop = scrollTop;
        }
      }

      // Update scroll offsets if the current :scrollToCell values requires it
      if (height !== prevProps.height || scrollToAlignment !== prevProps.scrollToAlignment || scrollToCell !== prevProps.scrollToCell || width !== prevProps.width) {
        this._updateScrollPositionForScrollToCell();
      }

      // Update onRowsRendered callback if start/stop indices have changed
      this._invokeOnSectionRenderedHelper();
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var cellLayoutManager = this.props.cellLayoutManager;


      cellLayoutManager.calculateSizeAndPositionData();

      // If this component is being rendered server-side, getScrollbarSize() will return undefined.
      // We handle this case in componentDidMount()
      this._scrollbarSize = (0, _scrollbarSize2.default)();
      if (this._scrollbarSize === undefined) {
        this._scrollbarSizeMeasured = false;
        this._scrollbarSize = 0;
      } else {
        this._scrollbarSizeMeasured = true;
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._disablePointerEventsTimeoutId) {
        clearTimeout(this._disablePointerEventsTimeoutId);
      }
    }

    /**
     * @private
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) Empty content (0 rows or columns)
     * 2) New scroll props overriding the current state
     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _state2 = this.state,
          scrollLeft = _state2.scrollLeft,
          scrollTop = _state2.scrollTop;


      if (nextProps.cellCount === 0 && (scrollLeft !== 0 || scrollTop !== 0)) {
        this._setScrollPosition({
          scrollLeft: 0,
          scrollTop: 0
        });
      } else if (nextProps.scrollLeft !== this.props.scrollLeft || nextProps.scrollTop !== this.props.scrollTop) {
        this._setScrollPosition({
          scrollLeft: nextProps.scrollLeft,
          scrollTop: nextProps.scrollTop
        });
      }

      if (nextProps.cellCount !== this.props.cellCount || nextProps.cellLayoutManager !== this.props.cellLayoutManager || this._calculateSizeAndPositionDataOnNextUpdate) {
        nextProps.cellLayoutManager.calculateSizeAndPositionData();
      }

      if (this._calculateSizeAndPositionDataOnNextUpdate) {
        this._calculateSizeAndPositionDataOnNextUpdate = false;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          autoHeight = _props3.autoHeight,
          cellCount = _props3.cellCount,
          cellLayoutManager = _props3.cellLayoutManager,
          className = _props3.className,
          height = _props3.height,
          horizontalOverscanSize = _props3.horizontalOverscanSize,
          id = _props3.id,
          noContentRenderer = _props3.noContentRenderer,
          style = _props3.style,
          verticalOverscanSize = _props3.verticalOverscanSize,
          width = _props3.width;
      var _state3 = this.state,
          isScrolling = _state3.isScrolling,
          scrollLeft = _state3.scrollLeft,
          scrollTop = _state3.scrollTop;

      var _cellLayoutManager$ge2 = cellLayoutManager.getTotalSize(),
          totalHeight = _cellLayoutManager$ge2.height,
          totalWidth = _cellLayoutManager$ge2.width;

      // Safely expand the rendered area by the specified overscan amount


      var left = Math.max(0, scrollLeft - horizontalOverscanSize);
      var top = Math.max(0, scrollTop - verticalOverscanSize);
      var right = Math.min(totalWidth, scrollLeft + width + horizontalOverscanSize);
      var bottom = Math.min(totalHeight, scrollTop + height + verticalOverscanSize);

      var childrenToDisplay = height > 0 && width > 0 ? cellLayoutManager.cellRenderers({
        height: bottom - top,
        isScrolling: isScrolling,
        width: right - left,
        x: left,
        y: top
      }) : [];

      var collectionStyle = {
        boxSizing: 'border-box',
        direction: 'ltr',
        height: autoHeight ? 'auto' : height,
        position: 'relative',
        WebkitOverflowScrolling: 'touch',
        width: width,
        willChange: 'transform'
      };

      // Force browser to hide scrollbars when we know they aren't necessary.
      // Otherwise once scrollbars appear they may not disappear again.
      // For more info see issue #116
      var verticalScrollBarSize = totalHeight > height ? this._scrollbarSize : 0;
      var horizontalScrollBarSize = totalWidth > width ? this._scrollbarSize : 0;

      // Also explicitly init styles to 'auto' if scrollbars are required.
      // This works around an obscure edge case where external CSS styles have not yet been loaded,
      // But an initial scroll index of offset is set as an external prop.
      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
      // This was originally reported via clauderic/react-infinite-calendar/issues/23
      collectionStyle.overflowX = totalWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';
      collectionStyle.overflowY = totalHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';

      return _react2.default.createElement(
        'div',
        {
          ref: this._setScrollingContainerRef,
          'aria-label': this.props['aria-label'],
          className: (0, _classnames2.default)('ReactVirtualized__Collection', className),
          id: id,
          onScroll: this._onScroll,
          role: 'grid',
          style: _extends({}, collectionStyle, style),
          tabIndex: 0 },
        cellCount > 0 && _react2.default.createElement(
          'div',
          {
            className: 'ReactVirtualized__Collection__innerScrollContainer',
            style: {
              height: totalHeight,
              maxHeight: totalHeight,
              maxWidth: totalWidth,
              overflow: 'hidden',
              pointerEvents: isScrolling ? 'none' : '',
              width: totalWidth
            } },
          childrenToDisplay
        ),
        cellCount === 0 && noContentRenderer()
      );
    }

    /* ---------------------------- Helper methods ---------------------------- */

    /**
     * Sets an :isScrolling flag for a small window of time.
     * This flag is used to disable pointer events on the scrollable portion of the Collection.
     * This prevents jerky/stuttery mouse-wheel scrolling.
     */

  }, {
    key: '_enablePointerEventsAfterDelay',
    value: function _enablePointerEventsAfterDelay() {
      var _this2 = this;

      if (this._disablePointerEventsTimeoutId) {
        clearTimeout(this._disablePointerEventsTimeoutId);
      }

      this._disablePointerEventsTimeoutId = setTimeout(function () {
        var isScrollingChange = _this2.props.isScrollingChange;


        isScrollingChange(false);

        _this2._disablePointerEventsTimeoutId = null;
        _this2.setState({
          isScrolling: false
        });
      }, IS_SCROLLING_TIMEOUT);
    }
  }, {
    key: '_invokeOnSectionRenderedHelper',
    value: function _invokeOnSectionRenderedHelper() {
      var _props4 = this.props,
          cellLayoutManager = _props4.cellLayoutManager,
          onSectionRendered = _props4.onSectionRendered;


      this._onSectionRenderedMemoizer({
        callback: onSectionRendered,
        indices: {
          indices: cellLayoutManager.getLastRenderedIndices()
        }
      });
    }
  }, {
    key: '_invokeOnScrollMemoizer',
    value: function _invokeOnScrollMemoizer(_ref) {
      var _this3 = this;

      var scrollLeft = _ref.scrollLeft,
          scrollTop = _ref.scrollTop,
          totalHeight = _ref.totalHeight,
          totalWidth = _ref.totalWidth;

      this._onScrollMemoizer({
        callback: function callback(_ref2) {
          var scrollLeft = _ref2.scrollLeft,
              scrollTop = _ref2.scrollTop;
          var _props5 = _this3.props,
              height = _props5.height,
              onScroll = _props5.onScroll,
              width = _props5.width;


          onScroll({
            clientHeight: height,
            clientWidth: width,
            scrollHeight: totalHeight,
            scrollLeft: scrollLeft,
            scrollTop: scrollTop,
            scrollWidth: totalWidth
          });
        },
        indices: {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop
        }
      });
    }
  }, {
    key: '_setScrollingContainerRef',
    value: function _setScrollingContainerRef(ref) {
      this._scrollingContainer = ref;
    }
  }, {
    key: '_setScrollPosition',
    value: function _setScrollPosition(_ref3) {
      var scrollLeft = _ref3.scrollLeft,
          scrollTop = _ref3.scrollTop;

      var newState = {
        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
      };

      if (scrollLeft >= 0) {
        newState.scrollLeft = scrollLeft;
      }

      if (scrollTop >= 0) {
        newState.scrollTop = scrollTop;
      }

      if (scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || scrollTop >= 0 && scrollTop !== this.state.scrollTop) {
        this.setState(newState);
      }
    }
  }, {
    key: '_updateScrollPositionForScrollToCell',
    value: function _updateScrollPositionForScrollToCell() {
      var _props6 = this.props,
          cellLayoutManager = _props6.cellLayoutManager,
          height = _props6.height,
          scrollToAlignment = _props6.scrollToAlignment,
          scrollToCell = _props6.scrollToCell,
          width = _props6.width;
      var _state4 = this.state,
          scrollLeft = _state4.scrollLeft,
          scrollTop = _state4.scrollTop;


      if (scrollToCell >= 0) {
        var scrollPosition = cellLayoutManager.getScrollPositionForCell({
          align: scrollToAlignment,
          cellIndex: scrollToCell,
          height: height,
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          width: width
        });

        if (scrollPosition.scrollLeft !== scrollLeft || scrollPosition.scrollTop !== scrollTop) {
          this._setScrollPosition(scrollPosition);
        }
      }
    }
  }, {
    key: '_onScroll',
    value: function _onScroll(event) {
      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
      // See issue #404 for more information.
      if (event.target !== this._scrollingContainer) {
        return;
      }

      // Prevent pointer events from interrupting a smooth scroll
      this._enablePointerEventsAfterDelay();

      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
      // This causes a series of rapid renders that is slow for long lists.
      // We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.
      var _props7 = this.props,
          cellLayoutManager = _props7.cellLayoutManager,
          height = _props7.height,
          isScrollingChange = _props7.isScrollingChange,
          width = _props7.width;

      var scrollbarSize = this._scrollbarSize;

      var _cellLayoutManager$ge3 = cellLayoutManager.getTotalSize(),
          totalHeight = _cellLayoutManager$ge3.height,
          totalWidth = _cellLayoutManager$ge3.width;

      var scrollLeft = Math.max(0, Math.min(totalWidth - width + scrollbarSize, event.target.scrollLeft));
      var scrollTop = Math.max(0, Math.min(totalHeight - height + scrollbarSize, event.target.scrollTop));

      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
      // Don't force a re-render if this is the case.
      // The mouse may move faster then the animation frame does.
      // Use requestAnimationFrame to avoid over-updating.
      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {
        // Browsers with cancelable scroll events (eg. Firefox) interrupt scrolling animations if scrollTop/scrollLeft is set.
        // Other browsers (eg. Safari) don't scroll as well without the help under certain conditions (DOM or style changes during scrolling).
        // All things considered, this seems to be the best current work around that I'm aware of.
        // For more information see https://github.com/bvaughn/react-virtualized/pull/124
        var scrollPositionChangeReason = event.cancelable ? SCROLL_POSITION_CHANGE_REASONS.OBSERVED : SCROLL_POSITION_CHANGE_REASONS.REQUESTED;

        // Synchronously set :isScrolling the first time (since _setNextState will reschedule its animation frame each time it's called)
        if (!this.state.isScrolling) {
          isScrollingChange(true);
        }

        this.setState({
          isScrolling: true,
          scrollLeft: scrollLeft,
          scrollPositionChangeReason: scrollPositionChangeReason,
          scrollTop: scrollTop
        });
      }

      this._invokeOnScrollMemoizer({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        totalWidth: totalWidth,
        totalHeight: totalHeight
      });
    }
  }]);

  return CollectionView;
}(_react.PureComponent);

CollectionView.defaultProps = {
  'aria-label': 'grid',
  horizontalOverscanSize: 0,
  noContentRenderer: function noContentRenderer() {
    return null;
  },
  onScroll: function onScroll() {
    return null;
  },
  onSectionRendered: function onSectionRendered() {
    return null;
  },
  scrollToAlignment: 'auto',
  scrollToCell: -1,
  style: {},
  verticalOverscanSize: 0
};
exports.default = CollectionView;
CollectionView.propTypes = process.env.NODE_ENV !== "production" ? {
  'aria-label': _propTypes2.default.string,

  /**
   * Removes fixed height from the scrollingContainer so that the total height
   * of rows can stretch the window. Intended for use with WindowScroller
   */
  autoHeight: _propTypes2.default.bool,

  /**
   * Number of cells in collection.
   */
  cellCount: _propTypes2.default.number.isRequired,

  /**
   * Calculates cell sizes and positions and manages rendering the appropriate cells given a specified window.
   */
  cellLayoutManager: _propTypes2.default.object.isRequired,

  /**
   * Optional custom CSS class name to attach to root Collection element.
   */
  className: _propTypes2.default.string,

  /**
   * Height of Collection; this property determines the number of visible (vs virtualized) rows.
   */
  height: _propTypes2.default.number.isRequired,

  /**
   * Optional custom id to attach to root Collection element.
   */
  id: _propTypes2.default.string,

  /**
   * Enables the `Collection` to horiontally "overscan" its content similar to how `Grid` does.
   * This can reduce flicker around the edges when a user scrolls quickly.
   */
  horizontalOverscanSize: _propTypes2.default.number.isRequired,

  isScrollingChange: _propTypes2.default.func,

  /**
   * Optional renderer to be used in place of rows when either :rowCount or :cellCount is 0.
   */
  noContentRenderer: _propTypes2.default.func.isRequired,

  /**
   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
   * This callback can be used to sync scrolling between lists, tables, or grids.
   * ({ clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth }): void
   */
  onScroll: _propTypes2.default.func.isRequired,

  /**
   * Callback invoked with information about the section of the Collection that was just rendered.
   * This callback is passed a named :indices parameter which is an Array of the most recently rendered section indices.
   */
  onSectionRendered: _propTypes2.default.func.isRequired,

  /**
   * Horizontal offset.
   */
  scrollLeft: _propTypes2.default.number,

  /**
   * Controls scroll-to-cell behavior of the Grid.
   * The default ("auto") scrolls the least amount possible to ensure that the specified cell is fully visible.
   * Use "start" to align cells to the top/left of the Grid and "end" to align bottom/right.
   */
  scrollToAlignment: _propTypes2.default.oneOf(['auto', 'end', 'start', 'center']).isRequired,

  /**
   * Cell index to ensure visible (by forcefully scrolling if necessary).
   */
  scrollToCell: _propTypes2.default.number.isRequired,

  /**
   * Vertical offset.
   */
  scrollTop: _propTypes2.default.number,

  /**
   * Optional custom inline style to attach to root Collection element.
   */
  style: _propTypes2.default.object,

  /**
   * Enables the `Collection` to vertically "overscan" its content similar to how `Grid` does.
   * This can reduce flicker around the edges when a user scrolls quickly.
   */
  verticalOverscanSize: _propTypes2.default.number.isRequired,

  /**
   * Width of Collection; this property determines the number of visible (vs virtualized) columns.
   */
  width: _propTypes2.default.number.isRequired
} : {};
}).call(this,require('_process'))
},{"../utils/createCallbackMemoizer":394,"_process":172,"classnames":142,"dom-helpers/util/scrollbarSize":145,"prop-types":406,"react":433}],346:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A section of the Window.
 * Window Sections are used to group nearby cells.
 * This enables us to more quickly determine which cells to display in a given region of the Window.
 * Sections have a fixed size and contain 0 to many cells (tracked by their indices).
 */
var babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo = require('./types').babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo || require('prop-types').any; /** @rlow */


var babelPluginFlowReactPropTypes_proptype_Index = require('./types').babelPluginFlowReactPropTypes_proptype_Index || require('prop-types').any;

var Section = function () {
  function Section(_ref) {
    var height = _ref.height,
        width = _ref.width,
        x = _ref.x,
        y = _ref.y;

    _classCallCheck(this, Section);

    this.height = height;
    this.width = width;
    this.x = x;
    this.y = y;

    this._indexMap = {};
    this._indices = [];
  }

  /** Add a cell to this section. */


  _createClass(Section, [{
    key: 'addCellIndex',
    value: function addCellIndex(_ref2) {
      var index = _ref2.index;

      if (!this._indexMap[index]) {
        this._indexMap[index] = true;
        this._indices.push(index);
      }
    }

    /** Get all cell indices that have been added to this section. */

  }, {
    key: 'getCellIndices',
    value: function getCellIndices() {
      return this._indices;
    }

    /** Intended for debugger/test purposes only */

  }, {
    key: 'toString',
    value: function toString() {
      return this.x + ',' + this.y + ' ' + this.width + 'x' + this.height;
    }
  }]);

  return Section;
}();

exports.default = Section;
},{"./types":349,"prop-types":406}],347:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
indow Sections are used to group nearby cells.
his enables us to more quickly determine which cells to display in a given region of the Window.




var _Section = require('./Section');

var _Section2 = _interopRequireDefault(_Section);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo = require('./types').babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Index = require('./types').babelPluginFlowReactPropTypes_proptype_Index || require('prop-types').any;

var SECTION_SIZE = 100;

/**
 * Contains 0 to many Sections.
 * Grows (and adds Sections) dynamically as cells are registered.
 * Automatically adds cells to the appropriate Section(s).
 */
var SectionManager = function () {
  function SectionManager() {
    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;

    _classCallCheck(this, SectionManager);

    this._sectionSize = sectionSize;

    this._cellMetadata = [];
    this._sections = {};
  }

  /**
   * Gets all cell indices contained in the specified region.
   * A region may encompass 1 or more Sections.
   */


  _createClass(SectionManager, [{
    key: 'getCellIndices',
    value: function getCellIndices(_ref) {
      var height = _ref.height,
          width = _ref.width,
          x = _ref.x,
          y = _ref.y;

      var indices = {};

      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {
        return section.getCellIndices().forEach(function (index) {
          indices[index] = index;
        });
      });

      // Object keys are strings; this function returns numbers
      return Object.keys(indices).map(function (index) {
        return indices[index];
      });
    }

    /** Get size and position information for the cell specified. */

  }, {
    key: 'getCellMetadata',
    value: function getCellMetadata(_ref2) {
      var index = _ref2.index;

      return this._cellMetadata[index];
    }

    /** Get all Sections overlapping the specified region. */

  }, {
    key: 'getSections',
    value: function getSections(_ref3) {
      var height = _ref3.height,
          width = _ref3.width,
          x = _ref3.x,
          y = _ref3.y;

      var sectionXStart = Math.floor(x / this._sectionSize);
      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);
      var sectionYStart = Math.floor(y / this._sectionSize);
      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);

      var sections = [];

      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {
        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {
          var key = sectionX + '.' + sectionY;

          if (!this._sections[key]) {
            this._sections[key] = new _Section2.default({
              height: this._sectionSize,
              width: this._sectionSize,
              x: sectionX * this._sectionSize,
              y: sectionY * this._sectionSize
            });
          }

          sections.push(this._sections[key]);
        }
      }

      return sections;
    }

    /** Total number of Sections based on the currently registered cells. */

  }, {
    key: 'getTotalSectionCount',
    value: function getTotalSectionCount() {
      return Object.keys(this._sections).length;
    }

    /** Intended for debugger/test purposes only */

  }, {
    key: 'toString',
    value: function toString() {
      var _this = this;

      return Object.keys(this._sections).map(function (index) {
        return _this._sections[index].toString();
      });
    }

    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */

  }, {
    key: 'registerCell',
    value: function registerCell(_ref4) {
      var cellMetadatum = _ref4.cellMetadatum,
          index = _ref4.index;

      this._cellMetadata[index] = cellMetadatum;

      this.getSections(cellMetadatum).forEach(function (section) {
        return section.addCellIndex({ index: index });
      });
    }
  }]);

  return SectionManager;
}();

exports.default = SectionManager;
},{"./Section":346,"./types":349,"prop-types":406}],348:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collection = undefined;

var _Collection = require('./Collection');

var _Collection2 = _interopRequireDefault(_Collection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Collection2.default;
exports.Collection = _Collection2.default;
},{"./Collection":344}],349:[function(require,module,exports){
"use strict";

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_Index", {
  value: {
    index: require("prop-types").number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_PositionInfo", {
  value: {
    x: require("prop-types").number.isRequired,
    y: require("prop-types").number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_ScrollPosition", {
  value: {
    scrollLeft: require("prop-types").number.isRequired,
    scrollTop: require("prop-types").number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_SizeAndPositionInfo", {
  value: {
    height: require("prop-types").number.isRequired,
    width: require("prop-types").number.isRequired,
    x: require("prop-types").number.isRequired,
    y: require("prop-types").number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_SizeInfo", {
  value: {
    height: require("prop-types").number.isRequired,
    width: require("prop-types").number.isRequired
  },
  configurable: true
});
},{"prop-types":406}],350:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calculateSizeAndPositionData;

var _SectionManager = require('../SectionManager');

var _SectionManager2 = _interopRequireDefault(_SectionManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function calculateSizeAndPositionData(_ref) {
  var cellCount = _ref.cellCount,
      cellSizeAndPositionGetter = _ref.cellSizeAndPositionGetter,
      sectionSize = _ref.sectionSize;

  var cellMetadata = [];
  var sectionManager = new _SectionManager2.default(sectionSize);
  var height = 0;
  var width = 0;

  for (var index = 0; index < cellCount; index++) {
    var cellMetadatum = cellSizeAndPositionGetter({ index: index });

    if (cellMetadatum.height == null || isNaN(cellMetadatum.height) || cellMetadatum.width == null || isNaN(cellMetadatum.width) || cellMetadatum.x == null || isNaN(cellMetadatum.x) || cellMetadatum.y == null || isNaN(cellMetadatum.y)) {
      throw Error('Invalid metadata returned for cell ' + index + ':\n        x:' + cellMetadatum.x + ', y:' + cellMetadatum.y + ', width:' + cellMetadatum.width + ', height:' + cellMetadatum.height);
    }

    height = Math.max(height, cellMetadatum.y + cellMetadatum.height);
    width = Math.max(width, cellMetadatum.x + cellMetadatum.width);

    cellMetadata[index] = cellMetadatum;
    sectionManager.registerCell({
      cellMetadatum: cellMetadatum,
      index: index
    });
  }

  return {
    cellMetadata: cellMetadata,
    height: height,
    sectionManager: sectionManager,
    width: width
  };
}
},{"../SectionManager":347}],351:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * High-order component that auto-calculates column-widths for `Grid` cells.
 */
var ColumnSizer = function (_PureComponent) {
  _inherits(ColumnSizer, _PureComponent);

  function ColumnSizer(props, context) {
    _classCallCheck(this, ColumnSizer);

    var _this = _possibleConstructorReturn(this, (ColumnSizer.__proto__ || Object.getPrototypeOf(ColumnSizer)).call(this, props, context));

    _this._registerChild = _this._registerChild.bind(_this);
    return _this;
  }

  _createClass(ColumnSizer, [{
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _props = this.props,
          columnMaxWidth = _props.columnMaxWidth,
          columnMinWidth = _props.columnMinWidth,
          columnCount = _props.columnCount,
          width = _props.width;


      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {
        if (this._registeredChild) {
          this._registeredChild.recomputeGridSize();
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          children = _props2.children,
          columnMaxWidth = _props2.columnMaxWidth,
          columnMinWidth = _props2.columnMinWidth,
          columnCount = _props2.columnCount,
          width = _props2.width;


      var safeColumnMinWidth = columnMinWidth || 1;

      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;

      var columnWidth = width / columnCount;
      columnWidth = Math.max(safeColumnMinWidth, columnWidth);
      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);
      columnWidth = Math.floor(columnWidth);

      var adjustedWidth = Math.min(width, columnWidth * columnCount);

      return children({
        adjustedWidth: adjustedWidth,
        columnWidth: columnWidth,
        getColumnWidth: function getColumnWidth() {
          return columnWidth;
        },
        registerChild: this._registerChild
      });
    }
  }, {
    key: '_registerChild',
    value: function _registerChild(child) {
      if (child && typeof child.recomputeGridSize !== 'function') {
        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');
      }

      this._registeredChild = child;

      if (this._registeredChild) {
        this._registeredChild.recomputeGridSize();
      }
    }
  }]);

  return ColumnSizer;
}(_react.PureComponent);

exports.default = ColumnSizer;
ColumnSizer.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Function responsible for rendering a virtualized Grid.
   * This function should implement the following signature:
   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element
   *
   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.
   * The :registerChild should be passed to the Grid's :ref property.
   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.
   */
  children: _propTypes2.default.func.isRequired,

  /** Optional maximum allowed column width */
  columnMaxWidth: _propTypes2.default.number,

  /** Optional minimum allowed column width */
  columnMinWidth: _propTypes2.default.number,

  /** Number of columns in Grid or Table child */
  columnCount: _propTypes2.default.number.isRequired,

  /** Width of Grid or Table child */
  width: _propTypes2.default.number.isRequired
} : {};
}).call(this,require('_process'))
},{"_process":172,"prop-types":406,"react":433}],352:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColumnSizer = undefined;

var _ColumnSizer = require('./ColumnSizer');

var _ColumnSizer2 = _interopRequireDefault(_ColumnSizer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _ColumnSizer2.default;
exports.ColumnSizer = _ColumnSizer2.default;
},{"./ColumnSizer":351}],353:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _calculateSizeAndPositionDataAndUpdateScrollOffset = require('./utils/calculateSizeAndPositionDataAndUpdateScrollOffset');

var _calculateSizeAndPositionDataAndUpdateScrollOffset2 = _interopRequireDefault(_calculateSizeAndPositionDataAndUpdateScrollOffset);

var _ScalingCellSizeAndPositionManager = require('./utils/ScalingCellSizeAndPositionManager');

var _ScalingCellSizeAndPositionManager2 = _interopRequireDefault(_ScalingCellSizeAndPositionManager);

var _createCallbackMemoizer = require('../utils/createCallbackMemoizer');

var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);

var _defaultOverscanIndicesGetter = require('./defaultOverscanIndicesGetter');

var _defaultOverscanIndicesGetter2 = _interopRequireDefault(_defaultOverscanIndicesGetter);

var _updateScrollIndexHelper = require('./utils/updateScrollIndexHelper');

var _updateScrollIndexHelper2 = _interopRequireDefault(_updateScrollIndexHelper);

var _defaultCellRangeRenderer = require('./defaultCellRangeRenderer');

var _defaultCellRangeRenderer2 = _interopRequireDefault(_defaultCellRangeRenderer);

var _scrollbarSize = require('dom-helpers/util/scrollbarSize');

var _scrollbarSize2 = _interopRequireDefault(_scrollbarSize);

var _requestAnimationTimeout = require('../utils/requestAnimationTimeout');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var babelPluginFlowReactPropTypes_proptype_Alignment = require('./types').babelPluginFlowReactPropTypes_proptype_Alignment || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter = require('./types').babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_RenderedSection = require('./types').babelPluginFlowReactPropTypes_proptype_RenderedSection || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_ScrollbarPresenceChange = require('./types').babelPluginFlowReactPropTypes_proptype_ScrollbarPresenceChange || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Scroll = require('./types').babelPluginFlowReactPropTypes_proptype_Scroll || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_NoContentRenderer = require('./types').babelPluginFlowReactPropTypes_proptype_NoContentRenderer || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellSizeGetter = require('./types').babelPluginFlowReactPropTypes_proptype_CellSizeGetter || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellSize = require('./types').babelPluginFlowReactPropTypes_proptype_CellSize || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellPosition = require('./types').babelPluginFlowReactPropTypes_proptype_CellPosition || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellRangeRenderer = require('./types').babelPluginFlowReactPropTypes_proptype_CellRangeRenderer || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellRenderer = require('./types').babelPluginFlowReactPropTypes_proptype_CellRenderer || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId = require('../utils/requestAnimationTimeout').babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId || require('prop-types').any;

/**
 * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.
 * This improves performance and makes scrolling smoother.
 */
var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;

/**
 * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
 * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
 */
var SCROLL_POSITION_CHANGE_REASONS = {
  OBSERVED: 'observed',
  REQUESTED: 'requested'
};

var renderNull = function renderNull() {
  return null;
};

/**
 * Renders tabular data with virtualization along the vertical and horizontal axes.
 * Row heights and column widths must be known ahead of time and specified as properties.
 */
var Grid = function (_React$PureComponent) {
  _inherits(Grid, _React$PureComponent);

  // Invokes onSectionRendered callback only when start/stop row or column indices change
  function Grid(props) {
    _classCallCheck(this, Grid);

    var _this = _possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).call(this, props));

    _this.state = {
      isScrolling: false,
      scrollDirectionHorizontal: _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD,
      scrollDirectionVertical: _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD,
      scrollLeft: 0,
      scrollTop: 0
    };
    _this._onGridRenderedMemoizer = (0, _createCallbackMemoizer2.default)();
    _this._onScrollMemoizer = (0, _createCallbackMemoizer2.default)(false);
    _this._deferredInvalidateColumnIndex = null;
    _this._deferredInvalidateRowIndex = null;
    _this._recomputeScrollLeftFlag = false;
    _this._recomputeScrollTopFlag = false;
    _this._horizontalScrollBarSize = 0;
    _this._verticalScrollBarSize = 0;
    _this._scrollbarPresenceChanged = false;
    _this._cellCache = {};
    _this._styleCache = {};
    _this._scrollbarSizeMeasured = false;
    _this._renderedColumnStartIndex = 0;
    _this._renderedColumnStopIndex = 0;
    _this._renderedRowStartIndex = 0;
    _this._renderedRowStopIndex = 0;

    _this._debounceScrollEndedCallback = function () {
      _this._disablePointerEventsTimeoutId = null;
      _this._resetStyleCache();
    };

    _this._invokeOnGridRenderedHelper = function () {
      var onSectionRendered = _this.props.onSectionRendered;


      _this._onGridRenderedMemoizer({
        callback: onSectionRendered,
        indices: {
          columnOverscanStartIndex: _this._columnStartIndex,
          columnOverscanStopIndex: _this._columnStopIndex,
          columnStartIndex: _this._renderedColumnStartIndex,
          columnStopIndex: _this._renderedColumnStopIndex,
          rowOverscanStartIndex: _this._rowStartIndex,
          rowOverscanStopIndex: _this._rowStopIndex,
          rowStartIndex: _this._renderedRowStartIndex,
          rowStopIndex: _this._renderedRowStopIndex
        }
      });
    };

    _this._setScrollingContainerRef = function (ref) {
      _this._scrollingContainer = ref;
    };

    _this._onScroll = function (event) {
      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
      // See issue #404 for more information.
      if (event.target === _this._scrollingContainer) {
        _this.handleScrollEvent(event.target);
      }
    };

    _this._columnWidthGetter = _this._wrapSizeGetter(props.columnWidth);
    _this._rowHeightGetter = _this._wrapSizeGetter(props.rowHeight);

    var deferredMeasurementCache = props.deferredMeasurementCache;

    _this._columnSizeAndPositionManager = new _ScalingCellSizeAndPositionManager2.default({
      batchAllCells: deferredMeasurementCache !== undefined && !deferredMeasurementCache.hasFixedHeight(),
      cellCount: props.columnCount,
      cellSizeGetter: function cellSizeGetter(params) {
        return _this._columnWidthGetter(params);
      },
      estimatedCellSize: _this._getEstimatedColumnSize(props)
    });
    _this._rowSizeAndPositionManager = new _ScalingCellSizeAndPositionManager2.default({
      batchAllCells: deferredMeasurementCache !== undefined && !deferredMeasurementCache.hasFixedWidth(),
      cellCount: props.rowCount,
      cellSizeGetter: function cellSizeGetter(params) {
        return _this._rowHeightGetter(params);
      },
      estimatedCellSize: _this._getEstimatedRowSize(props)
    });
    return _this;
  }

  /**
   * Gets offsets for a given cell and alignment.
   */


  // See defaultCellRangeRenderer() for more information on the usage of these caches


  _createClass(Grid, [{
    key: 'getOffsetForCell',
    value: function getOffsetForCell() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$alignment = _ref.alignment,
          alignment = _ref$alignment === undefined ? this.props.scrollToAlignment : _ref$alignment,
          _ref$columnIndex = _ref.columnIndex,
          columnIndex = _ref$columnIndex === undefined ? this.props.scrollToColumn : _ref$columnIndex,
          _ref$rowIndex = _ref.rowIndex,
          rowIndex = _ref$rowIndex === undefined ? this.props.scrollToRow : _ref$rowIndex;

      var offsetProps = _extends({}, this.props, {
        scrollToAlignment: alignment,
        scrollToColumn: columnIndex,
        scrollToRow: rowIndex
      });

      return {
        scrollLeft: this._getCalculatedScrollLeft(offsetProps),
        scrollTop: this._getCalculatedScrollTop(offsetProps)
      };
    }

    /**
     * This method handles a scroll event originating from an external scroll control.
     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.
     */

  }, {
    key: 'handleScrollEvent',
    value: function handleScrollEvent(_ref2) {
      var _ref2$scrollLeft = _ref2.scrollLeft,
          scrollLeftParam = _ref2$scrollLeft === undefined ? 0 : _ref2$scrollLeft,
          _ref2$scrollTop = _ref2.scrollTop,
          scrollTopParam = _ref2$scrollTop === undefined ? 0 : _ref2$scrollTop;

      // On iOS, we can arrive at negative offsets by swiping past the start.
      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.
      if (scrollTopParam < 0) {
        return;
      }

      // Prevent pointer events from interrupting a smooth scroll
      this._debounceScrollEnded();

      var _props = this.props,
          autoHeight = _props.autoHeight,
          autoWidth = _props.autoWidth,
          height = _props.height,
          width = _props.width;

      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
      // This causes a series of rapid renders that is slow for long lists.
      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.

      var scrollbarSize = this._scrollbarSize;
      var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
      var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);
      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam);

      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
      // Don't force a re-render if this is the case.
      // The mouse may move faster then the animation frame does.
      // Use requestAnimationFrame to avoid over-updating.
      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {
        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.
        // Don't change direction for an axis unless scroll offset has changed.
        var _scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;
        var _scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;

        var newState = {
          isScrolling: true,
          scrollDirectionHorizontal: _scrollDirectionHorizontal,
          scrollDirectionVertical: _scrollDirectionVertical,
          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED
        };

        if (!autoHeight) {
          newState.scrollTop = scrollTop;
        }

        if (!autoWidth) {
          newState.scrollLeft = scrollLeft;
        }

        this.setState(newState);
      }

      this._invokeOnScrollMemoizer({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        totalColumnsWidth: totalColumnsWidth,
        totalRowsHeight: totalRowsHeight
      });
    }

    /**
     * Invalidate Grid size and recompute visible cells.
     * This is a deferred wrapper for recomputeGridSize().
     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.
     * This method is intended for advanced use-cases like CellMeasurer.
     */
    // @TODO (bvaughn) Add automated test coverage for this.

  }, {
    key: 'invalidateCellSizeAfterRender',
    value: function invalidateCellSizeAfterRender(_ref3) {
      var columnIndex = _ref3.columnIndex,
          rowIndex = _ref3.rowIndex;

      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;
      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;
    }

    /**
     * Pre-measure all columns and rows in a Grid.
     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.
     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).
     */

  }, {
    key: 'measureAllCells',
    value: function measureAllCells() {
      var _props2 = this.props,
          columnCount = _props2.columnCount,
          rowCount = _props2.rowCount;


      this._columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);
      this._rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);
    }

    /**
     * Forced recompute of row heights and column widths.
     * This function should be called if dynamic column or row sizes have changed but nothing else has.
     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.
     */

  }, {
    key: 'recomputeGridSize',
    value: function recomputeGridSize() {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$columnIndex = _ref4.columnIndex,
          columnIndex = _ref4$columnIndex === undefined ? 0 : _ref4$columnIndex,
          _ref4$rowIndex = _ref4.rowIndex,
          rowIndex = _ref4$rowIndex === undefined ? 0 : _ref4$rowIndex;

      var _props3 = this.props,
          scrollToColumn = _props3.scrollToColumn,
          scrollToRow = _props3.scrollToRow;


      this._columnSizeAndPositionManager.resetCell(columnIndex);
      this._rowSizeAndPositionManager.resetCell(rowIndex);

      // Cell sizes may be determined by a function property.
      // In this case the cDU handler can't know if they changed.
      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.
      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && columnIndex <= scrollToColumn;
      this._recomputeScrollTopFlag = scrollToRow >= 0 && rowIndex <= scrollToRow;

      // Clear cell cache in case we are scrolling;
      // Invalid row heights likely mean invalid cached content as well.
      this._cellCache = {};
      this._styleCache = {};

      this.forceUpdate();
    }

    /**
     * Ensure column and row are visible.
     */

  }, {
    key: 'scrollToCell',
    value: function scrollToCell(_ref5) {
      var columnIndex = _ref5.columnIndex,
          rowIndex = _ref5.rowIndex;
      var columnCount = this.props.columnCount;


      var props = this.props;

      // Don't adjust scroll offset for single-column grids (eg List, Table).
      // This can cause a funky scroll offset because of the vertical scrollbar width.
      if (columnCount > 1 && columnIndex !== undefined) {
        this._updateScrollLeftForScrollToColumn(_extends({}, props, {
          scrollToColumn: columnIndex
        }));
      }

      if (rowIndex !== undefined) {
        this._updateScrollTopForScrollToRow(_extends({}, props, {
          scrollToRow: rowIndex
        }));
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props4 = this.props,
          getScrollbarSize = _props4.getScrollbarSize,
          height = _props4.height,
          scrollLeft = _props4.scrollLeft,
          scrollToColumn = _props4.scrollToColumn,
          scrollTop = _props4.scrollTop,
          scrollToRow = _props4.scrollToRow,
          width = _props4.width;

      // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.
      // We must do this at the start of the method as we may calculate and update scroll position below.

      this._handleInvalidatedGridSize();

      // If this component was first rendered server-side, scrollbar size will be undefined.
      // In that event we need to remeasure.
      if (!this._scrollbarSizeMeasured) {
        this._scrollbarSize = getScrollbarSize();
        this._scrollbarSizeMeasured = true;
        this.setState({});
      }

      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {
        this.scrollToPosition({ scrollLeft: scrollLeft, scrollTop: scrollTop });
      }

      // Don't update scroll offset if the size is 0; we don't render any cells in this case.
      // Setting a state may cause us to later thing we've updated the offce when we haven't.
      var sizeIsBiggerThanZero = height > 0 && width > 0;
      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {
        this._updateScrollLeftForScrollToColumn();
      }
      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {
        this._updateScrollTopForScrollToRow();
      }

      // Update onRowsRendered callback
      this._invokeOnGridRenderedHelper();

      // Initialize onScroll callback
      this._invokeOnScrollMemoizer({
        scrollLeft: scrollLeft || 0,
        scrollTop: scrollTop || 0,
        totalColumnsWidth: this._columnSizeAndPositionManager.getTotalSize(),
        totalRowsHeight: this._rowSizeAndPositionManager.getTotalSize()
      });

      this._maybeCallOnScrollbarPresenceChange();
    }

    /**
     * @private
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) New scroll-to-cell props have been set
     */

  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps, prevState) {
      var _this2 = this;

      var _props5 = this.props,
          autoHeight = _props5.autoHeight,
          autoWidth = _props5.autoWidth,
          columnCount = _props5.columnCount,
          height = _props5.height,
          rowCount = _props5.rowCount,
          scrollToAlignment = _props5.scrollToAlignment,
          scrollToColumn = _props5.scrollToColumn,
          scrollToRow = _props5.scrollToRow,
          width = _props5.width;
      var _state = this.state,
          scrollLeft = _state.scrollLeft,
          scrollPositionChangeReason = _state.scrollPositionChangeReason,
          scrollTop = _state.scrollTop;

      // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.
      // We must do this at the start of the method as we may calculate and update scroll position below.

      this._handleInvalidatedGridSize();

      // Handle edge case where column or row count has only just increased over 0.
      // In this case we may have to restore a previously-specified scroll offset.
      // For more info see bvaughn/react-virtualized/issues/218
      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0;

      // Make sure requested changes to :scrollLeft or :scrollTop get applied.
      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
      // So we only set these when we require an adjustment of the scroll position.
      // See issue #2 for more information.
      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {
        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).
        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.
        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {
          this._scrollingContainer.scrollLeft = scrollLeft;
        }
        if (!autoHeight && scrollTop >= 0 && (scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {
          this._scrollingContainer.scrollTop = scrollTop;
        }
      }

      // Special case where the previous size was 0:
      // In this case we don't show any windowed cells at all.
      // So we should always recalculate offset afterwards.
      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0;

      // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it
      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?
      if (this._recomputeScrollLeftFlag) {
        this._recomputeScrollLeftFlag = false;
        this._updateScrollLeftForScrollToColumn(this.props);
      } else {
        (0, _updateScrollIndexHelper2.default)({
          cellSizeAndPositionManager: this._columnSizeAndPositionManager,
          previousCellsCount: prevProps.columnCount,
          previousCellSize: prevProps.columnWidth,
          previousScrollToAlignment: prevProps.scrollToAlignment,
          previousScrollToIndex: prevProps.scrollToColumn,
          previousSize: prevProps.width,
          scrollOffset: scrollLeft,
          scrollToAlignment: scrollToAlignment,
          scrollToIndex: scrollToColumn,
          size: width,
          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,
          updateScrollIndexCallback: function updateScrollIndexCallback() {
            return _this2._updateScrollLeftForScrollToColumn(_this2.props);
          }
        });
      }

      if (this._recomputeScrollTopFlag) {
        this._recomputeScrollTopFlag = false;
        this._updateScrollTopForScrollToRow(this.props);
      } else {
        (0, _updateScrollIndexHelper2.default)({
          cellSizeAndPositionManager: this._rowSizeAndPositionManager,
          previousCellsCount: prevProps.rowCount,
          previousCellSize: prevProps.rowHeight,
          previousScrollToAlignment: prevProps.scrollToAlignment,
          previousScrollToIndex: prevProps.scrollToRow,
          previousSize: prevProps.height,
          scrollOffset: scrollTop,
          scrollToAlignment: scrollToAlignment,
          scrollToIndex: scrollToRow,
          size: height,
          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,
          updateScrollIndexCallback: function updateScrollIndexCallback() {
            return _this2._updateScrollTopForScrollToRow(_this2.props);
          }
        });
      }

      // Update onRowsRendered callback if start/stop indices have changed
      this._invokeOnGridRenderedHelper();

      // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners
      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {
        var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
        var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();

        this._invokeOnScrollMemoizer({
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          totalColumnsWidth: totalColumnsWidth,
          totalRowsHeight: totalRowsHeight
        });
      }

      this._maybeCallOnScrollbarPresenceChange();
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var getScrollbarSize = this.props.getScrollbarSize;

      // If this component is being rendered server-side, getScrollbarSize() will return undefined.
      // We handle this case in componentDidMount()

      this._scrollbarSize = getScrollbarSize();
      if (this._scrollbarSize === undefined) {
        this._scrollbarSizeMeasured = false;
        this._scrollbarSize = 0;
      } else {
        this._scrollbarSizeMeasured = true;
      }

      this._calculateChildrenToRender();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._disablePointerEventsTimeoutId) {
        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._disablePointerEventsTimeoutId);
      }
    }

    /**
     * @private
     * This method updates scrollLeft/scrollTop in state for the following conditions:
     * 1) Empty content (0 rows or columns)
     * 2) New scroll props overriding the current state
     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
     */

  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this3 = this;

      var _state2 = this.state,
          scrollLeft = _state2.scrollLeft,
          scrollTop = _state2.scrollTop;


      if (nextProps.columnCount === 0 && scrollLeft !== 0 || nextProps.rowCount === 0 && scrollTop !== 0) {
        this.scrollToPosition({
          scrollLeft: 0,
          scrollTop: 0
        });
      } else if (nextProps.scrollLeft !== this.props.scrollLeft || nextProps.scrollTop !== this.props.scrollTop) {
        var newState = {};

        if (nextProps.scrollLeft != null) {
          newState.scrollLeft = nextProps.scrollLeft;
        }
        if (nextProps.scrollTop != null) {
          newState.scrollTop = nextProps.scrollTop;
        }

        this.scrollToPosition(newState);
      }

      if (nextProps.columnWidth !== this.props.columnWidth || nextProps.rowHeight !== this.props.rowHeight) {
        this._styleCache = {};
      }

      this._columnWidthGetter = this._wrapSizeGetter(nextProps.columnWidth);
      this._rowHeightGetter = this._wrapSizeGetter(nextProps.rowHeight);

      this._columnSizeAndPositionManager.configure({
        cellCount: nextProps.columnCount,
        estimatedCellSize: this._getEstimatedColumnSize(nextProps)
      });
      this._rowSizeAndPositionManager.configure({
        cellCount: nextProps.rowCount,
        estimatedCellSize: this._getEstimatedRowSize(nextProps)
      });

      var _props6 = this.props,
          columnCount = _props6.columnCount,
          rowCount = _props6.rowCount;

      // Special case when either cols or rows were 0
      // This would prevent any cells from rendering
      // So we need to reset row scroll if cols changed from 0 (and vice versa)

      if (columnCount === 0 || rowCount === 0) {
        columnCount = 0;
        rowCount = 0;
      }

      // If scrolling is controlled outside this component, clear cache when scrolling stops
      if (nextProps.autoHeight && nextProps.isScrolling === false && this.props.isScrolling === true) {
        this._resetStyleCache();
      }

      // Update scroll offsets if the size or number of cells have changed, invalidating the previous value
      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset2.default)({
        cellCount: columnCount,
        cellSize: typeof this.props.columnWidth === 'number' ? this.props.columnWidth : null,
        computeMetadataCallback: function computeMetadataCallback() {
          return _this3._columnSizeAndPositionManager.resetCell(0);
        },
        computeMetadataCallbackProps: nextProps,
        nextCellsCount: nextProps.columnCount,
        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,
        nextScrollToIndex: nextProps.scrollToColumn,
        scrollToIndex: this.props.scrollToColumn,
        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
          return _this3._updateScrollLeftForScrollToColumn(nextProps, _this3.state);
        }
      });
      (0, _calculateSizeAndPositionDataAndUpdateScrollOffset2.default)({
        cellCount: rowCount,
        cellSize: typeof this.props.rowHeight === 'number' ? this.props.rowHeight : null,
        computeMetadataCallback: function computeMetadataCallback() {
          return _this3._rowSizeAndPositionManager.resetCell(0);
        },
        computeMetadataCallbackProps: nextProps,
        nextCellsCount: nextProps.rowCount,
        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,
        nextScrollToIndex: nextProps.scrollToRow,
        scrollToIndex: this.props.scrollToRow,
        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
          return _this3._updateScrollTopForScrollToRow(nextProps, _this3.state);
        }
      });
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(nextProps, nextState) {
      this._calculateChildrenToRender(nextProps, nextState);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props7 = this.props,
          autoContainerWidth = _props7.autoContainerWidth,
          autoHeight = _props7.autoHeight,
          autoWidth = _props7.autoWidth,
          className = _props7.className,
          containerProps = _props7.containerProps,
          containerRole = _props7.containerRole,
          containerStyle = _props7.containerStyle,
          height = _props7.height,
          id = _props7.id,
          noContentRenderer = _props7.noContentRenderer,
          role = _props7.role,
          style = _props7.style,
          tabIndex = _props7.tabIndex,
          width = _props7.width;


      var isScrolling = this._isScrolling();

      var gridStyle = {
        boxSizing: 'border-box',
        direction: 'ltr',
        height: autoHeight ? 'auto' : height,
        position: 'relative',
        width: autoWidth ? 'auto' : width,
        WebkitOverflowScrolling: 'touch',
        willChange: 'transform'
      };

      var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
      var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();

      // Force browser to hide scrollbars when we know they aren't necessary.
      // Otherwise once scrollbars appear they may not disappear again.
      // For more info see issue #116
      var verticalScrollBarSize = totalRowsHeight > height ? this._scrollbarSize : 0;
      var horizontalScrollBarSize = totalColumnsWidth > width ? this._scrollbarSize : 0;

      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {
        this._horizontalScrollBarSize = horizontalScrollBarSize;
        this._verticalScrollBarSize = verticalScrollBarSize;
        this._scrollbarPresenceChanged = true;
      }

      // Also explicitly init styles to 'auto' if scrollbars are required.
      // This works around an obscure edge case where external CSS styles have not yet been loaded,
      // But an initial scroll index of offset is set as an external prop.
      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
      // This was originally reported via clauderic/react-infinite-calendar/issues/23
      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';
      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';

      var childrenToDisplay = this._childrenToDisplay;

      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;

      return _react2.default.createElement(
        'div',
        _extends({
          ref: this._setScrollingContainerRef
        }, containerProps, {
          'aria-label': this.props['aria-label'],
          'aria-readonly': this.props['aria-readonly'],
          className: (0, _classnames2.default)('ReactVirtualized__Grid', className),
          id: id,
          onScroll: this._onScroll,
          role: role,
          style: _extends({}, gridStyle, style),
          tabIndex: tabIndex }),
        childrenToDisplay.length > 0 && _react2.default.createElement(
          'div',
          {
            className: 'ReactVirtualized__Grid__innerScrollContainer',
            role: containerRole,
            style: _extends({
              width: autoContainerWidth ? 'auto' : totalColumnsWidth,
              height: totalRowsHeight,
              maxWidth: totalColumnsWidth,
              maxHeight: totalRowsHeight,
              overflow: 'hidden',
              pointerEvents: isScrolling ? 'none' : '',
              position: 'relative'
            }, containerStyle) },
          childrenToDisplay
        ),
        showNoContentRenderer && noContentRenderer()
      );
    }

    /* ---------------------------- Helper methods ---------------------------- */

  }, {
    key: '_calculateChildrenToRender',
    value: function _calculateChildrenToRender() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var cellRenderer = props.cellRenderer,
          cellRangeRenderer = props.cellRangeRenderer,
          columnCount = props.columnCount,
          deferredMeasurementCache = props.deferredMeasurementCache,
          height = props.height,
          overscanColumnCount = props.overscanColumnCount,
          overscanIndicesGetter = props.overscanIndicesGetter,
          overscanRowCount = props.overscanRowCount,
          rowCount = props.rowCount,
          width = props.width;
      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,
          scrollDirectionVertical = state.scrollDirectionVertical,
          scrollLeft = state.scrollLeft,
          scrollTop = state.scrollTop;


      var isScrolling = this._isScrolling(props, state);

      this._childrenToDisplay = [];

      // Render only enough columns and rows to cover the visible area of the grid.
      if (height > 0 && width > 0) {
        var visibleColumnIndices = this._columnSizeAndPositionManager.getVisibleCellRange({
          containerSize: width,
          offset: scrollLeft
        });
        var visibleRowIndices = this._rowSizeAndPositionManager.getVisibleCellRange({
          containerSize: height,
          offset: scrollTop
        });

        var horizontalOffsetAdjustment = this._columnSizeAndPositionManager.getOffsetAdjustment({
          containerSize: width,
          offset: scrollLeft
        });
        var verticalOffsetAdjustment = this._rowSizeAndPositionManager.getOffsetAdjustment({
          containerSize: height,
          offset: scrollTop
        });

        // Store for _invokeOnGridRenderedHelper()
        this._renderedColumnStartIndex = visibleColumnIndices.start;
        this._renderedColumnStopIndex = visibleColumnIndices.stop;
        this._renderedRowStartIndex = visibleRowIndices.start;
        this._renderedRowStopIndex = visibleRowIndices.stop;

        var overscanColumnIndices = overscanIndicesGetter({
          direction: 'horizontal',
          cellCount: columnCount,
          overscanCellsCount: overscanColumnCount,
          scrollDirection: scrollDirectionHorizontal,
          startIndex: typeof this._renderedColumnStartIndex === 'number' ? this._renderedColumnStartIndex : 0,
          stopIndex: typeof this._renderedColumnStopIndex === 'number' ? this._renderedColumnStopIndex : -1
        });

        var overscanRowIndices = overscanIndicesGetter({
          direction: 'vertical',
          cellCount: rowCount,
          overscanCellsCount: overscanRowCount,
          scrollDirection: scrollDirectionVertical,
          startIndex: typeof this._renderedRowStartIndex === 'number' ? this._renderedRowStartIndex : 0,
          stopIndex: typeof this._renderedRowStopIndex === 'number' ? this._renderedRowStopIndex : -1
          // stopIndex: this._renderedRowStopIndex
        });

        // Store for _invokeOnGridRenderedHelper()
        this._columnStartIndex = overscanColumnIndices.overscanStartIndex;
        this._columnStopIndex = overscanColumnIndices.overscanStopIndex;
        this._rowStartIndex = overscanRowIndices.overscanStartIndex;
        this._rowStopIndex = overscanRowIndices.overscanStopIndex;

        this._childrenToDisplay = cellRangeRenderer({
          cellCache: this._cellCache,
          cellRenderer: cellRenderer,
          columnSizeAndPositionManager: this._columnSizeAndPositionManager,
          columnStartIndex: this._columnStartIndex,
          columnStopIndex: this._columnStopIndex,
          deferredMeasurementCache: deferredMeasurementCache,
          horizontalOffsetAdjustment: horizontalOffsetAdjustment,
          isScrolling: isScrolling,
          parent: this,
          rowSizeAndPositionManager: this._rowSizeAndPositionManager,
          rowStartIndex: this._rowStartIndex,
          rowStopIndex: this._rowStopIndex,
          scrollLeft: scrollLeft,
          scrollTop: scrollTop,
          styleCache: this._styleCache,
          verticalOffsetAdjustment: verticalOffsetAdjustment,
          visibleColumnIndices: visibleColumnIndices,
          visibleRowIndices: visibleRowIndices
        });
      }
    }

    /**
     * Sets an :isScrolling flag for a small window of time.
     * This flag is used to disable pointer events on the scrollable portion of the Grid.
     * This prevents jerky/stuttery mouse-wheel scrolling.
     */

  }, {
    key: '_debounceScrollEnded',
    value: function _debounceScrollEnded() {
      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;


      if (this._disablePointerEventsTimeoutId) {
        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._disablePointerEventsTimeoutId);
      }

      this._disablePointerEventsTimeoutId = (0, _requestAnimationTimeout.requestAnimationTimeout)(this._debounceScrollEndedCallback, scrollingResetTimeInterval);
    }
  }, {
    key: '_getEstimatedColumnSize',
    value: function _getEstimatedColumnSize(props) {
      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;
    }
  }, {
    key: '_getEstimatedRowSize',
    value: function _getEstimatedRowSize(props) {
      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;
    }

    /**
     * Check for batched CellMeasurer size invalidations.
     * This will occur the first time one or more previously unmeasured cells are rendered.
     */

  }, {
    key: '_handleInvalidatedGridSize',
    value: function _handleInvalidatedGridSize() {
      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {
        var columnIndex = this._deferredInvalidateColumnIndex;
        var rowIndex = this._deferredInvalidateRowIndex;

        this._deferredInvalidateColumnIndex = null;
        this._deferredInvalidateRowIndex = null;

        this.recomputeGridSize({ columnIndex: columnIndex, rowIndex: rowIndex });
      }
    }
  }, {
    key: '_invokeOnScrollMemoizer',
    value: function _invokeOnScrollMemoizer(_ref6) {
      var _this4 = this;

      var scrollLeft = _ref6.scrollLeft,
          scrollTop = _ref6.scrollTop,
          totalColumnsWidth = _ref6.totalColumnsWidth,
          totalRowsHeight = _ref6.totalRowsHeight;

      this._onScrollMemoizer({
        callback: function callback(_ref7) {
          var scrollLeft = _ref7.scrollLeft,
              scrollTop = _ref7.scrollTop;
          var _props8 = _this4.props,
              height = _props8.height,
              onScroll = _props8.onScroll,
              width = _props8.width;


          onScroll({
            clientHeight: height,
            clientWidth: width,
            scrollHeight: totalRowsHeight,
            scrollLeft: scrollLeft,
            scrollTop: scrollTop,
            scrollWidth: totalColumnsWidth
          });
        },
        indices: {
          scrollLeft: scrollLeft,
          scrollTop: scrollTop
        }
      });
    }
  }, {
    key: '_isScrolling',
    value: function _isScrolling() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

      // If isScrolling is defined in props, use it to override the value in state
      // This is a performance optimization for WindowScroller + Grid
      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);
    }
  }, {
    key: '_maybeCallOnScrollbarPresenceChange',
    value: function _maybeCallOnScrollbarPresenceChange() {
      if (this._scrollbarPresenceChanged) {
        var _onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;


        this._scrollbarPresenceChanged = false;

        _onScrollbarPresenceChange({
          horizontal: this._horizontalScrollBarSize > 0,
          size: this._scrollbarSize,
          vertical: this._verticalScrollBarSize > 0
        });
      }
    }
  }, {
    key: 'scrollToPosition',


    /**
     * Scroll to the specified offset(s).
     * Useful for animating position changes.
     */
    value: function scrollToPosition(_ref8) {
      var scrollLeft = _ref8.scrollLeft,
          scrollTop = _ref8.scrollTop;

      var newState = {
        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
      };

      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {
        newState.scrollDirectionHorizontal = scrollLeft > this.state.scrollLeft ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD;
        newState.scrollLeft = scrollLeft;
      }

      if (typeof scrollTop === 'number' && scrollTop >= 0) {
        newState.scrollDirectionVertical = scrollTop > this.state.scrollTop ? _defaultOverscanIndicesGetter.SCROLL_DIRECTION_FORWARD : _defaultOverscanIndicesGetter.SCROLL_DIRECTION_BACKWARD;
        newState.scrollTop = scrollTop;
      }

      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== this.state.scrollTop) {
        this.setState(newState);
      }
    }
  }, {
    key: '_wrapSizeGetter',
    value: function _wrapSizeGetter(value) {
      return typeof value === 'function' ? value : function () {
        return value;
      };
    }
  }, {
    key: '_getCalculatedScrollLeft',
    value: function _getCalculatedScrollLeft() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var columnCount = props.columnCount,
          height = props.height,
          scrollToAlignment = props.scrollToAlignment,
          scrollToColumn = props.scrollToColumn,
          width = props.width;
      var scrollLeft = state.scrollLeft;


      if (columnCount > 0) {
        var finalColumn = columnCount - 1;
        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);
        var totalRowsHeight = this._rowSizeAndPositionManager.getTotalSize();
        var scrollBarSize = totalRowsHeight > height ? this._scrollbarSize : 0;

        return this._columnSizeAndPositionManager.getUpdatedOffsetForIndex({
          align: scrollToAlignment,
          containerSize: width - scrollBarSize,
          currentOffset: scrollLeft,
          targetIndex: targetIndex
        });
      }
    }
  }, {
    key: '_updateScrollLeftForScrollToColumn',
    value: function _updateScrollLeftForScrollToColumn() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var scrollLeft = state.scrollLeft;

      var calculatedScrollLeft = this._getCalculatedScrollLeft(props, state);

      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {
        this.scrollToPosition({
          scrollLeft: calculatedScrollLeft,
          scrollTop: -1
        });
      }
    }
  }, {
    key: '_getCalculatedScrollTop',
    value: function _getCalculatedScrollTop() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var height = props.height,
          rowCount = props.rowCount,
          scrollToAlignment = props.scrollToAlignment,
          scrollToRow = props.scrollToRow,
          width = props.width;
      var scrollTop = state.scrollTop;


      if (rowCount > 0) {
        var finalRow = rowCount - 1;
        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);
        var totalColumnsWidth = this._columnSizeAndPositionManager.getTotalSize();
        var scrollBarSize = totalColumnsWidth > width ? this._scrollbarSize : 0;

        return this._rowSizeAndPositionManager.getUpdatedOffsetForIndex({
          align: scrollToAlignment,
          containerSize: height - scrollBarSize,
          currentOffset: scrollTop,
          targetIndex: targetIndex
        });
      }
    }
  }, {
    key: '_resetStyleCache',
    value: function _resetStyleCache() {
      var styleCache = this._styleCache;

      // Reset cell and style caches once scrolling stops.
      // This makes Grid simpler to use (since cells commonly change).
      // And it keeps the caches from growing too large.
      // Performance is most sensitive when a user is scrolling.
      this._cellCache = {};
      this._styleCache = {};

      // Copy over the visible cell styles so avoid unnecessary re-render.
      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {
        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {
          var key = rowIndex + '-' + columnIndex;
          this._styleCache[key] = styleCache[key];
        }
      }

      this.setState({
        isScrolling: false
      });
    }
  }, {
    key: '_updateScrollTopForScrollToRow',
    value: function _updateScrollTopForScrollToRow() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
      var scrollTop = state.scrollTop;

      var calculatedScrollTop = this._getCalculatedScrollTop(props, state);

      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {
        this.scrollToPosition({
          scrollLeft: -1,
          scrollTop: calculatedScrollTop
        });
      }
    }
  }]);

  return Grid;
}(_react2.default.PureComponent);

Grid.defaultProps = {
  'aria-label': 'grid',
  'aria-readonly': true,
  autoContainerWidth: false,
  autoHeight: false,
  autoWidth: false,
  cellRangeRenderer: _defaultCellRangeRenderer2.default,
  containerRole: 'rowgroup',
  containerStyle: {},
  estimatedColumnSize: 100,
  estimatedRowSize: 30,
  getScrollbarSize: _scrollbarSize2.default,
  noContentRenderer: renderNull,
  onScroll: function onScroll(_ref9) {
    _objectDestructuringEmpty(_ref9);
  },
  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},
  onSectionRendered: function onSectionRendered(_ref10) {
    _objectDestructuringEmpty(_ref10);
  },
  overscanColumnCount: 0,
  overscanIndicesGetter: _defaultOverscanIndicesGetter2.default,
  overscanRowCount: 10,
  role: 'grid',
  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,
  scrollToAlignment: 'auto',
  scrollToColumn: -1,
  scrollToRow: -1,
  style: {},
  tabIndex: 0
};
Grid.propTypes = {
  "aria-label": require('prop-types').string.isRequired,
  "aria-readonly": require('prop-types').bool,
  autoContainerWidth: require('prop-types').bool.isRequired,
  autoHeight: require('prop-types').bool.isRequired,
  autoWidth: require('prop-types').bool.isRequired,
  cellRenderer: typeof babelPluginFlowReactPropTypes_proptype_CellRenderer === 'function' ? babelPluginFlowReactPropTypes_proptype_CellRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_CellRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_CellRenderer : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_CellRenderer).isRequired,
  cellRangeRenderer: typeof babelPluginFlowReactPropTypes_proptype_CellRangeRenderer === 'function' ? babelPluginFlowReactPropTypes_proptype_CellRangeRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_CellRangeRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_CellRangeRenderer : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_CellRangeRenderer).isRequired,
  className: require('prop-types').string,
  columnCount: require('prop-types').number.isRequired,
  columnWidth: typeof babelPluginFlowReactPropTypes_proptype_CellSize === 'function' ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired : babelPluginFlowReactPropTypes_proptype_CellSize : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_CellSize).isRequired,
  containerProps: require('prop-types').object,
  containerRole: require('prop-types').string.isRequired,
  containerStyle: require('prop-types').object.isRequired,
  deferredMeasurementCache: require('prop-types').object,
  estimatedColumnSize: require('prop-types').number.isRequired,
  estimatedRowSize: require('prop-types').number.isRequired,
  getScrollbarSize: require('prop-types').func.isRequired,
  height: require('prop-types').number.isRequired,
  id: require('prop-types').string,
  isScrolling: require('prop-types').bool,
  noContentRenderer: typeof babelPluginFlowReactPropTypes_proptype_NoContentRenderer === 'function' ? babelPluginFlowReactPropTypes_proptype_NoContentRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_NoContentRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_NoContentRenderer : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_NoContentRenderer).isRequired,
  onScroll: require('prop-types').func.isRequired,
  onScrollbarPresenceChange: require('prop-types').func.isRequired,
  onSectionRendered: require('prop-types').func.isRequired,
  overscanColumnCount: require('prop-types').number.isRequired,
  overscanIndicesGetter: typeof babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter === 'function' ? babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter.isRequired ? babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter.isRequired : babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter).isRequired,
  overscanRowCount: require('prop-types').number.isRequired,
  role: require('prop-types').string.isRequired,
  rowHeight: typeof babelPluginFlowReactPropTypes_proptype_CellSize === 'function' ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired : babelPluginFlowReactPropTypes_proptype_CellSize : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_CellSize).isRequired,
  rowCount: require('prop-types').number.isRequired,
  scrollingResetTimeInterval: require('prop-types').number.isRequired,
  scrollLeft: require('prop-types').number,
  scrollToAlignment: typeof babelPluginFlowReactPropTypes_proptype_Alignment === 'function' ? babelPluginFlowReactPropTypes_proptype_Alignment.isRequired ? babelPluginFlowReactPropTypes_proptype_Alignment.isRequired : babelPluginFlowReactPropTypes_proptype_Alignment : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_Alignment).isRequired,
  scrollToColumn: require('prop-types').number.isRequired,
  scrollTop: require('prop-types').number,
  scrollToRow: require('prop-types').number.isRequired,
  style: require('prop-types').object.isRequired,
  tabIndex: require('prop-types').number,
  width: require('prop-types').number.isRequired
};
exports.default = Grid;
},{"../utils/createCallbackMemoizer":394,"../utils/requestAnimationTimeout":396,"./defaultCellRangeRenderer":355,"./defaultOverscanIndicesGetter":356,"./types":358,"./utils/ScalingCellSizeAndPositionManager":360,"./utils/calculateSizeAndPositionDataAndUpdateScrollOffset":361,"./utils/updateScrollIndexHelper":362,"classnames":142,"dom-helpers/util/scrollbarSize":145,"prop-types":406,"react":433}],354:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultOverscanIndicesGetter;

var babelPluginFlowReactPropTypes_proptype_OverscanIndices = require('./types').babelPluginFlowReactPropTypes_proptype_OverscanIndices || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams = require('./types').babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams || require('prop-types').any;

var SCROLL_DIRECTION_BACKWARD = exports.SCROLL_DIRECTION_BACKWARD = -1;
var SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_FORWARD = 1;

var SCROLL_DIRECTION_HORIZONTAL = exports.SCROLL_DIRECTION_HORIZONTAL = 'horizontal';
var SCROLL_DIRECTION_VERTICAL = exports.SCROLL_DIRECTION_VERTICAL = 'vertical';

/**
 * Calculates the number of cells to overscan before and after a specified range.
 * This function ensures that overscanning doesn't exceed the available cells.
 */

function defaultOverscanIndicesGetter(_ref) {
  var cellCount = _ref.cellCount,
      overscanCellsCount = _ref.overscanCellsCount,
      scrollDirection = _ref.scrollDirection,
      startIndex = _ref.startIndex,
      stopIndex = _ref.stopIndex;

  // Make sure we render at least 1 cell extra before and after (except near boundaries)
  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases
  // For more info see issues #625
  overscanCellsCount = Math.max(1, overscanCellsCount);

  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {
    return {
      overscanStartIndex: Math.max(0, startIndex - 1),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
    };
  } else {
    return {
      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)
    };
  }
}
},{"./types":358,"prop-types":406}],355:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultCellRangeRenderer;

/**
 * Default implementation of cellRangeRenderer used by Grid.
 * This renderer supports cell-caching while the user is scrolling.
 */

var babelPluginFlowReactPropTypes_proptype_CellRangeRendererParams = require('./types').babelPluginFlowReactPropTypes_proptype_CellRangeRendererParams || require('prop-types').any;

function defaultCellRangeRenderer(_ref) {
  var cellCache = _ref.cellCache,
      cellRenderer = _ref.cellRenderer,
      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,
      columnStartIndex = _ref.columnStartIndex,
      columnStopIndex = _ref.columnStopIndex,
      deferredMeasurementCache = _ref.deferredMeasurementCache,
      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,
      isScrolling = _ref.isScrolling,
      parent = _ref.parent,
      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,
      rowStartIndex = _ref.rowStartIndex,
      rowStopIndex = _ref.rowStopIndex,
      styleCache = _ref.styleCache,
      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,
      visibleColumnIndices = _ref.visibleColumnIndices,
      visibleRowIndices = _ref.visibleRowIndices;

  var renderedCells = [];

  // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).
  // User cannot scroll beyond these size limitations.
  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.
  // We should never cache styles for compressed offsets though as this can lead to bugs.
  // See issue #576 for more.
  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();

  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;

  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {
    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);

    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {
      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);
      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;
      var key = rowIndex + '-' + columnIndex;
      var style = void 0;

      // Cache style objects so shallow-compare doesn't re-render unnecessarily.
      if (canCacheStyle && styleCache[key]) {
        style = styleCache[key];
      } else {
        // In deferred mode, cells will be initially rendered before we know their size.
        // Don't interfere with CellMeasurer's measurements by setting an invalid size.
        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {
          // Position not-yet-measured cells at top/left 0,0,
          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.
          // Positioning them further to the right/bottom influences their measured size.
          style = {
            height: 'auto',
            left: 0,
            position: 'absolute',
            top: 0,
            width: 'auto'
          };
        } else {
          style = {
            height: rowDatum.size,
            left: columnDatum.offset + horizontalOffsetAdjustment,
            position: 'absolute',
            top: rowDatum.offset + verticalOffsetAdjustment,
            width: columnDatum.size
          };

          styleCache[key] = style;
        }
      }

      var cellRendererParams = {
        columnIndex: columnIndex,
        isScrolling: isScrolling,
        isVisible: isVisible,
        key: key,
        parent: parent,
        rowIndex: rowIndex,
        style: style
      };

      var renderedCell = void 0;

      // Avoid re-creating cells while scrolling.
      // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
      // If a scroll is in progress- cache and reuse cells.
      // This cache will be thrown away once scrolling completes.
      // However if we are scaling scroll positions and sizes, we should also avoid caching.
      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.
      // For more info refer to issue #395
      if (isScrolling && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {
        if (!cellCache[key]) {
          cellCache[key] = cellRenderer(cellRendererParams);
        }

        renderedCell = cellCache[key];

        // If the user is no longer scrolling, don't cache cells.
        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.
      } else {
        renderedCell = cellRenderer(cellRendererParams);
      }

      if (renderedCell == null || renderedCell === false) {
        continue;
      }

      if (process.env.NODE_ENV !== 'production') {
        warnAboutMissingStyle(parent, renderedCell);
      }

      renderedCells.push(renderedCell);
    }
  }

  return renderedCells;
}

function warnAboutMissingStyle(parent, renderedCell) {
  if (process.env.NODE_ENV !== 'production') {
    if (renderedCell) {
      // If the direct child is a CellMeasurer, then we should check its child
      // See issue #611
      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {
        renderedCell = renderedCell.props.children;
      }

      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {
        parent.__warnedAboutMissingStyle = true;

        console.warn('Rendered cell should include style property for positioning.');
      }
    }
  }
}
}).call(this,require('_process'))
},{"./types":358,"_process":172,"prop-types":406}],356:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultOverscanIndicesGetter;

var babelPluginFlowReactPropTypes_proptype_OverscanIndices = require('./types').babelPluginFlowReactPropTypes_proptype_OverscanIndices || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams = require('./types').babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams || require('prop-types').any;

var SCROLL_DIRECTION_BACKWARD = exports.SCROLL_DIRECTION_BACKWARD = -1;
var SCROLL_DIRECTION_FORWARD = exports.SCROLL_DIRECTION_FORWARD = 1;

var SCROLL_DIRECTION_HORIZONTAL = exports.SCROLL_DIRECTION_HORIZONTAL = 'horizontal';
var SCROLL_DIRECTION_VERTICAL = exports.SCROLL_DIRECTION_VERTICAL = 'vertical';

/**
 * Calculates the number of cells to overscan before and after a specified range.
 * This function ensures that overscanning doesn't exceed the available cells.
 */

function defaultOverscanIndicesGetter(_ref) {
  var cellCount = _ref.cellCount,
      overscanCellsCount = _ref.overscanCellsCount,
      scrollDirection = _ref.scrollDirection,
      startIndex = _ref.startIndex,
      stopIndex = _ref.stopIndex;

  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {
    return {
      overscanStartIndex: Math.max(0, startIndex),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
    };
  } else {
    return {
      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
      overscanStopIndex: Math.min(cellCount - 1, stopIndex)
    };
  }
}
},{"./types":358,"prop-types":406}],357:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Grid = require('./Grid');

Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Grid).default;
  }
});
Object.defineProperty(exports, 'Grid', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_Grid).default;
  }
});

var _accessibilityOverscanIndicesGetter = require('./accessibilityOverscanIndicesGetter');

Object.defineProperty(exports, 'accessibilityOverscanIndicesGetter', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_accessibilityOverscanIndicesGetter).default;
  }
});

var _defaultCellRangeRenderer = require('./defaultCellRangeRenderer');

Object.defineProperty(exports, 'defaultCellRangeRenderer', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_defaultCellRangeRenderer).default;
  }
});

var _defaultOverscanIndicesGetter = require('./defaultOverscanIndicesGetter');

Object.defineProperty(exports, 'defaultOverscanIndicesGetter', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_defaultOverscanIndicesGetter).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./Grid":353,"./accessibilityOverscanIndicesGetter":354,"./defaultCellRangeRenderer":355,"./defaultOverscanIndicesGetter":356}],358:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ScalingCellSizeAndPositionManager = require('./utils/ScalingCellSizeAndPositionManager');

var _ScalingCellSizeAndPositionManager2 = _interopRequireDefault(_ScalingCellSizeAndPositionManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_CellPosition', {
  value: {
    columnIndex: require('prop-types').number.isRequired,
    rowIndex: require('prop-types').number.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_CellRendererParams', {
  value: {
    columnIndex: require('prop-types').number.isRequired,
    isScrolling: require('prop-types').bool.isRequired,
    isVisible: require('prop-types').bool.isRequired,
    key: require('prop-types').string.isRequired,
    parent: require('prop-types').object.isRequired,
    rowIndex: require('prop-types').number.isRequired,
    style: require('prop-types').object.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_CellRenderer', {
  value: require('prop-types').func,
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_CellRangeRendererParams', {
  value: {
    cellCache: require('prop-types').object.isRequired,
    cellRenderer: require('prop-types').func.isRequired,
    columnSizeAndPositionManager: typeof _ScalingCellSizeAndPositionManager2.default === 'function' ? require('prop-types').instanceOf(_ScalingCellSizeAndPositionManager2.default).isRequired : require('prop-types').any.isRequired,
    columnStartIndex: require('prop-types').number.isRequired,
    columnStopIndex: require('prop-types').number.isRequired,
    deferredMeasurementCache: require('prop-types').object,
    horizontalOffsetAdjustment: require('prop-types').number.isRequired,
    isScrolling: require('prop-types').bool.isRequired,
    parent: require('prop-types').object.isRequired,
    rowSizeAndPositionManager: typeof _ScalingCellSizeAndPositionManager2.default === 'function' ? require('prop-types').instanceOf(_ScalingCellSizeAndPositionManager2.default).isRequired : require('prop-types').any.isRequired,
    rowStartIndex: require('prop-types').number.isRequired,
    rowStopIndex: require('prop-types').number.isRequired,
    scrollLeft: require('prop-types').number.isRequired,
    scrollTop: require('prop-types').number.isRequired,
    styleCache: require('prop-types').object.isRequired,
    verticalOffsetAdjustment: require('prop-types').number.isRequired,
    visibleColumnIndices: require('prop-types').object.isRequired,
    visibleRowIndices: require('prop-types').object.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_CellRangeRenderer', {
  value: require('prop-types').func,
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_CellSizeGetter', {
  value: require('prop-types').func,
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_CellSize', {
  value: require('prop-types').oneOfType([require('prop-types').func, require('prop-types').number]),
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_NoContentRenderer', {
  value: require('prop-types').func,
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_Scroll', {
  value: {
    clientHeight: require('prop-types').number.isRequired,
    clientWidth: require('prop-types').number.isRequired,
    scrollHeight: require('prop-types').number.isRequired,
    scrollLeft: require('prop-types').number.isRequired,
    scrollTop: require('prop-types').number.isRequired,
    scrollWidth: require('prop-types').number.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_ScrollbarPresenceChange', {
  value: {
    horizontal: require('prop-types').bool.isRequired,
    vertical: require('prop-types').bool.isRequired,
    size: require('prop-types').number.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_RenderedSection', {
  value: {
    columnOverscanStartIndex: require('prop-types').number.isRequired,
    columnOverscanStopIndex: require('prop-types').number.isRequired,
    columnStartIndex: require('prop-types').number.isRequired,
    columnStopIndex: require('prop-types').number.isRequired,
    rowOverscanStartIndex: require('prop-types').number.isRequired,
    rowOverscanStopIndex: require('prop-types').number.isRequired,
    rowStartIndex: require('prop-types').number.isRequired,
    rowStopIndex: require('prop-types').number.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetterParams', {
  value: {
    direction: require('prop-types').oneOf(['horizontal', 'vertical']).isRequired,
    scrollDirection: require('prop-types').oneOf([-1, 1]).isRequired,
    cellCount: require('prop-types').number.isRequired,
    overscanCellsCount: require('prop-types').number.isRequired,
    startIndex: require('prop-types').number.isRequired,
    stopIndex: require('prop-types').number.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_OverscanIndices', {
  value: {
    overscanStartIndex: require('prop-types').number.isRequired,
    overscanStopIndex: require('prop-types').number.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter', {
  value: require('prop-types').func,
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_Alignment', {
  value: require('prop-types').oneOf(['auto', 'end', 'start', 'center']),
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_VisibleCellRange', {
  value: {
    start: require('prop-types').number,
    stop: require('prop-types').number
  },
  configurable: true
});
},{"./utils/ScalingCellSizeAndPositionManager":360,"prop-types":406,"react":433}],359:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var babelPluginFlowReactPropTypes_proptype_VisibleCellRange = require('../types').babelPluginFlowReactPropTypes_proptype_VisibleCellRange || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellSizeGetter = require('../types').babelPluginFlowReactPropTypes_proptype_CellSizeGetter || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Alignment = require('../types').babelPluginFlowReactPropTypes_proptype_Alignment || require('prop-types').any;

/**
 * Just-in-time calculates and caches size and position information for a collection of cells.
 */

var CellSizeAndPositionManager = function () {

  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.
  function CellSizeAndPositionManager(_ref) {
    var _ref$batchAllCells = _ref.batchAllCells,
        batchAllCells = _ref$batchAllCells === undefined ? false : _ref$batchAllCells,
        cellCount = _ref.cellCount,
        cellSizeGetter = _ref.cellSizeGetter,
        estimatedCellSize = _ref.estimatedCellSize;

    _classCallCheck(this, CellSizeAndPositionManager);

    this._cellSizeAndPositionData = {};
    this._lastMeasuredIndex = -1;
    this._lastBatchedIndex = -1;

    this._batchAllCells = batchAllCells;
    this._cellSizeGetter = cellSizeGetter;
    this._cellCount = cellCount;
    this._estimatedCellSize = estimatedCellSize;
  }

  // Used in deferred mode to track which cells have been queued for measurement.

  // Cache of size and position data for cells, mapped by cell index.
  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex


  _createClass(CellSizeAndPositionManager, [{
    key: 'areOffsetsAdjusted',
    value: function areOffsetsAdjusted() {
      return false;
    }
  }, {
    key: 'configure',
    value: function configure(_ref2) {
      var cellCount = _ref2.cellCount,
          estimatedCellSize = _ref2.estimatedCellSize;

      this._cellCount = cellCount;
      this._estimatedCellSize = estimatedCellSize;
    }
  }, {
    key: 'getCellCount',
    value: function getCellCount() {
      return this._cellCount;
    }
  }, {
    key: 'getEstimatedCellSize',
    value: function getEstimatedCellSize() {
      return this._estimatedCellSize;
    }
  }, {
    key: 'getLastMeasuredIndex',
    value: function getLastMeasuredIndex() {
      return this._lastMeasuredIndex;
    }
  }, {
    key: 'getOffsetAdjustment',
    value: function getOffsetAdjustment() {
      return 0;
    }

    /**
     * This method returns the size and position for the cell at the specified index.
     * It just-in-time calculates (or used cached values) for cells leading up to the index.
     */

  }, {
    key: 'getSizeAndPositionOfCell',
    value: function getSizeAndPositionOfCell(index) {
      if (index < 0 || index >= this._cellCount) {
        throw Error('Requested index ' + index + ' is outside of range 0..' + this._cellCount);
      }

      if (index > this._lastMeasuredIndex) {
        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
        var _offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;

        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {
          var _size = this._cellSizeGetter({ index: i });

          // undefined or NaN probably means a logic error in the size getter.
          // null means we're using CellMeasurer and haven't yet measured a given index.
          if (_size === undefined || isNaN(_size)) {
            throw Error('Invalid size returned for cell ' + i + ' of value ' + _size);
          } else if (_size === null) {
            this._cellSizeAndPositionData[i] = {
              offset: _offset,
              size: 0
            };

            this._lastBatchedIndex = index;
          } else {
            this._cellSizeAndPositionData[i] = {
              offset: _offset,
              size: _size
            };

            _offset += _size;

            this._lastMeasuredIndex = index;
          }
        }
      }

      return this._cellSizeAndPositionData[index];
    }
  }, {
    key: 'getSizeAndPositionOfLastMeasuredCell',
    value: function getSizeAndPositionOfLastMeasuredCell() {
      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {
        offset: 0,
        size: 0
      };
    }

    /**
     * Total size of all cells being measured.
     * This value will be completely estimated initially.
     * As cells are measured, the estimate will be updated.
     */

  }, {
    key: 'getTotalSize',
    value: function getTotalSize() {
      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;
      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;
      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;
      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;
    }

    /**
     * Determines a new offset that ensures a certain cell is visible, given the current offset.
     * If the cell is already visible then the current offset will be returned.
     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
     *
     * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
     * @param containerSize Size (width or height) of the container viewport
     * @param currentOffset Container's current (x or y) offset
     * @param totalSize Total size (width or height) of all cells
     * @return Offset to use to ensure the specified cell is visible
     */

  }, {
    key: 'getUpdatedOffsetForIndex',
    value: function getUpdatedOffsetForIndex(_ref3) {
      var _ref3$align = _ref3.align,
          align = _ref3$align === undefined ? 'auto' : _ref3$align,
          containerSize = _ref3.containerSize,
          currentOffset = _ref3.currentOffset,
          targetIndex = _ref3.targetIndex;

      if (containerSize <= 0) {
        return 0;
      }

      var datum = this.getSizeAndPositionOfCell(targetIndex);
      var maxOffset = datum.offset;
      var minOffset = maxOffset - containerSize + datum.size;

      var idealOffset = void 0;

      switch (align) {
        case 'start':
          idealOffset = maxOffset;
          break;
        case 'end':
          idealOffset = minOffset;
          break;
        case 'center':
          idealOffset = maxOffset - (containerSize - datum.size) / 2;
          break;
        default:
          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));
          break;
      }

      var totalSize = this.getTotalSize();

      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));
    }
  }, {
    key: 'getVisibleCellRange',
    value: function getVisibleCellRange(params) {
      // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.
      // eg we can't know a row's height without measuring the height of all columns within that row.
      if (this._batchAllCells) {
        return {
          start: 0,
          stop: this._cellCount - 1
        };
      }

      var containerSize = params.containerSize,
          offset = params.offset;


      var totalSize = this.getTotalSize();

      if (totalSize === 0) {
        return {};
      }

      var maxOffset = offset + containerSize;
      var start = this._findNearestCell(offset);

      var datum = this.getSizeAndPositionOfCell(start);
      offset = datum.offset + datum.size;

      var stop = start;

      while (offset < maxOffset && stop < this._cellCount - 1) {
        stop++;

        offset += this.getSizeAndPositionOfCell(stop).size;
      }

      return {
        start: start,
        stop: stop
      };
    }

    /**
     * Clear all cached values for cells after the specified index.
     * This method should be called for any cell that has changed its size.
     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.
     */

  }, {
    key: 'resetCell',
    value: function resetCell(index) {
      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);
    }
  }, {
    key: '_binarySearch',
    value: function _binarySearch(high, low, offset) {
      while (low <= high) {
        var middle = low + Math.floor((high - low) / 2);
        var _currentOffset = this.getSizeAndPositionOfCell(middle).offset;

        if (_currentOffset === offset) {
          return middle;
        } else if (_currentOffset < offset) {
          low = middle + 1;
        } else if (_currentOffset > offset) {
          high = middle - 1;
        }
      }

      if (low > 0) {
        return low - 1;
      } else {
        return 0;
      }
    }
  }, {
    key: '_exponentialSearch',
    value: function _exponentialSearch(index, offset) {
      var interval = 1;

      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {
        index += interval;
        interval *= 2;
      }

      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);
    }

    /**
     * Searches for the cell (index) nearest the specified offset.
     *
     * If no exact match is found the next lowest cell index will be returned.
     * This allows partially visible cells (with offsets just before/above the fold) to be visible.
     */

  }, {
    key: '_findNearestCell',
    value: function _findNearestCell(offset) {
      if (isNaN(offset)) {
        throw Error('Invalid offset ' + offset + ' specified');
      }

      // Our search algorithms find the nearest match at or below the specified offset.
      // So make sure the offset is at least 0 or no match will be found.
      offset = Math.max(0, offset);

      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);

      if (lastMeasuredCellSizeAndPosition.offset >= offset) {
        // If we've already measured cells within this range just use a binary search as it's faster.
        return this._binarySearch(lastMeasuredIndex, 0, offset);
      } else {
        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.
        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.
        // The overall complexity for this approach is O(log n).
        return this._exponentialSearch(lastMeasuredIndex, offset);
      }
    }
  }]);

  return CellSizeAndPositionManager;
}();

exports.default = CellSizeAndPositionManager;
},{"../types":358,"prop-types":406}],360:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_MAX_SCROLL_SIZE = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CellSizeAndPositionManager = require('./CellSizeAndPositionManager');

var _CellSizeAndPositionManager2 = _interopRequireDefault(_CellSizeAndPositionManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var babelPluginFlowReactPropTypes_proptype_VisibleCellRange = require('../types').babelPluginFlowReactPropTypes_proptype_VisibleCellRange || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellSizeGetter = require('../types').babelPluginFlowReactPropTypes_proptype_CellSizeGetter || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Alignment = require('../types').babelPluginFlowReactPropTypes_proptype_Alignment || require('prop-types').any;

/**
 * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).
 * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).
 * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.
 */
var DEFAULT_MAX_SCROLL_SIZE = exports.DEFAULT_MAX_SCROLL_SIZE = 1500000;

/**
 * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.
 */
var ScalingCellSizeAndPositionManager = function () {
  function ScalingCellSizeAndPositionManager(_ref) {
    var _ref$maxScrollSize = _ref.maxScrollSize,
        maxScrollSize = _ref$maxScrollSize === undefined ? DEFAULT_MAX_SCROLL_SIZE : _ref$maxScrollSize,
        params = _objectWithoutProperties(_ref, ['maxScrollSize']);

    _classCallCheck(this, ScalingCellSizeAndPositionManager);

    // Favor composition over inheritance to simplify IE10 support
    this._cellSizeAndPositionManager = new _CellSizeAndPositionManager2.default(params);
    this._maxScrollSize = maxScrollSize;
  }

  _createClass(ScalingCellSizeAndPositionManager, [{
    key: 'areOffsetsAdjusted',
    value: function areOffsetsAdjusted() {
      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;
    }
  }, {
    key: 'configure',
    value: function configure(params) {
      this._cellSizeAndPositionManager.configure(params);
    }
  }, {
    key: 'getCellCount',
    value: function getCellCount() {
      return this._cellSizeAndPositionManager.getCellCount();
    }
  }, {
    key: 'getEstimatedCellSize',
    value: function getEstimatedCellSize() {
      return this._cellSizeAndPositionManager.getEstimatedCellSize();
    }
  }, {
    key: 'getLastMeasuredIndex',
    value: function getLastMeasuredIndex() {
      return this._cellSizeAndPositionManager.getLastMeasuredIndex();
    }

    /**
     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.
     * The offset passed to this function is scaled (safe) as well.
     */

  }, {
    key: 'getOffsetAdjustment',
    value: function getOffsetAdjustment(_ref2) {
      var containerSize = _ref2.containerSize,
          offset = _ref2.offset;

      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
      var safeTotalSize = this.getTotalSize();
      var offsetPercentage = this._getOffsetPercentage({
        containerSize: containerSize,
        offset: offset,
        totalSize: safeTotalSize
      });

      return Math.round(offsetPercentage * (safeTotalSize - totalSize));
    }
  }, {
    key: 'getSizeAndPositionOfCell',
    value: function getSizeAndPositionOfCell(index) {
      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);
    }
  }, {
    key: 'getSizeAndPositionOfLastMeasuredCell',
    value: function getSizeAndPositionOfLastMeasuredCell() {
      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();
    }

    /** See CellSizeAndPositionManager#getTotalSize */

  }, {
    key: 'getTotalSize',
    value: function getTotalSize() {
      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());
    }

    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */

  }, {
    key: 'getUpdatedOffsetForIndex',
    value: function getUpdatedOffsetForIndex(_ref3) {
      var _ref3$align = _ref3.align,
          align = _ref3$align === undefined ? 'auto' : _ref3$align,
          containerSize = _ref3.containerSize,
          currentOffset = _ref3.currentOffset,
          targetIndex = _ref3.targetIndex;

      currentOffset = this._safeOffsetToOffset({
        containerSize: containerSize,
        offset: currentOffset
      });

      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({
        align: align,
        containerSize: containerSize,
        currentOffset: currentOffset,
        targetIndex: targetIndex
      });

      return this._offsetToSafeOffset({
        containerSize: containerSize,
        offset: offset
      });
    }

    /** See CellSizeAndPositionManager#getVisibleCellRange */

  }, {
    key: 'getVisibleCellRange',
    value: function getVisibleCellRange(_ref4) {
      var containerSize = _ref4.containerSize,
          offset = _ref4.offset;

      offset = this._safeOffsetToOffset({
        containerSize: containerSize,
        offset: offset
      });

      return this._cellSizeAndPositionManager.getVisibleCellRange({
        containerSize: containerSize,
        offset: offset
      });
    }
  }, {
    key: 'resetCell',
    value: function resetCell(index) {
      this._cellSizeAndPositionManager.resetCell(index);
    }
  }, {
    key: '_getOffsetPercentage',
    value: function _getOffsetPercentage(_ref5) {
      var containerSize = _ref5.containerSize,
          offset = _ref5.offset,
          totalSize = _ref5.totalSize;

      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);
    }
  }, {
    key: '_offsetToSafeOffset',
    value: function _offsetToSafeOffset(_ref6) {
      var containerSize = _ref6.containerSize,
          offset = _ref6.offset;

      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
      var safeTotalSize = this.getTotalSize();

      if (totalSize === safeTotalSize) {
        return offset;
      } else {
        var offsetPercentage = this._getOffsetPercentage({
          containerSize: containerSize,
          offset: offset,
          totalSize: totalSize
        });

        return Math.round(offsetPercentage * (safeTotalSize - containerSize));
      }
    }
  }, {
    key: '_safeOffsetToOffset',
    value: function _safeOffsetToOffset(_ref7) {
      var containerSize = _ref7.containerSize,
          offset = _ref7.offset;

      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
      var safeTotalSize = this.getTotalSize();

      if (totalSize === safeTotalSize) {
        return offset;
      } else {
        var offsetPercentage = this._getOffsetPercentage({
          containerSize: containerSize,
          offset: offset,
          totalSize: safeTotalSize
        });

        return Math.round(offsetPercentage * (totalSize - containerSize));
      }
    }
  }]);

  return ScalingCellSizeAndPositionManager;
}();

exports.default = ScalingCellSizeAndPositionManager;
},{"../types":358,"./CellSizeAndPositionManager":359,"prop-types":406}],361:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calculateSizeAndPositionDataAndUpdateScrollOffset;
function calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {
  var cellCount = _ref.cellCount,
      cellSize = _ref.cellSize,
      computeMetadataCallback = _ref.computeMetadataCallback,
      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,
      nextCellsCount = _ref.nextCellsCount,
      nextCellSize = _ref.nextCellSize,
      nextScrollToIndex = _ref.nextScrollToIndex,
      scrollToIndex = _ref.scrollToIndex,
      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;

  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.
  // In that event users should use the manual recompute methods to inform of changes.
  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {
    computeMetadataCallback(computeMetadataCallbackProps);

    // Updated cell metadata may have hidden the previous scrolled-to item.
    // In this case we should also update the scrollTop to ensure it stays visible.
    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {
      updateScrollOffsetForScrollToIndex();
    }
  }
}

/**
 * Helper method that determines when to recalculate row or column metadata.
 */
},{}],362:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = updateScrollIndexHelper;

var _ScalingCellSizeAndPositionManager = require('./ScalingCellSizeAndPositionManager.js');

var _ScalingCellSizeAndPositionManager2 = _interopRequireDefault(_ScalingCellSizeAndPositionManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_CellSize = require('../types').babelPluginFlowReactPropTypes_proptype_CellSize || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Alignment = require('../types').babelPluginFlowReactPropTypes_proptype_Alignment || require('prop-types').any;

/**
 * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.
 * This function also ensures that the scroll ofset isn't past the last column/row of cells.
 */

function updateScrollIndexHelper(_ref) {
  var cellSize = _ref.cellSize,
      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,
      previousCellsCount = _ref.previousCellsCount,
      previousCellSize = _ref.previousCellSize,
      previousScrollToAlignment = _ref.previousScrollToAlignment,
      previousScrollToIndex = _ref.previousScrollToIndex,
      previousSize = _ref.previousSize,
      scrollOffset = _ref.scrollOffset,
      scrollToAlignment = _ref.scrollToAlignment,
      scrollToIndex = _ref.scrollToIndex,
      size = _ref.size,
      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,
      updateScrollIndexCallback = _ref.updateScrollIndexCallback;

  var cellCount = cellSizeAndPositionManager.getCellCount();
  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;
  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize;

  // If we have a new scroll target OR if height/row-height has changed,
  // We should ensure that the scroll target is visible.
  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {
    updateScrollIndexCallback(scrollToIndex);

    // If we don't have a selected item but list size or number of children have decreased,
    // Make sure we aren't scrolled too far past the current content.
  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {
    // We need to ensure that the current scroll offset is still within the collection's range.
    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.
    // Just check to make sure we're still okay.
    // Only adjust the scroll position if we've scrolled below the last set of rows.
    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {
      updateScrollIndexCallback(cellCount - 1);
    }
  }
}
},{"../types":358,"./ScalingCellSizeAndPositionManager.js":360,"prop-types":406}],363:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.isRangeVisible = isRangeVisible;
exports.scanForUnloadedRanges = scanForUnloadedRanges;
exports.forceUpdateReactVirtualizedComponent = forceUpdateReactVirtualizedComponent;

var _react = require('react');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createCallbackMemoizer = require('../utils/createCallbackMemoizer');

var _createCallbackMemoizer2 = _interopRequireDefault(_createCallbackMemoizer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Higher-order component that manages lazy-loading for "infinite" data.
 * This component decorates a virtual component and just-in-time prefetches rows as a user scrolls.
 * It is intended as a convenience component; fork it if you'd like finer-grained control over data-loading.
 */
var InfiniteLoader = function (_PureComponent) {
  _inherits(InfiniteLoader, _PureComponent);

  function InfiniteLoader(props, context) {
    _classCallCheck(this, InfiniteLoader);

    var _this = _possibleConstructorReturn(this, (InfiniteLoader.__proto__ || Object.getPrototypeOf(InfiniteLoader)).call(this, props, context));

    _this._loadMoreRowsMemoizer = (0, _createCallbackMemoizer2.default)();

    _this._onRowsRendered = _this._onRowsRendered.bind(_this);
    _this._registerChild = _this._registerChild.bind(_this);
    return _this;
  }

  _createClass(InfiniteLoader, [{
    key: 'resetLoadMoreRowsCache',
    value: function resetLoadMoreRowsCache(autoReload) {
      this._loadMoreRowsMemoizer = (0, _createCallbackMemoizer2.default)();

      if (autoReload) {
        this._doStuff(this._lastRenderedStartIndex, this._lastRenderedStopIndex);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;


      return children({
        onRowsRendered: this._onRowsRendered,
        registerChild: this._registerChild
      });
    }
  }, {
    key: '_loadUnloadedRanges',
    value: function _loadUnloadedRanges(unloadedRanges) {
      var _this2 = this;

      var loadMoreRows = this.props.loadMoreRows;


      unloadedRanges.forEach(function (unloadedRange) {
        var promise = loadMoreRows(unloadedRange);
        if (promise) {
          promise.then(function () {
            // Refresh the visible rows if any of them have just been loaded.
            // Otherwise they will remain in their unloaded visual state.
            if (isRangeVisible({
              lastRenderedStartIndex: _this2._lastRenderedStartIndex,
              lastRenderedStopIndex: _this2._lastRenderedStopIndex,
              startIndex: unloadedRange.startIndex,
              stopIndex: unloadedRange.stopIndex
            })) {
              if (_this2._registeredChild) {
                forceUpdateReactVirtualizedComponent(_this2._registeredChild, _this2._lastRenderedStartIndex);
              }
            }
          });
        }
      });
    }
  }, {
    key: '_onRowsRendered',
    value: function _onRowsRendered(_ref) {
      var startIndex = _ref.startIndex,
          stopIndex = _ref.stopIndex;

      this._lastRenderedStartIndex = startIndex;
      this._lastRenderedStopIndex = stopIndex;

      this._doStuff(startIndex, stopIndex);
    }
  }, {
    key: '_doStuff',
    value: function _doStuff(startIndex, stopIndex) {
      var _this3 = this;

      var _props = this.props,
          isRowLoaded = _props.isRowLoaded,
          minimumBatchSize = _props.minimumBatchSize,
          rowCount = _props.rowCount,
          threshold = _props.threshold;


      var unloadedRanges = scanForUnloadedRanges({
        isRowLoaded: isRowLoaded,
        minimumBatchSize: minimumBatchSize,
        rowCount: rowCount,
        startIndex: Math.max(0, startIndex - threshold),
        stopIndex: Math.min(rowCount - 1, stopIndex + threshold)
      });

      // For memoize comparison
      var squashedUnloadedRanges = unloadedRanges.reduce(function (reduced, unloadedRange) {
        return reduced.concat([unloadedRange.startIndex, unloadedRange.stopIndex]);
      }, []);

      this._loadMoreRowsMemoizer({
        callback: function callback() {
          _this3._loadUnloadedRanges(unloadedRanges);
        },
        indices: { squashedUnloadedRanges: squashedUnloadedRanges }
      });
    }
  }, {
    key: '_registerChild',
    value: function _registerChild(registeredChild) {
      this._registeredChild = registeredChild;
    }
  }]);

  return InfiniteLoader;
}(_react.PureComponent);

/**
 * Determines if the specified start/stop range is visible based on the most recently rendered range.
 */


InfiniteLoader.defaultProps = {
  minimumBatchSize: 10,
  rowCount: 0,
  threshold: 15
};
exports.default = InfiniteLoader;
InfiniteLoader.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Function responsible for rendering a virtualized component.
   * This function should implement the following signature:
   * ({ onRowsRendered, registerChild }) => PropTypes.element
   *
   * The specified :onRowsRendered function should be passed through to the child's :onRowsRendered property.
   * The :registerChild callback should be set as the virtualized component's :ref.
   */
  children: _propTypes2.default.func.isRequired,

  /**
   * Function responsible for tracking the loaded state of each row.
   * It should implement the following signature: ({ index: number }): boolean
   */
  isRowLoaded: _propTypes2.default.func.isRequired,

  /**
   * Callback to be invoked when more rows must be loaded.
   * It should implement the following signature: ({ startIndex, stopIndex }): Promise
   * The returned Promise should be resolved once row data has finished loading.
   * It will be used to determine when to refresh the list with the newly-loaded data.
   * This callback may be called multiple times in reaction to a single scroll event.
   */
  loadMoreRows: _propTypes2.default.func.isRequired,

  /**
   * Minimum number of rows to be loaded at a time.
   * This property can be used to batch requests to reduce HTTP requests.
   */
  minimumBatchSize: _propTypes2.default.number.isRequired,

  /**
   * Number of rows in list; can be arbitrary high number if actual number is unknown.
   */
  rowCount: _propTypes2.default.number.isRequired,

  /**
   * Threshold at which to pre-fetch data.
   * A threshold X means that data will start loading when a user scrolls within X rows.
   * This value defaults to 15.
   */
  threshold: _propTypes2.default.number.isRequired
} : {};
function isRangeVisible(_ref2) {
  var lastRenderedStartIndex = _ref2.lastRenderedStartIndex,
      lastRenderedStopIndex = _ref2.lastRenderedStopIndex,
      startIndex = _ref2.startIndex,
      stopIndex = _ref2.stopIndex;

  return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);
}

/**
 * Returns all of the ranges within a larger range that contain unloaded rows.
 */
function scanForUnloadedRanges(_ref3) {
  var isRowLoaded = _ref3.isRowLoaded,
      minimumBatchSize = _ref3.minimumBatchSize,
      rowCount = _ref3.rowCount,
      startIndex = _ref3.startIndex,
      stopIndex = _ref3.stopIndex;

  var unloadedRanges = [];

  var rangeStartIndex = null;
  var rangeStopIndex = null;

  for (var index = startIndex; index <= stopIndex; index++) {
    var loaded = isRowLoaded({ index: index });

    if (!loaded) {
      rangeStopIndex = index;
      if (rangeStartIndex === null) {
        rangeStartIndex = index;
      }
    } else if (rangeStopIndex !== null) {
      unloadedRanges.push({
        startIndex: rangeStartIndex,
        stopIndex: rangeStopIndex
      });

      rangeStartIndex = rangeStopIndex = null;
    }
  }

  // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.
  // Scan forward to try filling our :minimumBatchSize.
  if (rangeStopIndex !== null) {
    var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), rowCount - 1);

    for (var _index = rangeStopIndex + 1; _index <= potentialStopIndex; _index++) {
      if (!isRowLoaded({ index: _index })) {
        rangeStopIndex = _index;
      } else {
        break;
      }
    }

    unloadedRanges.push({
      startIndex: rangeStartIndex,
      stopIndex: rangeStopIndex
    });
  }

  // Check to see if our first range ended prematurely.
  // In this case we should scan backwards to try filling our :minimumBatchSize.
  if (unloadedRanges.length) {
    var firstUnloadedRange = unloadedRanges[0];

    while (firstUnloadedRange.stopIndex - firstUnloadedRange.startIndex + 1 < minimumBatchSize && firstUnloadedRange.startIndex > 0) {
      var _index2 = firstUnloadedRange.startIndex - 1;

      if (!isRowLoaded({ index: _index2 })) {
        firstUnloadedRange.startIndex = _index2;
      } else {
        break;
      }
    }
  }

  return unloadedRanges;
}

/**
 * Since RV components use shallowCompare we need to force a render (even though props haven't changed).
 * However InfiniteLoader may wrap a Grid or it may wrap a Table or List.
 * In the first case the built-in React forceUpdate() method is sufficient to force a re-render,
 * But in the latter cases we need to use the RV-specific forceUpdateGrid() method.
 * Else the inner Grid will not be re-rendered and visuals may be stale.
 *
 * Additionally, while a Grid is scrolling the cells can be cached,
 * So it's important to invalidate that cache by recalculating sizes
 * before forcing a rerender.
 */
function forceUpdateReactVirtualizedComponent(component) {
  var currentIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var recomputeSize = typeof component.recomputeGridSize === 'function' ? component.recomputeGridSize : component.recomputeRowHeights;

  if (recomputeSize) {
    recomputeSize.call(component, currentIndex);
  } else {
    component.forceUpdate();
  }
}
}).call(this,require('_process'))
},{"../utils/createCallbackMemoizer":394,"_process":172,"prop-types":406,"react":433}],364:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InfiniteLoader = undefined;

var _InfiniteLoader = require('./InfiniteLoader');

var _InfiniteLoader2 = _interopRequireDefault(_InfiniteLoader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _InfiniteLoader2.default;
exports.InfiniteLoader = _InfiniteLoader2.default;
},{"./InfiniteLoader":363}],365:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Grid = require('../Grid');

var _Grid2 = _interopRequireDefault(_Grid);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var babelPluginFlowReactPropTypes_proptype_Scroll = require('../Grid').babelPluginFlowReactPropTypes_proptype_Scroll || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellRendererParams = require('../Grid').babelPluginFlowReactPropTypes_proptype_CellRendererParams || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_RenderedSection = require('../Grid').babelPluginFlowReactPropTypes_proptype_RenderedSection || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter = require('../Grid').babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellPosition = require('../Grid').babelPluginFlowReactPropTypes_proptype_CellPosition || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellSize = require('../Grid').babelPluginFlowReactPropTypes_proptype_CellSize || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Alignment = require('../Grid').babelPluginFlowReactPropTypes_proptype_Alignment || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_NoContentRenderer = require('../Grid').babelPluginFlowReactPropTypes_proptype_NoContentRenderer || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_Scroll = require('./types').babelPluginFlowReactPropTypes_proptype_Scroll || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_RenderedRows = require('./types').babelPluginFlowReactPropTypes_proptype_RenderedRows || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_RowRenderer = require('./types').babelPluginFlowReactPropTypes_proptype_RowRenderer || require('prop-types').any;

/**
 * It is inefficient to create and manage a large list of DOM elements within a scrolling container
 * if only a few of those elements are visible. The primary purpose of this component is to improve
 * performance by only rendering the DOM nodes that a user is able to see based on their current
 * scroll position.
 *
 * This component renders a virtualized list of elements with either fixed or dynamic heights.
 */

var List = function (_React$PureComponent) {
  _inherits(List, _React$PureComponent);

  function List() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, List);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = List.__proto__ || Object.getPrototypeOf(List)).call.apply(_ref, [this].concat(args))), _this), _this._cellRenderer = function (_ref2) {
      var rowIndex = _ref2.rowIndex,
          style = _ref2.style,
          isScrolling = _ref2.isScrolling,
          isVisible = _ref2.isVisible,
          key = _ref2.key;
      var rowRenderer = _this.props.rowRenderer;

      // TRICKY The style object is sometimes cached by Grid.
      // This prevents new style objects from bypassing shallowCompare().
      // However as of React 16, style props are auto-frozen (at least in dev mode)
      // Check to make sure we can still modify the style before proceeding.
      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713

      var _Object$getOwnPropert = Object.getOwnPropertyDescriptor(style, 'width'),
          writable = _Object$getOwnPropert.writable;

      if (writable) {
        // By default, List cells should be 100% width.
        // This prevents them from flowing under a scrollbar (if present).
        style.width = '100%';
      }

      return rowRenderer({
        index: rowIndex,
        style: style,
        isScrolling: isScrolling,
        isVisible: isVisible,
        key: key,
        parent: _this
      });
    }, _this._setRef = function (ref) {
      _this.Grid = ref;
    }, _this._onScroll = function (_ref3) {
      var clientHeight = _ref3.clientHeight,
          scrollHeight = _ref3.scrollHeight,
          scrollTop = _ref3.scrollTop;
      var onScroll = _this.props.onScroll;


      onScroll({ clientHeight: clientHeight, scrollHeight: scrollHeight, scrollTop: scrollTop });
    }, _this._onSectionRendered = function (_ref4) {
      var rowOverscanStartIndex = _ref4.rowOverscanStartIndex,
          rowOverscanStopIndex = _ref4.rowOverscanStopIndex,
          rowStartIndex = _ref4.rowStartIndex,
          rowStopIndex = _ref4.rowStopIndex;
      var onRowsRendered = _this.props.onRowsRendered;


      onRowsRendered({
        overscanStartIndex: rowOverscanStartIndex,
        overscanStopIndex: rowOverscanStopIndex,
        startIndex: rowStartIndex,
        stopIndex: rowStopIndex
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(List, [{
    key: 'forceUpdateGrid',
    value: function forceUpdateGrid() {
      if (this.Grid) {
        this.Grid.forceUpdate();
      }
    }

    /** See Grid#getOffsetForCell */

  }, {
    key: 'getOffsetForRow',
    value: function getOffsetForRow(_ref5) {
      var alignment = _ref5.alignment,
          index = _ref5.index;

      if (this.Grid) {
        var _Grid$getOffsetForCel = this.Grid.getOffsetForCell({
          alignment: alignment,
          rowIndex: index,
          columnIndex: 0
        }),
            _scrollTop = _Grid$getOffsetForCel.scrollTop;

        return _scrollTop;
      }
      return 0;
    }

    /** CellMeasurer compatibility */

  }, {
    key: 'invalidateCellSizeAfterRender',
    value: function invalidateCellSizeAfterRender(_ref6) {
      var columnIndex = _ref6.columnIndex,
          rowIndex = _ref6.rowIndex;

      if (this.Grid) {
        this.Grid.invalidateCellSizeAfterRender({
          rowIndex: rowIndex,
          columnIndex: columnIndex
        });
      }
    }

    /** See Grid#measureAllCells */

  }, {
    key: 'measureAllRows',
    value: function measureAllRows() {
      if (this.Grid) {
        this.Grid.measureAllCells();
      }
    }

    /** CellMeasurer compatibility */

  }, {
    key: 'recomputeGridSize',
    value: function recomputeGridSize() {
      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref7$columnIndex = _ref7.columnIndex,
          columnIndex = _ref7$columnIndex === undefined ? 0 : _ref7$columnIndex,
          _ref7$rowIndex = _ref7.rowIndex,
          rowIndex = _ref7$rowIndex === undefined ? 0 : _ref7$rowIndex;

      if (this.Grid) {
        this.Grid.recomputeGridSize({
          rowIndex: rowIndex,
          columnIndex: columnIndex
        });
      }
    }

    /** See Grid#recomputeGridSize */

  }, {
    key: 'recomputeRowHeights',
    value: function recomputeRowHeights() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.recomputeGridSize({
          rowIndex: index,
          columnIndex: 0
        });
      }
    }

    /** See Grid#scrollToPosition */

  }, {
    key: 'scrollToPosition',
    value: function scrollToPosition() {
      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.scrollToPosition({ scrollTop: scrollTop });
      }
    }

    /** See Grid#scrollToCell */

  }, {
    key: 'scrollToRow',
    value: function scrollToRow() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.scrollToCell({
          columnIndex: 0,
          rowIndex: index
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          className = _props.className,
          noRowsRenderer = _props.noRowsRenderer,
          scrollToIndex = _props.scrollToIndex,
          width = _props.width;


      var classNames = (0, _classnames2.default)('ReactVirtualized__List', className);

      return _react2.default.createElement(_Grid2.default, _extends({}, this.props, {
        autoContainerWidth: true,
        cellRenderer: this._cellRenderer,
        className: classNames,
        columnWidth: width,
        columnCount: 1,
        noContentRenderer: noRowsRenderer,
        onScroll: this._onScroll,
        onSectionRendered: this._onSectionRendered,
        ref: this._setRef,
        scrollToRow: scrollToIndex
      }));
    }
  }]);

  return List;
}(_react2.default.PureComponent);

List.defaultProps = {
  autoHeight: false,
  estimatedRowSize: 30,
  onScroll: function onScroll() {},
  noRowsRenderer: function noRowsRenderer() {
    return null;
  },
  onRowsRendered: function onRowsRendered() {},
  overscanIndicesGetter: _Grid.accessibilityOverscanIndicesGetter,
  overscanRowCount: 10,
  scrollToAlignment: 'auto',
  scrollToIndex: -1,
  style: {}
};
List.propTypes = {
  "aria-label": require('prop-types').string,
  autoHeight: require('prop-types').bool.isRequired,
  className: require('prop-types').string,
  estimatedRowSize: require('prop-types').number.isRequired,
  height: require('prop-types').number.isRequired,
  noRowsRenderer: typeof babelPluginFlowReactPropTypes_proptype_NoContentRenderer === 'function' ? babelPluginFlowReactPropTypes_proptype_NoContentRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_NoContentRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_NoContentRenderer : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_NoContentRenderer).isRequired,
  onRowsRendered: require('prop-types').func.isRequired,
  onScroll: require('prop-types').func.isRequired,
  overscanIndicesGetter: typeof babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter === 'function' ? babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter.isRequired ? babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter.isRequired : babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_OverscanIndicesGetter).isRequired,
  overscanRowCount: require('prop-types').number.isRequired,
  rowHeight: typeof babelPluginFlowReactPropTypes_proptype_CellSize === 'function' ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired ? babelPluginFlowReactPropTypes_proptype_CellSize.isRequired : babelPluginFlowReactPropTypes_proptype_CellSize : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_CellSize).isRequired,
  rowRenderer: typeof babelPluginFlowReactPropTypes_proptype_RowRenderer === 'function' ? babelPluginFlowReactPropTypes_proptype_RowRenderer.isRequired ? babelPluginFlowReactPropTypes_proptype_RowRenderer.isRequired : babelPluginFlowReactPropTypes_proptype_RowRenderer : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_RowRenderer).isRequired,
  rowCount: require('prop-types').number.isRequired,
  scrollToAlignment: typeof babelPluginFlowReactPropTypes_proptype_Alignment === 'function' ? babelPluginFlowReactPropTypes_proptype_Alignment.isRequired ? babelPluginFlowReactPropTypes_proptype_Alignment.isRequired : babelPluginFlowReactPropTypes_proptype_Alignment : require('prop-types').shape(babelPluginFlowReactPropTypes_proptype_Alignment).isRequired,
  scrollToIndex: require('prop-types').number.isRequired,
  scrollTop: require('prop-types').number,
  style: require('prop-types').object.isRequired,
  tabIndex: require('prop-types').number,
  width: require('prop-types').number.isRequired
};
exports.default = List;
},{"../Grid":357,"./types":367,"classnames":142,"prop-types":406,"react":433}],366:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _List = require('./List');

Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_List).default;
  }
});
Object.defineProperty(exports, 'List', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_List).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./List":365}],367:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_RowRendererParams', {
  value: {
    index: require('prop-types').number.isRequired,
    isScrolling: require('prop-types').bool.isRequired,
    isVisible: require('prop-types').bool.isRequired,
    key: require('prop-types').string.isRequired,
    parent: require('prop-types').object.isRequired,
    style: require('prop-types').object.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_RowRenderer', {
  value: require('prop-types').func,
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_RenderedRows', {
  value: {
    overscanStartIndex: require('prop-types').number.isRequired,
    overscanStopIndex: require('prop-types').number.isRequired,
    startIndex: require('prop-types').number.isRequired,
    stopIndex: require('prop-types').number.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_Scroll', {
  value: {
    clientHeight: require('prop-types').number.isRequired,
    scrollHeight: require('prop-types').number.isRequired,
    scrollTop: require('prop-types').number.isRequired
  },
  configurable: true
});
},{"prop-types":406,"react":433}],368:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _PositionCache = require('./PositionCache');

var _PositionCache2 = _interopRequireDefault(_PositionCache);

var _requestAnimationTimeout = require('../utils/requestAnimationTimeout');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId = require('../utils/requestAnimationTimeout').babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId || require('prop-types').any;

var emptyObject = {};

/**
 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
 * This improves performance and makes scrolling smoother.
 */
var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = exports.DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;

/**
 * This component efficiently displays arbitrarily positioned cells using windowing techniques.
 * Cell position is determined by an injected `cellPositioner` property.
 * Windowing is vertical; this component does not support horizontal scrolling.
 *
 * Rendering occurs in two phases:
 * 1) First pass uses estimated cell sizes (provided by the cache) to determine how many cells to measure in a batch.
 *    Batch size is chosen using a fast, naive layout algorithm that stacks images in order until the viewport has been filled.
 *    After measurement is complete (componentDidMount or componentDidUpdate) this component evaluates positioned cells
 *    in order to determine if another measurement pass is required (eg if actual cell sizes were less than estimated sizes).
 *    All measurements are permanently cached (keyed by `keyMapper`) for performance purposes.
 * 2) Second pass uses the external `cellPositioner` to layout cells.
 *    At this time the positioner has access to cached size measurements for all cells.
 *    The positions it returns are cached by Masonry for fast access later.
 *    Phase one is repeated if the user scrolls beyond the current layout's bounds.
 *    If the layout is invalidated due to eg a resize, cached positions can be cleared using `recomputeCellPositions()`.
 *
 * Animation constraints:
 *   Simple animations are supported (eg translate/slide into place on initial reveal).
 *   More complex animations are not (eg flying from one position to another on resize).
 *
 * Layout constraints:
 *   This component supports multi-column layout.
 *   The height of each item may vary.
 *   The width of each item must not exceed the width of the column it is "in".
 *   The left position of all items within a column must align.
 *   (Items may not span multiple columns.)
 */

var Masonry = function (_PureComponent) {
  _inherits(Masonry, _PureComponent);

  function Masonry(props, context) {
    _classCallCheck(this, Masonry);

    var _this = _possibleConstructorReturn(this, (Masonry.__proto__ || Object.getPrototypeOf(Masonry)).call(this, props, context));

    _this._invalidateOnUpdateStartIndex = null;
    _this._invalidateOnUpdateStopIndex = null;
    _this._positionCache = new _PositionCache2.default();
    _this._startIndex = null;
    _this._startIndexMemoized = null;
    _this._stopIndex = null;
    _this._stopIndexMemoized = null;


    _this.state = {
      isScrolling: false,
      scrollTop: 0
    };

    _this._debounceResetIsScrollingCallback = _this._debounceResetIsScrollingCallback.bind(_this);
    _this._setScrollingContainerRef = _this._setScrollingContainerRef.bind(_this);
    _this._onScroll = _this._onScroll.bind(_this);
    return _this;
  }

  _createClass(Masonry, [{
    key: 'clearCellPositions',
    value: function clearCellPositions() {
      this._positionCache = new _PositionCache2.default();
      this.forceUpdate();
    }

    // HACK This method signature was intended for Grid

  }, {
    key: 'invalidateCellSizeAfterRender',
    value: function invalidateCellSizeAfterRender(_ref) {
      var index = _ref.rowIndex;

      if (this._invalidateOnUpdateStartIndex === null) {
        this._invalidateOnUpdateStartIndex = index;
        this._invalidateOnUpdateStopIndex = index;
      } else {
        this._invalidateOnUpdateStartIndex = Math.min(this._invalidateOnUpdateStartIndex, index);
        this._invalidateOnUpdateStopIndex = Math.max(this._invalidateOnUpdateStopIndex, index);
      }
    }
  }, {
    key: 'recomputeCellPositions',
    value: function recomputeCellPositions() {
      var stopIndex = this._positionCache.count - 1;

      this._positionCache = new _PositionCache2.default();
      this._populatePositionCache(0, stopIndex);

      this.forceUpdate();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._checkInvalidateOnUpdate();
      this._invokeOnScrollCallback();
      this._invokeOnCellsRenderedCallback();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._checkInvalidateOnUpdate();
      this._invokeOnScrollCallback();
      this._invokeOnCellsRenderedCallback();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._debounceResetIsScrollingId) {
        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._debounceResetIsScrollingId);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var scrollTop = this.props.scrollTop;


      if (scrollTop !== nextProps.scrollTop) {
        this._debounceResetIsScrolling();

        this.setState({
          isScrolling: true,
          scrollTop: nextProps.scrollTop
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          autoHeight = _props.autoHeight,
          cellCount = _props.cellCount,
          cellMeasurerCache = _props.cellMeasurerCache,
          cellRenderer = _props.cellRenderer,
          className = _props.className,
          height = _props.height,
          id = _props.id,
          keyMapper = _props.keyMapper,
          overscanByPixels = _props.overscanByPixels,
          role = _props.role,
          style = _props.style,
          tabIndex = _props.tabIndex,
          width = _props.width;
      var _state = this.state,
          isScrolling = _state.isScrolling,
          scrollTop = _state.scrollTop;


      var children = [];

      var estimateTotalHeight = this._getEstimatedTotalHeight();

      var shortestColumnSize = this._positionCache.shortestColumnSize;
      var measuredCellCount = this._positionCache.count;

      var startIndex = 0;
      var stopIndex = void 0;

      this._positionCache.range(Math.max(0, scrollTop - overscanByPixels), height + overscanByPixels * 2, function (index, left, top) {
        if (typeof stopIndex === 'undefined') {
          startIndex = index;
          stopIndex = index;
        } else {
          startIndex = Math.min(startIndex, index);
          stopIndex = Math.max(stopIndex, index);
        }

        children.push(cellRenderer({
          index: index,
          isScrolling: isScrolling,
          key: keyMapper(index),
          parent: _this2,
          style: {
            height: cellMeasurerCache.getHeight(index),
            left: left,
            position: 'absolute',
            top: top,
            width: cellMeasurerCache.getWidth(index)
          }
        }));
      });

      // We need to measure additional cells for this layout
      if (shortestColumnSize < scrollTop + height + overscanByPixels && measuredCellCount < cellCount) {
        var batchSize = Math.min(cellCount - measuredCellCount, Math.ceil((scrollTop + height + overscanByPixels - shortestColumnSize) / cellMeasurerCache.defaultHeight * width / cellMeasurerCache.defaultWidth));

        for (var _index = measuredCellCount; _index < measuredCellCount + batchSize; _index++) {
          stopIndex = _index;

          children.push(cellRenderer({
            index: _index,
            isScrolling: isScrolling,
            key: keyMapper(_index),
            parent: this,
            style: {
              width: cellMeasurerCache.getWidth(_index)
            }
          }));
        }
      }

      this._startIndex = startIndex;
      this._stopIndex = stopIndex;

      return _react2.default.createElement(
        'div',
        {
          ref: this._setScrollingContainerRef,
          'aria-label': this.props['aria-label'],
          className: (0, _classnames2.default)('ReactVirtualized__Masonry', className),
          id: id,
          onScroll: this._onScroll,
          role: role,
          style: _extends({
            boxSizing: 'border-box',
            direction: 'ltr',
            height: autoHeight ? 'auto' : height,
            overflowX: 'hidden',
            overflowY: estimateTotalHeight < height ? 'hidden' : 'auto',
            position: 'relative',
            width: width,
            WebkitOverflowScrolling: 'touch',
            willChange: 'transform'
          }, style),
          tabIndex: tabIndex },
        _react2.default.createElement(
          'div',
          {
            className: 'ReactVirtualized__Masonry__innerScrollContainer',
            style: {
              width: '100%',
              height: estimateTotalHeight,
              maxWidth: '100%',
              maxHeight: estimateTotalHeight,
              overflow: 'hidden',
              pointerEvents: isScrolling ? 'none' : '',
              position: 'relative'
            } },
          children
        )
      );
    }
  }, {
    key: '_checkInvalidateOnUpdate',
    value: function _checkInvalidateOnUpdate() {
      if (typeof this._invalidateOnUpdateStartIndex === 'number') {
        var _startIndex = this._invalidateOnUpdateStartIndex;
        var _stopIndex = this._invalidateOnUpdateStopIndex;

        this._invalidateOnUpdateStartIndex = null;
        this._invalidateOnUpdateStopIndex = null;

        // Query external layout logic for position of newly-measured cells
        this._populatePositionCache(_startIndex, _stopIndex);

        this.forceUpdate();
      }
    }
  }, {
    key: '_debounceResetIsScrolling',
    value: function _debounceResetIsScrolling() {
      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;


      if (this._debounceResetIsScrollingId) {
        (0, _requestAnimationTimeout.cancelAnimationTimeout)(this._debounceResetIsScrollingId);
      }

      this._debounceResetIsScrollingId = (0, _requestAnimationTimeout.requestAnimationTimeout)(this._debounceResetIsScrollingCallback, scrollingResetTimeInterval);
    }
  }, {
    key: '_debounceResetIsScrollingCallback',
    value: function _debounceResetIsScrollingCallback() {
      this.setState({
        isScrolling: false
      });
    }
  }, {
    key: '_getEstimatedTotalHeight',
    value: function _getEstimatedTotalHeight() {
      var _props2 = this.props,
          cellCount = _props2.cellCount,
          cellMeasurerCache = _props2.cellMeasurerCache,
          width = _props2.width;


      var estimatedColumnCount = Math.floor(width / cellMeasurerCache.defaultWidth);

      return this._positionCache.estimateTotalHeight(cellCount, estimatedColumnCount, cellMeasurerCache.defaultHeight);
    }
  }, {
    key: '_invokeOnScrollCallback',
    value: function _invokeOnScrollCallback() {
      var _props3 = this.props,
          height = _props3.height,
          onScroll = _props3.onScroll;
      var scrollTop = this.state.scrollTop;


      if (this._onScrollMemoized !== scrollTop) {
        onScroll({
          clientHeight: height,
          scrollHeight: this._getEstimatedTotalHeight(),
          scrollTop: scrollTop
        });

        this._onScrollMemoized = scrollTop;
      }
    }
  }, {
    key: '_invokeOnCellsRenderedCallback',
    value: function _invokeOnCellsRenderedCallback() {
      if (this._startIndexMemoized !== this._startIndex || this._stopIndexMemoized !== this._stopIndex) {
        var _onCellsRendered = this.props.onCellsRendered;


        _onCellsRendered({
          startIndex: this._startIndex,
          stopIndex: this._stopIndex
        });

        this._startIndexMemoized = this._startIndex;
        this._stopIndexMemoized = this._stopIndex;
      }
    }
  }, {
    key: '_populatePositionCache',
    value: function _populatePositionCache(startIndex, stopIndex) {
      var _props4 = this.props,
          cellMeasurerCache = _props4.cellMeasurerCache,
          cellPositioner = _props4.cellPositioner;


      for (var _index2 = startIndex; _index2 <= stopIndex; _index2++) {
        var _cellPositioner = cellPositioner(_index2),
            _left = _cellPositioner.left,
            _top = _cellPositioner.top;

        this._positionCache.setPosition(_index2, _left, _top, cellMeasurerCache.getHeight(_index2));
      }
    }
  }, {
    key: '_setScrollingContainerRef',
    value: function _setScrollingContainerRef(ref) {
      this._scrollingContainer = ref;
    }
  }, {
    key: '_onScroll',
    value: function _onScroll(event) {
      var height = this.props.height;


      var eventScrollTop = event.target.scrollTop;

      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
      // This causes a series of rapid renders that is slow for long lists.
      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.
      var scrollTop = Math.min(Math.max(0, this._getEstimatedTotalHeight() - height), eventScrollTop);

      // On iOS, we can arrive at negative offsets by swiping past the start or end.
      // Avoid re-rendering in this case as it can cause problems; see #532 for more.
      if (eventScrollTop !== scrollTop) {
        return;
      }

      // Prevent pointer events from interrupting a smooth scroll
      this._debounceResetIsScrolling();

      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
      // Don't force a re-render if this is the case.
      // The mouse may move faster then the animation frame does.
      // Use requestAnimationFrame to avoid over-updating.
      if (this.state.scrollTop !== scrollTop) {
        this.setState({
          isScrolling: true,
          scrollTop: scrollTop
        });
      }
    }
  }]);

  return Masonry;
}(_react.PureComponent);

Masonry.defaultProps = {
  autoHeight: false,
  keyMapper: identity,
  onCellsRendered: noop,
  onScroll: noop,
  overscanByPixels: 20,
  role: 'grid',
  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,
  style: emptyObject,
  tabIndex: 0
};
exports.default = Masonry;


function identity(value) {
  return value;
}

function noop() {}

if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_CellMeasurerCache', {
  value: {
    defaultHeight: require('prop-types').number.isRequired,
    defaultWidth: require('prop-types').number.isRequired,
    getHeight: require('prop-types').func.isRequired,
    getWidth: require('prop-types').func.isRequired
  },
  configurable: true
});
if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_Positioner', {
  value: require('prop-types').func,
  configurable: true
});
},{"../utils/requestAnimationTimeout":396,"./PositionCache":369,"classnames":142,"prop-types":406,"react":433}],369:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _intervalTree = require('../vendor/intervalTree');

var _intervalTree2 = _interopRequireDefault(_intervalTree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Position cache requirements:
//   O(log(n)) lookup of cells to render for a given viewport size
//   O(1) lookup of shortest measured column (so we know when to enter phase 1)
var PositionCache = function () {
  function PositionCache() {
    _classCallCheck(this, PositionCache);

    this._columnSizeMap = {};
    this._intervalTree = (0, _intervalTree2.default)();
    this._leftMap = {};
  }
  // Tracks the height of each column


  // Store tops and bottoms of each cell for fast intersection lookup.


  // Maps cell index to x coordinates for quick lookup.


  _createClass(PositionCache, [{
    key: 'estimateTotalHeight',
    value: function estimateTotalHeight(cellCount, columnCount, defaultCellHeight) {
      var unmeasuredCellCount = cellCount - this.count;
      return this.tallestColumnSize + Math.ceil(unmeasuredCellCount / columnCount) * defaultCellHeight;
    }

    // Render all cells visible within the viewport range defined.

  }, {
    key: 'range',
    value: function range(scrollTop, clientHeight, renderCallback) {
      var _this = this;

      this._intervalTree.queryInterval(scrollTop, scrollTop + clientHeight, function (_ref) {
        var _ref2 = _slicedToArray(_ref, 3),
            top = _ref2[0],
            _ = _ref2[1],
            index = _ref2[2];

        return renderCallback(index, _this._leftMap[index], top);
      });
    }
  }, {
    key: 'setPosition',
    value: function setPosition(index, left, top, height) {
      this._intervalTree.insert([top, top + height, index]);
      this._leftMap[index] = left;

      var columnSizeMap = this._columnSizeMap;
      var columnHeight = columnSizeMap[left];
      if (columnHeight === undefined) {
        columnSizeMap[left] = top + height;
      } else {
        columnSizeMap[left] = Math.max(columnHeight, top + height);
      }
    }
  }, {
    key: 'count',
    get: function get() {
      return this._intervalTree.count;
    }
  }, {
    key: 'shortestColumnSize',
    get: function get() {
      var columnSizeMap = this._columnSizeMap;

      var size = 0;

      for (var i in columnSizeMap) {
        var height = columnSizeMap[i];
        size = size === 0 ? height : Math.min(size, height);
      }

      return size;
    }
  }, {
    key: 'tallestColumnSize',
    get: function get() {
      var columnSizeMap = this._columnSizeMap;

      var size = 0;

      for (var i in columnSizeMap) {
        var height = columnSizeMap[i];
        size = Math.max(size, height);
      }

      return size;
    }
  }]);

  return PositionCache;
}();

exports.default = PositionCache;
},{"../vendor/intervalTree":399}],370:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCellPositioner;

var babelPluginFlowReactPropTypes_proptype_Positioner = require('./Masonry').babelPluginFlowReactPropTypes_proptype_Positioner || require('prop-types').any;

var babelPluginFlowReactPropTypes_proptype_CellMeasurerCache = require('./Masonry').babelPluginFlowReactPropTypes_proptype_CellMeasurerCache || require('prop-types').any;

function createCellPositioner(_ref) {
  var cellMeasurerCache = _ref.cellMeasurerCache,
      columnCount = _ref.columnCount,
      columnWidth = _ref.columnWidth,
      _ref$spacer = _ref.spacer,
      spacer = _ref$spacer === undefined ? 0 : _ref$spacer;

  var columnHeights = void 0;

  initOrResetDerivedValues();

  function cellPositioner(index) {
    // Find the shortest column and use it.
    var columnIndex = 0;
    for (var i = 1; i < columnHeights.length; i++) {
      if (columnHeights[i] < columnHeights[columnIndex]) {
        columnIndex = i;
      }
    }

    var left = columnIndex * (columnWidth + spacer);
    var top = columnHeights[columnIndex] || 0;

    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;

    return {
      left: left,
      top: top
    };
  }

  function initOrResetDerivedValues() {
    // Track the height of each column.
    // Layout algorithm below always inserts into the shortest column.
    columnHeights = [];
    for (var i = 0; i < columnCount; i++) {
      columnHeights[i] = 0;
    }
  }

  function reset(params) {
    columnCount = params.columnCount;
    columnWidth = params.columnWidth;
    spacer = params.spacer;

    initOrResetDerivedValues();
  }

  cellPositioner.reset = reset;

  return cellPositioner;
}
},{"./Masonry":368,"prop-types":406}],371:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Masonry = exports.createCellPositioner = undefined;

var _createCellPositioner = require('./createCellPositioner');

var _createCellPositioner2 = _interopRequireDefault(_createCellPositioner);

var _Masonry = require('./Masonry');

var _Masonry2 = _interopRequireDefault(_Masonry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Masonry2.default;
exports.createCellPositioner = _createCellPositioner2.default;
exports.Masonry = _Masonry2.default;
},{"./Masonry":368,"./createCellPositioner":370}],372:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _CellMeasurer = require('../CellMeasurer');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Caches measurements for a given cell.
 */
var CellMeasurerCacheDecorator = function () {
  function CellMeasurerCacheDecorator() {
    var _this = this;

    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, CellMeasurerCacheDecorator);

    this.columnWidth = function (_ref) {
      var index = _ref.index;

      _this._cellMeasurerCache.columnWidth({
        index: index + _this._columnIndexOffset
      });
    };

    this.rowHeight = function (_ref2) {
      var index = _ref2.index;

      _this._cellMeasurerCache.rowHeight({
        index: index + _this._rowIndexOffset
      });
    };

    var cellMeasurerCache = params.cellMeasurerCache,
        _params$columnIndexOf = params.columnIndexOffset,
        columnIndexOffset = _params$columnIndexOf === undefined ? 0 : _params$columnIndexOf,
        _params$rowIndexOffse = params.rowIndexOffset,
        rowIndexOffset = _params$rowIndexOffse === undefined ? 0 : _params$rowIndexOffse;


    this._cellMeasurerCache = cellMeasurerCache;
    this._columnIndexOffset = columnIndexOffset;
    this._rowIndexOffset = rowIndexOffset;
  }

  _createClass(CellMeasurerCacheDecorator, [{
    key: 'clear',
    value: function clear(rowIndex, columnIndex) {
      this._cellMeasurerCache.clear(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
    }
  }, {
    key: 'clearAll',
    value: function clearAll() {
      this._cellMeasurerCache.clearAll();
    }
  }, {
    key: 'hasFixedHeight',
    value: function hasFixedHeight() {
      return this._cellMeasurerCache.hasFixedHeight();
    }
  }, {
    key: 'hasFixedWidth',
    value: function hasFixedWidth() {
      return this._cellMeasurerCache.hasFixedWidth();
    }
  }, {
    key: 'getHeight',
    value: function getHeight(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return this._cellMeasurerCache.getHeight(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
    }
  }, {
    key: 'getWidth',
    value: function getWidth(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return this._cellMeasurerCache.getWidth(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
    }
  }, {
    key: 'has',
    value: function has(rowIndex) {
      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      return this._cellMeasurerCache.has(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
    }
  }, {
    key: 'set',
    value: function set(rowIndex, columnIndex, width, height) {
      this._cellMeasurerCache.set(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset, width, height);
    }
  }, {
    key: 'defaultHeight',
    get: function get() {
      return this._cellMeasurerCache.defaultHeight;
    }
  }, {
    key: 'defaultWidth',
    get: function get() {
      return this._cellMeasurerCache.defaultWidth;
    }
  }]);

  return CellMeasurerCacheDecorator;
}();

exports.default = CellMeasurerCacheDecorator;
},{"../CellMeasurer":343}],373:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _CellMeasurerCacheDecorator = require('./CellMeasurerCacheDecorator');

var _CellMeasurerCacheDecorator2 = _interopRequireDefault(_CellMeasurerCacheDecorator);

var _Grid = require('../Grid');

var _Grid2 = _interopRequireDefault(_Grid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SCROLLBAR_SIZE_BUFFER = 20;

/**
 * Renders 1, 2, or 4 Grids depending on configuration.
 * A main (body) Grid will always be rendered.
 * Optionally, 1-2 Grids for sticky header rows will also be rendered.
 * If no sticky columns, only 1 sticky header Grid will be rendered.
 * If sticky columns, 2 sticky header Grids will be rendered.
 */

var MultiGrid = function (_PureComponent) {
  _inherits(MultiGrid, _PureComponent);

  function MultiGrid(props, context) {
    _classCallCheck(this, MultiGrid);

    var _this = _possibleConstructorReturn(this, (MultiGrid.__proto__ || Object.getPrototypeOf(MultiGrid)).call(this, props, context));

    _this.state = {
      scrollLeft: 0,
      scrollTop: 0,
      scrollbarSize: 0,
      showHorizontalScrollbar: false,
      showVerticalScrollbar: false
    };

    _this._deferredInvalidateColumnIndex = null;
    _this._deferredInvalidateRowIndex = null;

    _this._bottomLeftGridRef = _this._bottomLeftGridRef.bind(_this);
    _this._bottomRightGridRef = _this._bottomRightGridRef.bind(_this);
    _this._cellRendererBottomLeftGrid = _this._cellRendererBottomLeftGrid.bind(_this);
    _this._cellRendererBottomRightGrid = _this._cellRendererBottomRightGrid.bind(_this);
    _this._cellRendererTopRightGrid = _this._cellRendererTopRightGrid.bind(_this);
    _this._columnWidthRightGrid = _this._columnWidthRightGrid.bind(_this);
    _this._onScroll = _this._onScroll.bind(_this);
    _this._onScrollbarPresenceChange = _this._onScrollbarPresenceChange.bind(_this);
    _this._onScrollLeft = _this._onScrollLeft.bind(_this);
    _this._onScrollTop = _this._onScrollTop.bind(_this);
    _this._rowHeightBottomGrid = _this._rowHeightBottomGrid.bind(_this);
    _this._topLeftGridRef = _this._topLeftGridRef.bind(_this);
    _this._topRightGridRef = _this._topRightGridRef.bind(_this);
    return _this;
  }

  _createClass(MultiGrid, [{
    key: 'forceUpdateGrids',
    value: function forceUpdateGrids() {
      this._bottomLeftGrid && this._bottomLeftGrid.forceUpdate();
      this._bottomRightGrid && this._bottomRightGrid.forceUpdate();
      this._topLeftGrid && this._topLeftGrid.forceUpdate();
      this._topRightGrid && this._topRightGrid.forceUpdate();
    }

    /** See Grid#invalidateCellSizeAfterRender */

  }, {
    key: 'invalidateCellSizeAfterRender',
    value: function invalidateCellSizeAfterRender() {
      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref$columnIndex = _ref.columnIndex,
          columnIndex = _ref$columnIndex === undefined ? 0 : _ref$columnIndex,
          _ref$rowIndex = _ref.rowIndex,
          rowIndex = _ref$rowIndex === undefined ? 0 : _ref$rowIndex;

      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;
      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;
    }

    /** See Grid#measureAllCells */

  }, {
    key: 'measureAllCells',
    value: function measureAllCells() {
      this._bottomLeftGrid && this._bottomLeftGrid.measureAllCells();
      this._bottomRightGrid && this._bottomRightGrid.measureAllCells();
      this._topLeftGrid && this._topLeftGrid.measureAllCells();
      this._topRightGrid && this._topRightGrid.measureAllCells();
    }

    /** See Grid#recomputeGridSize */

  }, {
    key: 'recomputeGridSize',
    value: function recomputeGridSize() {
      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref2$columnIndex = _ref2.columnIndex,
          columnIndex = _ref2$columnIndex === undefined ? 0 : _ref2$columnIndex,
          _ref2$rowIndex = _ref2.rowIndex,
          rowIndex = _ref2$rowIndex === undefined ? 0 : _ref2$rowIndex;

      var _props = this.props,
          fixedColumnCount = _props.fixedColumnCount,
          fixedRowCount = _props.fixedRowCount;


      var adjustedColumnIndex = Math.max(0, columnIndex - fixedColumnCount);
      var adjustedRowIndex = Math.max(0, rowIndex - fixedRowCount);

      this._bottomLeftGrid && this._bottomLeftGrid.recomputeGridSize({
        columnIndex: columnIndex,
        rowIndex: adjustedRowIndex
      });
      this._bottomRightGrid && this._bottomRightGrid.recomputeGridSize({
        columnIndex: adjustedColumnIndex,
        rowIndex: adjustedRowIndex
      });
      this._topLeftGrid && this._topLeftGrid.recomputeGridSize({
        columnIndex: columnIndex,
        rowIndex: rowIndex
      });
      this._topRightGrid && this._topRightGrid.recomputeGridSize({
        columnIndex: adjustedColumnIndex,
        rowIndex: rowIndex
      });

      this._leftGridWidth = null;
      this._topGridHeight = null;
      this._maybeCalculateCachedStyles(null, this.props, null, this.state);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _props2 = this.props,
          scrollLeft = _props2.scrollLeft,
          scrollTop = _props2.scrollTop;


      if (scrollLeft > 0 || scrollTop > 0) {
        var newState = {};

        if (scrollLeft > 0) {
          newState.scrollLeft = scrollLeft;
        }

        if (scrollTop > 0) {
          newState.scrollTop = scrollTop;
        }

        this.setState(newState);
      }
      this._handleInvalidatedGridSize();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._handleInvalidatedGridSize();
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _props3 = this.props,
          deferredMeasurementCache = _props3.deferredMeasurementCache,
          fixedColumnCount = _props3.fixedColumnCount,
          fixedRowCount = _props3.fixedRowCount;


      this._maybeCalculateCachedStyles(null, this.props, null, this.state);

      if (deferredMeasurementCache) {
        this._deferredMeasurementCacheBottomLeftGrid = fixedRowCount > 0 ? new _CellMeasurerCacheDecorator2.default({
          cellMeasurerCache: deferredMeasurementCache,
          columnIndexOffset: 0,
          rowIndexOffset: fixedRowCount
        }) : deferredMeasurementCache;

        this._deferredMeasurementCacheBottomRightGrid = fixedColumnCount > 0 || fixedRowCount > 0 ? new _CellMeasurerCacheDecorator2.default({
          cellMeasurerCache: deferredMeasurementCache,
          columnIndexOffset: fixedColumnCount,
          rowIndexOffset: fixedRowCount
        }) : deferredMeasurementCache;

        this._deferredMeasurementCacheTopRightGrid = fixedColumnCount > 0 ? new _CellMeasurerCacheDecorator2.default({
          cellMeasurerCache: deferredMeasurementCache,
          columnIndexOffset: fixedColumnCount,
          rowIndexOffset: 0
        }) : deferredMeasurementCache;
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextState) {
      var _props4 = this.props,
          columnWidth = _props4.columnWidth,
          fixedColumnCount = _props4.fixedColumnCount,
          fixedRowCount = _props4.fixedRowCount,
          rowHeight = _props4.rowHeight;


      if (columnWidth !== nextProps.columnWidth || fixedColumnCount !== nextProps.fixedColumnCount) {
        this._leftGridWidth = null;
      }

      if (fixedRowCount !== nextProps.fixedRowCount || rowHeight !== nextProps.rowHeight) {
        this._topGridHeight = null;
      }

      if (nextProps.scrollLeft !== this.props.scrollLeft || nextProps.scrollTop !== this.props.scrollTop) {
        var newState = {};

        if (nextProps.scrollLeft != null && nextProps.scrollLeft >= 0) {
          newState.scrollLeft = nextProps.scrollLeft;
        }

        if (nextProps.scrollTop != null && nextProps.scrollTop >= 0) {
          newState.scrollTop = nextProps.scrollTop;
        }

        this.setState(newState);
      }

      this._maybeCalculateCachedStyles(this.props, nextProps, this.state, nextState);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props5 = this.props,
          onScroll = _props5.onScroll,
          onSectionRendered = _props5.onSectionRendered,
          scrollLeftProp = _props5.scrollLeft,
          scrollToColumn = _props5.scrollToColumn,
          scrollTopProp = _props5.scrollTop,
          scrollToRow = _props5.scrollToRow,
          rest = _objectWithoutProperties(_props5, ['onScroll', 'onSectionRendered', 'scrollLeft', 'scrollToColumn', 'scrollTop', 'scrollToRow']);

      // Don't render any of our Grids if there are no cells.
      // This mirrors what Grid does,
      // And prevents us from recording inaccurage measurements when used with CellMeasurer.


      if (this.props.width === 0 || this.props.height === 0) {
        return null;
      }

      // scrollTop and scrollLeft props are explicitly filtered out and ignored

      var _state = this.state,
          scrollLeft = _state.scrollLeft,
          scrollTop = _state.scrollTop;


      return _react2.default.createElement(
        'div',
        { style: this._containerOuterStyle },
        _react2.default.createElement(
          'div',
          { style: this._containerTopStyle },
          this._renderTopLeftGrid(rest),
          this._renderTopRightGrid(_extends({}, rest, {
            onScroll: onScroll,
            scrollLeft: scrollLeft
          }))
        ),
        _react2.default.createElement(
          'div',
          { style: this._containerBottomStyle },
          this._renderBottomLeftGrid(_extends({}, rest, {
            onScroll: onScroll,
            scrollTop: scrollTop
          })),
          this._renderBottomRightGrid(_extends({}, rest, {
            onScroll: onScroll,
            onSectionRendered: onSectionRendered,
            scrollLeft: scrollLeft,
            scrollToColumn: scrollToColumn,
            scrollToRow: scrollToRow,
            scrollTop: scrollTop
          }))
        )
      );
    }
  }, {
    key: '_bottomLeftGridRef',
    value: function _bottomLeftGridRef(ref) {
      this._bottomLeftGrid = ref;
    }
  }, {
    key: '_bottomRightGridRef',
    value: function _bottomRightGridRef(ref) {
      this._bottomRightGrid = ref;
    }
  }, {
    key: '_cellRendererBottomLeftGrid',
    value: function _cellRendererBottomLeftGrid(_ref3) {
      var rowIndex = _ref3.rowIndex,
          rest = _objectWithoutProperties(_ref3, ['rowIndex']);

      var _props6 = this.props,
          cellRenderer = _props6.cellRenderer,
          fixedRowCount = _props6.fixedRowCount,
          rowCount = _props6.rowCount;


      if (rowIndex === rowCount - fixedRowCount) {
        return _react2.default.createElement('div', {
          key: rest.key,
          style: _extends({}, rest.style, {
            height: SCROLLBAR_SIZE_BUFFER
          })
        });
      } else {
        return cellRenderer(_extends({}, rest, {
          parent: this,
          rowIndex: rowIndex + fixedRowCount
        }));
      }
    }
  }, {
    key: '_cellRendererBottomRightGrid',
    value: function _cellRendererBottomRightGrid(_ref4) {
      var columnIndex = _ref4.columnIndex,
          rowIndex = _ref4.rowIndex,
          rest = _objectWithoutProperties(_ref4, ['columnIndex', 'rowIndex']);

      var _props7 = this.props,
          cellRenderer = _props7.cellRenderer,
          fixedColumnCount = _props7.fixedColumnCount,
          fixedRowCount = _props7.fixedRowCount;


      return cellRenderer(_extends({}, rest, {
        columnIndex: columnIndex + fixedColumnCount,
        parent: this,
        rowIndex: rowIndex + fixedRowCount
      }));
    }
  }, {
    key: '_cellRendererTopRightGrid',
    value: function _cellRendererTopRightGrid(_ref5) {
      var columnIndex = _ref5.columnIndex,
          rest = _objectWithoutProperties(_ref5, ['columnIndex']);

      var _props8 = this.props,
          cellRenderer = _props8.cellRenderer,
          columnCount = _props8.columnCount,
          fixedColumnCount = _props8.fixedColumnCount;


      if (columnIndex === columnCount - fixedColumnCount) {
        return _react2.default.createElement('div', {
          key: rest.key,
          style: _extends({}, rest.style, {
            width: SCROLLBAR_SIZE_BUFFER
          })
        });
      } else {
        return cellRenderer(_extends({}, rest, {
          columnIndex: columnIndex + fixedColumnCount,
          parent: this
        }));
      }
    }
  }, {
    key: '_columnWidthRightGrid',
    value: function _columnWidthRightGrid(_ref6) {
      var index = _ref6.index;
      var _props9 = this.props,
          columnCount = _props9.columnCount,
          fixedColumnCount = _props9.fixedColumnCount,
          columnWidth = _props9.columnWidth;
      var _state2 = this.state,
          scrollbarSize = _state2.scrollbarSize,
          showHorizontalScrollbar = _state2.showHorizontalScrollbar;

      // An extra cell is added to the count
      // This gives the smaller Grid extra room for offset,
      // In case the main (bottom right) Grid has a scrollbar
      // If no scrollbar, the extra space is overflow:hidden anyway

      if (showHorizontalScrollbar && index === columnCount - fixedColumnCount) {
        return scrollbarSize;
      }

      return typeof columnWidth === 'function' ? columnWidth({ index: index + fixedColumnCount }) : columnWidth;
    }
  }, {
    key: '_getBottomGridHeight',
    value: function _getBottomGridHeight(props) {
      var height = props.height;


      var topGridHeight = this._getTopGridHeight(props);

      return height - topGridHeight;
    }
  }, {
    key: '_getLeftGridWidth',
    value: function _getLeftGridWidth(props) {
      var fixedColumnCount = props.fixedColumnCount,
          columnWidth = props.columnWidth;


      if (this._leftGridWidth == null) {
        if (typeof columnWidth === 'function') {
          var leftGridWidth = 0;

          for (var index = 0; index < fixedColumnCount; index++) {
            leftGridWidth += columnWidth({ index: index });
          }

          this._leftGridWidth = leftGridWidth;
        } else {
          this._leftGridWidth = columnWidth * fixedColumnCount;
        }
      }

      return this._leftGridWidth;
    }
  }, {
    key: '_getRightGridWidth',
    value: function _getRightGridWidth(props) {
      var width = props.width;


      var leftGridWidth = this._getLeftGridWidth(props);

      return width - leftGridWidth;
    }
  }, {
    key: '_getTopGridHeight',
    value: function _getTopGridHeight(props) {
      var fixedRowCount = props.fixedRowCount,
          rowHeight = props.rowHeight;


      if (this._topGridHeight == null) {
        if (typeof rowHeight === 'function') {
          var topGridHeight = 0;

          for (var index = 0; index < fixedRowCount; index++) {
            topGridHeight += rowHeight({ index: index });
          }

          this._topGridHeight = topGridHeight;
        } else {
          this._topGridHeight = rowHeight * fixedRowCount;
        }
      }

      return this._topGridHeight;
    }
  }, {
    key: '_handleInvalidatedGridSize',
    value: function _handleInvalidatedGridSize() {
      if (typeof this._deferredInvalidateColumnIndex === 'number') {
        var columnIndex = this._deferredInvalidateColumnIndex;
        var rowIndex = this._deferredInvalidateRowIndex;

        this._deferredInvalidateColumnIndex = null;
        this._deferredInvalidateRowIndex = null;

        this.recomputeGridSize({
          columnIndex: columnIndex,
          rowIndex: rowIndex
        });
        this.forceUpdate();
      }
    }

    /**
     * Avoid recreating inline styles each render; this bypasses Grid's shallowCompare.
     * This method recalculates styles only when specific props change.
     */

  }, {
    key: '_maybeCalculateCachedStyles',
    value: function _maybeCalculateCachedStyles(prevProps, props) {
      var columnWidth = props.columnWidth,
          enableFixedColumnScroll = props.enableFixedColumnScroll,
          enableFixedRowScroll = props.enableFixedRowScroll,
          height = props.height,
          fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount,
          rowHeight = props.rowHeight,
          style = props.style,
          styleBottomLeftGrid = props.styleBottomLeftGrid,
          styleBottomRightGrid = props.styleBottomRightGrid,
          styleTopLeftGrid = props.styleTopLeftGrid,
          styleTopRightGrid = props.styleTopRightGrid,
          width = props.width;


      var firstRender = !prevProps;
      var sizeChange = firstRender || height !== prevProps.height || width !== prevProps.width;
      var leftSizeChange = firstRender || columnWidth !== prevProps.columnWidth || fixedColumnCount !== prevProps.fixedColumnCount;
      var topSizeChange = firstRender || fixedRowCount !== prevProps.fixedRowCount || rowHeight !== prevProps.rowHeight;

      if (firstRender || sizeChange || style !== prevProps.style) {
        this._containerOuterStyle = _extends({
          height: height,
          overflow: 'visible', // Let :focus outline show through
          width: width
        }, style);
      }

      if (firstRender || sizeChange || topSizeChange) {
        this._containerTopStyle = {
          height: this._getTopGridHeight(props),
          position: 'relative',
          width: width
        };

        this._containerBottomStyle = {
          height: height - this._getTopGridHeight(props),
          overflow: 'visible', // Let :focus outline show through
          position: 'relative',
          width: width
        };
      }

      if (firstRender || styleBottomLeftGrid !== prevProps.styleBottomLeftGrid) {
        this._bottomLeftGridStyle = _extends({
          left: 0,
          overflowX: 'hidden',
          overflowY: enableFixedColumnScroll ? 'auto' : 'hidden',
          position: 'absolute'
        }, styleBottomLeftGrid);
      }

      if (firstRender || leftSizeChange || styleBottomRightGrid !== prevProps.styleBottomRightGrid) {
        this._bottomRightGridStyle = _extends({
          left: this._getLeftGridWidth(props),
          position: 'absolute'
        }, styleBottomRightGrid);
      }

      if (firstRender || styleTopLeftGrid !== prevProps.styleTopLeftGrid) {
        this._topLeftGridStyle = _extends({
          left: 0,
          overflowX: 'hidden',
          overflowY: 'hidden',
          position: 'absolute',
          top: 0
        }, styleTopLeftGrid);
      }

      if (firstRender || leftSizeChange || styleTopRightGrid !== prevProps.styleTopRightGrid) {
        this._topRightGridStyle = _extends({
          left: this._getLeftGridWidth(props),
          overflowX: enableFixedRowScroll ? 'auto' : 'hidden',
          overflowY: 'hidden',
          position: 'absolute',
          top: 0
        }, styleTopRightGrid);
      }
    }
  }, {
    key: '_onScroll',
    value: function _onScroll(scrollInfo) {
      var scrollLeft = scrollInfo.scrollLeft,
          scrollTop = scrollInfo.scrollTop;

      this.setState({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });
      var onScroll = this.props.onScroll;
      if (onScroll) {
        onScroll(scrollInfo);
      }
    }
  }, {
    key: '_onScrollbarPresenceChange',
    value: function _onScrollbarPresenceChange(_ref7) {
      var horizontal = _ref7.horizontal,
          size = _ref7.size,
          vertical = _ref7.vertical;
      var _state3 = this.state,
          showHorizontalScrollbar = _state3.showHorizontalScrollbar,
          showVerticalScrollbar = _state3.showVerticalScrollbar;


      if (horizontal !== showHorizontalScrollbar || vertical !== showVerticalScrollbar) {
        this.setState({
          scrollbarSize: size,
          showHorizontalScrollbar: horizontal,
          showVerticalScrollbar: vertical
        });
      }
    }
  }, {
    key: '_onScrollLeft',
    value: function _onScrollLeft(scrollInfo) {
      var scrollLeft = scrollInfo.scrollLeft;

      this._onScroll({
        scrollLeft: scrollLeft,
        scrollTop: this.state.scrollTop
      });
    }
  }, {
    key: '_onScrollTop',
    value: function _onScrollTop(scrollInfo) {
      var scrollTop = scrollInfo.scrollTop;

      this._onScroll({
        scrollTop: scrollTop,
        scrollLeft: this.state.scrollLeft
      });
    }
  }, {
    key: '_renderBottomLeftGrid',
    value: function _renderBottomLeftGrid(props) {
      var enableFixedColumnScroll = props.enableFixedColumnScroll,
          fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount,
          rowCount = props.rowCount,
          scrollTop = props.scrollTop;
      var showVerticalScrollbar = this.state.showVerticalScrollbar;


      if (!fixedColumnCount) {
        return null;
      }

      var additionalRowCount = showVerticalScrollbar ? 1 : 0;

      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
        cellRenderer: this._cellRendererBottomLeftGrid,
        className: this.props.classNameBottomLeftGrid,
        columnCount: fixedColumnCount,
        deferredMeasurementCache: this._deferredMeasurementCacheBottomLeftGrid,
        height: this._getBottomGridHeight(props),
        onScroll: enableFixedColumnScroll ? this._onScrollTop : undefined,
        ref: this._bottomLeftGridRef,
        rowCount: Math.max(0, rowCount - fixedRowCount) + additionalRowCount,
        rowHeight: this._rowHeightBottomGrid,
        scrollTop: scrollTop,
        style: this._bottomLeftGridStyle,
        tabIndex: null,
        width: this._getLeftGridWidth(props)
      }));
    }
  }, {
    key: '_renderBottomRightGrid',
    value: function _renderBottomRightGrid(props) {
      var columnCount = props.columnCount,
          fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount,
          rowCount = props.rowCount,
          scrollToColumn = props.scrollToColumn,
          scrollToRow = props.scrollToRow;


      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
        cellRenderer: this._cellRendererBottomRightGrid,
        className: this.props.classNameBottomRightGrid,
        columnCount: Math.max(0, columnCount - fixedColumnCount),
        columnWidth: this._columnWidthRightGrid,
        deferredMeasurementCache: this._deferredMeasurementCacheBottomRightGrid,
        height: this._getBottomGridHeight(props),
        onScroll: this._onScroll,
        onScrollbarPresenceChange: this._onScrollbarPresenceChange,
        ref: this._bottomRightGridRef,
        rowCount: Math.max(0, rowCount - fixedRowCount),
        rowHeight: this._rowHeightBottomGrid,
        scrollToColumn: scrollToColumn - fixedColumnCount,
        scrollToRow: scrollToRow - fixedRowCount,
        style: this._bottomRightGridStyle,
        width: this._getRightGridWidth(props)
      }));
    }
  }, {
    key: '_renderTopLeftGrid',
    value: function _renderTopLeftGrid(props) {
      var fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount;


      if (!fixedColumnCount || !fixedRowCount) {
        return null;
      }

      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
        className: this.props.classNameTopLeftGrid,
        columnCount: fixedColumnCount,
        height: this._getTopGridHeight(props),
        ref: this._topLeftGridRef,
        rowCount: fixedRowCount,
        style: this._topLeftGridStyle,
        tabIndex: null,
        width: this._getLeftGridWidth(props)
      }));
    }
  }, {
    key: '_renderTopRightGrid',
    value: function _renderTopRightGrid(props) {
      var columnCount = props.columnCount,
          enableFixedRowScroll = props.enableFixedRowScroll,
          fixedColumnCount = props.fixedColumnCount,
          fixedRowCount = props.fixedRowCount,
          scrollLeft = props.scrollLeft;
      var showHorizontalScrollbar = this.state.showHorizontalScrollbar;


      if (!fixedRowCount) {
        return null;
      }

      var additionalColumnCount = showHorizontalScrollbar ? 1 : 0;

      return _react2.default.createElement(_Grid2.default, _extends({}, props, {
        cellRenderer: this._cellRendererTopRightGrid,
        className: this.props.classNameTopRightGrid,
        columnCount: Math.max(0, columnCount - fixedColumnCount) + additionalColumnCount,
        columnWidth: this._columnWidthRightGrid,
        deferredMeasurementCache: this._deferredMeasurementCacheTopRightGrid,
        height: this._getTopGridHeight(props),
        onScroll: enableFixedRowScroll ? this._onScrollLeft : undefined,
        ref: this._topRightGridRef,
        rowCount: fixedRowCount,
        scrollLeft: scrollLeft,
        style: this._topRightGridStyle,
        tabIndex: null,
        width: this._getRightGridWidth(props)
      }));
    }
  }, {
    key: '_rowHeightBottomGrid',
    value: function _rowHeightBottomGrid(_ref8) {
      var index = _ref8.index;
      var _props10 = this.props,
          fixedRowCount = _props10.fixedRowCount,
          rowCount = _props10.rowCount,
          rowHeight = _props10.rowHeight;
      var _state4 = this.state,
          scrollbarSize = _state4.scrollbarSize,
          showVerticalScrollbar = _state4.showVerticalScrollbar;

      // An extra cell is added to the count
      // This gives the smaller Grid extra room for offset,
      // In case the main (bottom right) Grid has a scrollbar
      // If no scrollbar, the extra space is overflow:hidden anyway

      if (showVerticalScrollbar && index === rowCount - fixedRowCount) {
        return scrollbarSize;
      }

      return typeof rowHeight === 'function' ? rowHeight({ index: index + fixedRowCount }) : rowHeight;
    }
  }, {
    key: '_topLeftGridRef',
    value: function _topLeftGridRef(ref) {
      this._topLeftGrid = ref;
    }
  }, {
    key: '_topRightGridRef',
    value: function _topRightGridRef(ref) {
      this._topRightGrid = ref;
    }
  }]);

  return MultiGrid;
}(_react.PureComponent);

MultiGrid.defaultProps = {
  classNameBottomLeftGrid: '',
  classNameBottomRightGrid: '',
  classNameTopLeftGrid: '',
  classNameTopRightGrid: '',
  enableFixedColumnScroll: false,
  enableFixedRowScroll: false,
  fixedColumnCount: 0,
  fixedRowCount: 0,
  scrollToColumn: -1,
  scrollToRow: -1,
  style: {},
  styleBottomLeftGrid: {},
  styleBottomRightGrid: {},
  styleTopLeftGrid: {},
  styleTopRightGrid: {}
};
exports.default = MultiGrid;
MultiGrid.propTypes = process.env.NODE_ENV !== "production" ? {
  classNameBottomLeftGrid: _propTypes2.default.string.isRequired,
  classNameBottomRightGrid: _propTypes2.default.string.isRequired,
  classNameTopLeftGrid: _propTypes2.default.string.isRequired,
  classNameTopRightGrid: _propTypes2.default.string.isRequired,
  enableFixedColumnScroll: _propTypes2.default.bool.isRequired,
  enableFixedRowScroll: _propTypes2.default.bool.isRequired,
  fixedColumnCount: _propTypes2.default.number.isRequired,
  fixedRowCount: _propTypes2.default.number.isRequired,
  style: _propTypes2.default.object.isRequired,
  styleBottomLeftGrid: _propTypes2.default.object.isRequired,
  styleBottomRightGrid: _propTypes2.default.object.isRequired,
  styleTopLeftGrid: _propTypes2.default.object.isRequired,
  styleTopRightGrid: _propTypes2.default.object.isRequired
} : {};
}).call(this,require('_process'))
},{"../Grid":357,"./CellMeasurerCacheDecorator":372,"_process":172,"prop-types":406,"react":433}],374:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiGrid = undefined;

var _MultiGrid = require('./MultiGrid');

var _MultiGrid2 = _interopRequireDefault(_MultiGrid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _MultiGrid2.default;
exports.MultiGrid = _MultiGrid2.default;
},{"./MultiGrid":373}],375:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * HOC that simplifies the process of synchronizing scrolling between two or more virtualized components.
 */
var ScrollSync = function (_PureComponent) {
  _inherits(ScrollSync, _PureComponent);

  function ScrollSync(props, context) {
    _classCallCheck(this, ScrollSync);

    var _this = _possibleConstructorReturn(this, (ScrollSync.__proto__ || Object.getPrototypeOf(ScrollSync)).call(this, props, context));

    _this.state = {
      clientHeight: 0,
      clientWidth: 0,
      scrollHeight: 0,
      scrollLeft: 0,
      scrollTop: 0,
      scrollWidth: 0
    };

    _this._onScroll = _this._onScroll.bind(_this);
    return _this;
  }

  _createClass(ScrollSync, [{
    key: 'render',
    value: function render() {
      var children = this.props.children;
      var _state = this.state,
          clientHeight = _state.clientHeight,
          clientWidth = _state.clientWidth,
          scrollHeight = _state.scrollHeight,
          scrollLeft = _state.scrollLeft,
          scrollTop = _state.scrollTop,
          scrollWidth = _state.scrollWidth;


      return children({
        clientHeight: clientHeight,
        clientWidth: clientWidth,
        onScroll: this._onScroll,
        scrollHeight: scrollHeight,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        scrollWidth: scrollWidth
      });
    }
  }, {
    key: '_onScroll',
    value: function _onScroll(_ref) {
      var clientHeight = _ref.clientHeight,
          clientWidth = _ref.clientWidth,
          scrollHeight = _ref.scrollHeight,
          scrollLeft = _ref.scrollLeft,
          scrollTop = _ref.scrollTop,
          scrollWidth = _ref.scrollWidth;

      this.setState({
        clientHeight: clientHeight,
        clientWidth: clientWidth,
        scrollHeight: scrollHeight,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        scrollWidth: scrollWidth
      });
    }
  }]);

  return ScrollSync;
}(_react.PureComponent);

exports.default = ScrollSync;
ScrollSync.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Function responsible for rendering 2 or more virtualized components.
   * This function should implement the following signature:
   * ({ onScroll, scrollLeft, scrollTop }) => PropTypes.element
   */
  children: _propTypes2.default.func.isRequired
} : {};
}).call(this,require('_process'))
},{"_process":172,"prop-types":406,"react":433}],376:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollSync = undefined;

var _ScrollSync = require('./ScrollSync');

var _ScrollSync2 = _interopRequireDefault(_ScrollSync);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _ScrollSync2.default;
exports.ScrollSync = _ScrollSync2.default;
},{"./ScrollSync":375}],377:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _defaultHeaderRenderer = require('./defaultHeaderRenderer');

var _defaultHeaderRenderer2 = _interopRequireDefault(_defaultHeaderRenderer);

var _defaultCellRenderer = require('./defaultCellRenderer');

var _defaultCellRenderer2 = _interopRequireDefault(_defaultCellRenderer);

var _defaultCellDataGetter = require('./defaultCellDataGetter');

var _defaultCellDataGetter2 = _interopRequireDefault(_defaultCellDataGetter);

var _SortDirection = require('./SortDirection');

var _SortDirection2 = _interopRequireDefault(_SortDirection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Describes the header and cell contents of a table column.
 */
var Column = function (_Component) {
  _inherits(Column, _Component);

  function Column() {
    _classCallCheck(this, Column);

    return _possibleConstructorReturn(this, (Column.__proto__ || Object.getPrototypeOf(Column)).apply(this, arguments));
  }

  return Column;
}(_react.Component);

Column.defaultProps = {
  cellDataGetter: _defaultCellDataGetter2.default,
  cellRenderer: _defaultCellRenderer2.default,
  defaultSortDirection: _SortDirection2.default.ASC,
  flexGrow: 0,
  flexShrink: 1,
  headerRenderer: _defaultHeaderRenderer2.default,
  style: {}
};
exports.default = Column;
Column.propTypes = process.env.NODE_ENV !== "production" ? {
  /** Optional aria-label value to set on the column header */
  'aria-label': _propTypes2.default.string,

  /**
   * Callback responsible for returning a cell's data, given its :dataKey
   * ({ columnData: any, dataKey: string, rowData: any }): any
   */
  cellDataGetter: _propTypes2.default.func,

  /**
   * Callback responsible for rendering a cell's contents.
   * ({ cellData: any, columnData: any, dataKey: string, rowData: any, rowIndex: number }): node
   */
  cellRenderer: _propTypes2.default.func,

  /** Optional CSS class to apply to cell */
  className: _propTypes2.default.string,

  /** Optional additional data passed to this column's :cellDataGetter */
  columnData: _propTypes2.default.object,

  /** Uniquely identifies the row-data attribute corresponding to this cell */
  dataKey: _propTypes2.default.any.isRequired,

  /** Optional direction to be used when clicked the first time */
  defaultSortDirection: _propTypes2.default.oneOf([_SortDirection2.default.ASC, _SortDirection2.default.DESC]),

  /** If sort is enabled for the table at large, disable it for this column */
  disableSort: _propTypes2.default.bool,

  /** Flex grow style; defaults to 0 */
  flexGrow: _propTypes2.default.number,

  /** Flex shrink style; defaults to 1 */
  flexShrink: _propTypes2.default.number,

  /** Optional CSS class to apply to this column's header */
  headerClassName: _propTypes2.default.string,

  /**
   * Optional callback responsible for rendering a column header contents.
   * ({ columnData: object, dataKey: string, disableSort: boolean, label: node, sortBy: string, sortDirection: string }): PropTypes.node
   */
  headerRenderer: _propTypes2.default.func.isRequired,

  /** Optional inline style to apply to this column's header */
  headerStyle: _propTypes2.default.object,

  /** Optional id to set on the column header */
  id: _propTypes2.default.string,

  /** Header label for this column */
  label: _propTypes2.default.node,

  /** Maximum width of column; this property will only be used if :flexGrow is > 0. */
  maxWidth: _propTypes2.default.number,

  /** Minimum width of column. */
  minWidth: _propTypes2.default.number,

  /** Optional inline style to apply to cell */
  style: _propTypes2.default.object,

  /** Flex basis (width) for this column; This value can grow or shrink based on :flexGrow and :flexShrink properties. */
  width: _propTypes2.default.number.isRequired
} : {};
}).call(this,require('_process'))
},{"./SortDirection":378,"./defaultCellDataGetter":381,"./defaultCellRenderer":382,"./defaultHeaderRenderer":383,"_process":172,"prop-types":406,"react":433}],378:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var SortDirection = {
  /**
   * Sort items in ascending order.
   * This means arranging from the lowest value to the highest (e.g. a-z, 0-9).
   */
  ASC: 'ASC',

  /**
   * Sort items in descending order.
   * This means arranging from the highest value to the lowest (e.g. z-a, 9-0).
   */
  DESC: 'DESC'
};

exports.default = SortDirection;
},{}],379:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SortIndicator;

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SortDirection = require('./SortDirection');

var _SortDirection2 = _interopRequireDefault(_SortDirection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Displayed beside a header to indicate that a Table is currently sorted by this column.
 */
function SortIndicator(_ref) {
  var sortDirection = _ref.sortDirection;

  var classNames = (0, _classnames2.default)('ReactVirtualized__Table__sortableHeaderIcon', {
    'ReactVirtualized__Table__sortableHeaderIcon--ASC': sortDirection === _SortDirection2.default.ASC,
    'ReactVirtualized__Table__sortableHeaderIcon--DESC': sortDirection === _SortDirection2.default.DESC
  });

  return _react2.default.createElement(
    'svg',
    { className: classNames, width: 18, height: 18, viewBox: '0 0 24 24' },
    sortDirection === _SortDirection2.default.ASC ? _react2.default.createElement('path', { d: 'M7 14l5-5 5 5z' }) : _react2.default.createElement('path', { d: 'M7 10l5 5 5-5z' }),
    _react2.default.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
  );
}

SortIndicator.propTypes = process.env.NODE_ENV !== "production" ? {
  sortDirection: _propTypes2.default.oneOf([_SortDirection2.default.ASC, _SortDirection2.default.DESC])
} : {};
}).call(this,require('_process'))
},{"./SortDirection":378,"_process":172,"classnames":142,"prop-types":406,"react":433}],380:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Column = require('./Column');

var _Column2 = _interopRequireDefault(_Column);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _Grid2 = require('../Grid');

var _Grid3 = _interopRequireDefault(_Grid2);

var _defaultRowRenderer = require('./defaultRowRenderer');

var _defaultRowRenderer2 = _interopRequireDefault(_defaultRowRenderer);

var _defaultHeaderRowRenderer = require('./defaultHeaderRowRenderer');

var _defaultHeaderRowRenderer2 = _interopRequireDefault(_defaultHeaderRowRenderer);

var _SortDirection = require('./SortDirection');

var _SortDirection2 = _interopRequireDefault(_SortDirection);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var babelPluginFlowReactPropTypes_proptype_CellPosition = require('../Grid').babelPluginFlowReactPropTypes_proptype_CellPosition || require('prop-types').any;

/**
 * Table component with fixed headers and virtualized rows for improved performance with large data sets.
 * This component expects explicit width, height, and padding parameters.
 */
var Table = function (_PureComponent) {
  _inherits(Table, _PureComponent);

  function Table(props) {
    _classCallCheck(this, Table);

    var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));

    _this.state = {
      scrollbarWidth: 0
    };

    _this._createColumn = _this._createColumn.bind(_this);
    _this._createRow = _this._createRow.bind(_this);
    _this._onScroll = _this._onScroll.bind(_this);
    _this._onSectionRendered = _this._onSectionRendered.bind(_this);
    _this._setRef = _this._setRef.bind(_this);
    return _this;
  }

  _createClass(Table, [{
    key: 'forceUpdateGrid',
    value: function forceUpdateGrid() {
      if (this.Grid) {
        this.Grid.forceUpdate();
      }
    }

    /** See Grid#getOffsetForCell */

  }, {
    key: 'getOffsetForRow',
    value: function getOffsetForRow(_ref) {
      var alignment = _ref.alignment,
          index = _ref.index;

      if (this.Grid) {
        var _Grid$getOffsetForCel = this.Grid.getOffsetForCell({
          alignment: alignment,
          rowIndex: index
        }),
            scrollTop = _Grid$getOffsetForCel.scrollTop;

        return scrollTop;
      }
      return 0;
    }

    /** CellMeasurer compatibility */

  }, {
    key: 'invalidateCellSizeAfterRender',
    value: function invalidateCellSizeAfterRender(_ref2) {
      var columnIndex = _ref2.columnIndex,
          rowIndex = _ref2.rowIndex;

      if (this.Grid) {
        this.Grid.invalidateCellSizeAfterRender({
          rowIndex: rowIndex,
          columnIndex: columnIndex
        });
      }
    }

    /** See Grid#measureAllCells */

  }, {
    key: 'measureAllRows',
    value: function measureAllRows() {
      if (this.Grid) {
        this.Grid.measureAllCells();
      }
    }

    /** CellMeasurer compatibility */

  }, {
    key: 'recomputeGridSize',
    value: function recomputeGridSize() {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$columnIndex = _ref3.columnIndex,
          columnIndex = _ref3$columnIndex === undefined ? 0 : _ref3$columnIndex,
          _ref3$rowIndex = _ref3.rowIndex,
          rowIndex = _ref3$rowIndex === undefined ? 0 : _ref3$rowIndex;

      if (this.Grid) {
        this.Grid.recomputeGridSize({
          rowIndex: rowIndex,
          columnIndex: columnIndex
        });
      }
    }

    /** See Grid#recomputeGridSize */

  }, {
    key: 'recomputeRowHeights',
    value: function recomputeRowHeights() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.recomputeGridSize({
          rowIndex: index
        });
      }
    }

    /** See Grid#scrollToPosition */

  }, {
    key: 'scrollToPosition',
    value: function scrollToPosition() {
      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.scrollToPosition({ scrollTop: scrollTop });
      }
    }

    /** See Grid#scrollToCell */

  }, {
    key: 'scrollToRow',
    value: function scrollToRow() {
      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this.Grid) {
        this.Grid.scrollToCell({
          columnIndex: 0,
          rowIndex: index
        });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._setScrollbarWidth();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._setScrollbarWidth();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          className = _props.className,
          disableHeader = _props.disableHeader,
          gridClassName = _props.gridClassName,
          gridStyle = _props.gridStyle,
          headerHeight = _props.headerHeight,
          headerRowRenderer = _props.headerRowRenderer,
          height = _props.height,
          id = _props.id,
          noRowsRenderer = _props.noRowsRenderer,
          rowClassName = _props.rowClassName,
          rowStyle = _props.rowStyle,
          scrollToIndex = _props.scrollToIndex,
          style = _props.style,
          width = _props.width;
      var scrollbarWidth = this.state.scrollbarWidth;


      var availableRowsHeight = disableHeader ? height : height - headerHeight;

      var rowClass = typeof rowClassName === 'function' ? rowClassName({ index: -1 }) : rowClassName;
      var rowStyleObject = typeof rowStyle === 'function' ? rowStyle({ index: -1 }) : rowStyle;

      // Precompute and cache column styles before rendering rows and columns to speed things up
      this._cachedColumnStyles = [];
      _react2.default.Children.toArray(children).forEach(function (column, index) {
        var flexStyles = _this2._getFlexStyleForColumn(column, column.props.style);

        _this2._cachedColumnStyles[index] = _extends({}, flexStyles, {
          overflow: 'hidden'
        });
      });

      // Note that we specify :rowCount, :scrollbarWidth, :sortBy, and :sortDirection as properties on Grid even though these have nothing to do with Grid.
      // This is done because Grid is a pure component and won't update unless its properties or state has changed.
      // Any property that should trigger a re-render of Grid then is specified here to avoid a stale display.
      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)('ReactVirtualized__Table', className),
          id: id,
          role: 'grid',
          style: style },
        !disableHeader && headerRowRenderer({
          className: (0, _classnames2.default)('ReactVirtualized__Table__headerRow', rowClass),
          columns: this._getHeaderColumns(),
          style: _extends({}, rowStyleObject, {
            height: headerHeight,
            overflow: 'hidden',
            paddingRight: scrollbarWidth,
            width: width
          })
        }),
        _react2.default.createElement(_Grid3.default, _extends({}, this.props, {
          autoContainerWidth: true,
          className: (0, _classnames2.default)('ReactVirtualized__Table__Grid', gridClassName),
          cellRenderer: this._createRow,
          columnWidth: width,
          columnCount: 1,
          height: availableRowsHeight,
          id: undefined,
          noContentRenderer: noRowsRenderer,
          onScroll: this._onScroll,
          onSectionRendered: this._onSectionRendered,
          ref: this._setRef,
          role: 'rowgroup',
          scrollbarWidth: scrollbarWidth,
          scrollToRow: scrollToIndex,
          style: _extends({}, gridStyle, {
            overflowX: 'hidden'
          })
        }))
      );
    }
  }, {
    key: '_createColumn',
    value: function _createColumn(_ref4) {
      var column = _ref4.column,
          columnIndex = _ref4.columnIndex,
          isScrolling = _ref4.isScrolling,
          parent = _ref4.parent,
          rowData = _ref4.rowData,
          rowIndex = _ref4.rowIndex;
      var _column$props = column.props,
          cellDataGetter = _column$props.cellDataGetter,
          cellRenderer = _column$props.cellRenderer,
          className = _column$props.className,
          columnData = _column$props.columnData,
          dataKey = _column$props.dataKey,
          id = _column$props.id;


      var cellData = cellDataGetter({ columnData: columnData, dataKey: dataKey, rowData: rowData });
      var renderedCell = cellRenderer({
        cellData: cellData,
        columnData: columnData,
        columnIndex: columnIndex,
        dataKey: dataKey,
        isScrolling: isScrolling,
        parent: parent,
        rowData: rowData,
        rowIndex: rowIndex
      });

      var style = this._cachedColumnStyles[columnIndex];

      var title = typeof renderedCell === 'string' ? renderedCell : null;

      var a11yProps = {
        role: 'gridcell'
      };

      if (id) {
        a11yProps['aria-describedby'] = id;
      }

      return _react2.default.createElement(
        'div',
        _extends({}, a11yProps, {
          key: 'Row' + rowIndex + '-Col' + columnIndex,
          className: (0, _classnames2.default)('ReactVirtualized__Table__rowColumn', className),
          style: style,
          title: title }),
        renderedCell
      );
    }
  }, {
    key: '_createHeader',
    value: function _createHeader(_ref5) {
      var column = _ref5.column,
          index = _ref5.index;
      var _props2 = this.props,
          headerClassName = _props2.headerClassName,
          headerStyle = _props2.headerStyle,
          onHeaderClick = _props2.onHeaderClick,
          sort = _props2.sort,
          sortBy = _props2.sortBy,
          sortDirection = _props2.sortDirection;
      var _column$props2 = column.props,
          dataKey = _column$props2.dataKey,
          disableSort = _column$props2.disableSort,
          headerRenderer = _column$props2.headerRenderer,
          id = _column$props2.id,
          label = _column$props2.label,
          columnData = _column$props2.columnData,
          defaultSortDirection = _column$props2.defaultSortDirection;

      var sortEnabled = !disableSort && sort;

      var classNames = (0, _classnames2.default)('ReactVirtualized__Table__headerColumn', headerClassName, column.props.headerClassName, {
        ReactVirtualized__Table__sortableHeaderColumn: sortEnabled
      });
      var style = this._getFlexStyleForColumn(column, _extends({}, headerStyle, column.props.headerStyle));

      var renderedHeader = headerRenderer({
        columnData: columnData,
        dataKey: dataKey,
        disableSort: disableSort,
        label: label,
        sortBy: sortBy,
        sortDirection: sortDirection
      });

      var a11yProps = {
        role: 'columnheader'
      };

      if (sortEnabled || onHeaderClick) {
        // If this is a sortable header, clicking it should update the table data's sorting.
        var isFirstTimeSort = sortBy !== dataKey;

        // If this is the firstTime sort of this column, use the column default sort order.
        // Otherwise, invert the direction of the sort.
        var newSortDirection = isFirstTimeSort ? defaultSortDirection : sortDirection === _SortDirection2.default.DESC ? _SortDirection2.default.ASC : _SortDirection2.default.DESC;

        var onClick = function onClick(event) {
          sortEnabled && sort({
            sortBy: dataKey,
            sortDirection: newSortDirection
          });
          onHeaderClick && onHeaderClick({ columnData: columnData, dataKey: dataKey, event: event });
        };

        var onKeyDown = function onKeyDown(event) {
          if (event.key === 'Enter' || event.key === ' ') {
            onClick(event);
          }
        };

        a11yProps['aria-label'] = column.props['aria-label'] || label || dataKey;
        a11yProps.tabIndex = 0;
        a11yProps.onClick = onClick;
        a11yProps.onKeyDown = onKeyDown;
      }

      if (sortBy === dataKey) {
        a11yProps['aria-sort'] = sortDirection === _SortDirection2.default.ASC ? 'ascending' : 'descending';
      }

      if (id) {
        a11yProps.id = id;
      }

      return _react2.default.createElement(
        'div',
        _extends({}, a11yProps, {
          key: 'Header-Col' + index,
          className: classNames,
          style: style }),
        renderedHeader
      );
    }
  }, {
    key: '_createRow',
    value: function _createRow(_ref6) {
      var _this3 = this;

      var index = _ref6.rowIndex,
          isScrolling = _ref6.isScrolling,
          key = _ref6.key,
          parent = _ref6.parent,
          style = _ref6.style;
      var _props3 = this.props,
          children = _props3.children,
          onRowClick = _props3.onRowClick,
          onRowDoubleClick = _props3.onRowDoubleClick,
          onRowRightClick = _props3.onRowRightClick,
          onRowMouseOver = _props3.onRowMouseOver,
          onRowMouseOut = _props3.onRowMouseOut,
          rowClassName = _props3.rowClassName,
          rowGetter = _props3.rowGetter,
          rowRenderer = _props3.rowRenderer,
          rowStyle = _props3.rowStyle;
      var scrollbarWidth = this.state.scrollbarWidth;


      var rowClass = typeof rowClassName === 'function' ? rowClassName({ index: index }) : rowClassName;
      var rowStyleObject = typeof rowStyle === 'function' ? rowStyle({ index: index }) : rowStyle;
      var rowData = rowGetter({ index: index });

      var columns = _react2.default.Children.toArray(children).map(function (column, columnIndex) {
        return _this3._createColumn({
          column: column,
          columnIndex: columnIndex,
          isScrolling: isScrolling,
          parent: parent,
          rowData: rowData,
          rowIndex: index,
          scrollbarWidth: scrollbarWidth
        });
      });

      var className = (0, _classnames2.default)('ReactVirtualized__Table__row', rowClass);
      var flattenedStyle = _extends({}, style, rowStyleObject, {
        height: this._getRowHeight(index),
        overflow: 'hidden',
        paddingRight: scrollbarWidth
      });

      return rowRenderer({
        className: className,
        columns: columns,
        index: index,
        isScrolling: isScrolling,
        key: key,
        onRowClick: onRowClick,
        onRowDoubleClick: onRowDoubleClick,
        onRowRightClick: onRowRightClick,
        onRowMouseOver: onRowMouseOver,
        onRowMouseOut: onRowMouseOut,
        rowData: rowData,
        style: flattenedStyle
      });
    }

    /**
     * Determines the flex-shrink, flex-grow, and width values for a cell (header or column).
     */

  }, {
    key: '_getFlexStyleForColumn',
    value: function _getFlexStyleForColumn(column) {
      var customStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var flexValue = column.props.flexGrow + ' ' + column.props.flexShrink + ' ' + column.props.width + 'px';

      var style = _extends({}, customStyle, {
        flex: flexValue,
        msFlex: flexValue,
        WebkitFlex: flexValue
      });

      if (column.props.maxWidth) {
        style.maxWidth = column.props.maxWidth;
      }

      if (column.props.minWidth) {
        style.minWidth = column.props.minWidth;
      }

      return style;
    }
  }, {
    key: '_getHeaderColumns',
    value: function _getHeaderColumns() {
      var _this4 = this;

      var _props4 = this.props,
          children = _props4.children,
          disableHeader = _props4.disableHeader;

      var items = disableHeader ? [] : _react2.default.Children.toArray(children);

      return items.map(function (column, index) {
        return _this4._createHeader({ column: column, index: index });
      });
    }
  }, {
    key: '_getRowHeight',
    value: function _getRowHeight(rowIndex) {
      var rowHeight = this.props.rowHeight;


      return typeof rowHeight === 'function' ? rowHeight({ index: rowIndex }) : rowHeight;
    }
  }, {
    key: '_onScroll',
    value: function _onScroll(_ref7) {
      var clientHeight = _ref7.clientHeight,
          scrollHeight = _ref7.scrollHeight,
          scrollTop = _ref7.scrollTop;
      var onScroll = this.props.onScroll;


      onScroll({ clientHeight: clientHeight, scrollHeight: scrollHeight, scrollTop: scrollTop });
    }
  }, {
    key: '_onSectionRendered',
    value: function _onSectionRendered(_ref8) {
      var rowOverscanStartIndex = _ref8.rowOverscanStartIndex,
          rowOverscanStopIndex = _ref8.rowOverscanStopIndex,
          rowStartIndex = _ref8.rowStartIndex,
          rowStopIndex = _ref8.rowStopIndex;
      var onRowsRendered = this.props.onRowsRendered;


      onRowsRendered({
        overscanStartIndex: rowOverscanStartIndex,
        overscanStopIndex: rowOverscanStopIndex,
        startIndex: rowStartIndex,
        stopIndex: rowStopIndex
      });
    }
  }, {
    key: '_setRef',
    value: function _setRef(ref) {
      this.Grid = ref;
    }
  }, {
    key: '_setScrollbarWidth',
    value: function _setScrollbarWidth() {
      if (this.Grid) {
        var _Grid = (0, _reactDom.findDOMNode)(this.Grid);
        var clientWidth = _Grid.clientWidth || 0;
        var offsetWidth = _Grid.offsetWidth || 0;
        var scrollbarWidth = offsetWidth - clientWidth;

        this.setState({ scrollbarWidth: scrollbarWidth });
      }
    }
  }]);

  return Table;
}(_react.PureComponent);

Table.defaultProps = {
  disableHeader: false,
  estimatedRowSize: 30,
  headerHeight: 0,
  headerStyle: {},
  noRowsRenderer: function noRowsRenderer() {
    return null;
  },
  onRowsRendered: function onRowsRendered() {
    return null;
  },
  onScroll: function onScroll() {
    return null;
  },
  overscanIndicesGetter: _Grid2.accessibilityOverscanIndicesGetter,
  overscanRowCount: 10,
  rowRenderer: _defaultRowRenderer2.default,
  headerRowRenderer: _defaultHeaderRowRenderer2.default,
  rowStyle: {},
  scrollToAlignment: 'auto',
  scrollToIndex: -1,
  style: {}
};
exports.default = Table;
Table.propTypes = process.env.NODE_ENV !== "production" ? {
  'aria-label': _propTypes2.default.string,

  /**
   * Removes fixed height from the scrollingContainer so that the total height
   * of rows can stretch the window. Intended for use with WindowScroller
   */
  autoHeight: _propTypes2.default.bool,

  /** One or more Columns describing the data displayed in this row */
  children: function children(props) {
    var children = _react2.default.Children.toArray(props.children);
    for (var i = 0; i < children.length; i++) {
      var childType = children[i].type;
      if (childType !== _Column2.default && !(childType.prototype instanceof _Column2.default)) {
        return new Error('Table only accepts children of type Column');
      }
    }
  },

  /** Optional CSS class name */
  className: _propTypes2.default.string,

  /** Disable rendering the header at all */
  disableHeader: _propTypes2.default.bool,

  /**
   * Used to estimate the total height of a Table before all of its rows have actually been measured.
   * The estimated total height is adjusted as rows are rendered.
   */
  estimatedRowSize: _propTypes2.default.number.isRequired,

  /** Optional custom CSS class name to attach to inner Grid element. */
  gridClassName: _propTypes2.default.string,

  /** Optional inline style to attach to inner Grid element. */
  gridStyle: _propTypes2.default.object,

  /** Optional CSS class to apply to all column headers */
  headerClassName: _propTypes2.default.string,

  /** Fixed height of header row */
  headerHeight: _propTypes2.default.number.isRequired,

  /**
   * Responsible for rendering a table row given an array of columns:
   * Should implement the following interface: ({
   *   className: string,
   *   columns: any[],
   *   style: any
   * }): PropTypes.node
   */
  headerRowRenderer: _propTypes2.default.func,

  /** Optional custom inline style to attach to table header columns. */
  headerStyle: _propTypes2.default.object,

  /** Fixed/available height for out DOM element */
  height: _propTypes2.default.number.isRequired,

  /** Optional id */
  id: _propTypes2.default.string,

  /** Optional renderer to be used in place of table body rows when rowCount is 0 */
  noRowsRenderer: _propTypes2.default.func,

  /**
  * Optional callback when a column's header is clicked.
  * ({ columnData: any, dataKey: string }): void
  */
  onHeaderClick: _propTypes2.default.func,

  /**
   * Callback invoked when a user clicks on a table row.
   * ({ index: number }): void
   */
  onRowClick: _propTypes2.default.func,

  /**
   * Callback invoked when a user double-clicks on a table row.
   * ({ index: number }): void
   */
  onRowDoubleClick: _propTypes2.default.func,

  /**
   * Callback invoked when the mouse leaves a table row.
   * ({ index: number }): void
   */
  onRowMouseOut: _propTypes2.default.func,

  /**
   * Callback invoked when a user moves the mouse over a table row.
   * ({ index: number }): void
   */
  onRowMouseOver: _propTypes2.default.func,

  /**
   * Callback invoked when a user right-clicks on a table row.
   * ({ index: number }): void
   */
  onRowRightClick: _propTypes2.default.func,

  /**
   * Callback invoked with information about the slice of rows that were just rendered.
   * ({ startIndex, stopIndex }): void
   */
  onRowsRendered: _propTypes2.default.func,

  /**
   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
   * This callback can be used to sync scrolling between lists, tables, or grids.
   * ({ clientHeight, scrollHeight, scrollTop }): void
   */
  onScroll: _propTypes2.default.func.isRequired,

  /** See Grid#overscanIndicesGetter */
  overscanIndicesGetter: _propTypes2.default.func.isRequired,

  /**
   * Number of rows to render above/below the visible bounds of the list.
   * These rows can help for smoother scrolling on touch devices.
   */
  overscanRowCount: _propTypes2.default.number.isRequired,

  /**
   * Optional CSS class to apply to all table rows (including the header row).
   * This property can be a CSS class name (string) or a function that returns a class name.
   * If a function is provided its signature should be: ({ index: number }): string
   */
  rowClassName: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),

  /**
   * Callback responsible for returning a data row given an index.
   * ({ index: number }): any
   */
  rowGetter: _propTypes2.default.func.isRequired,

  /**
   * Either a fixed row height (number) or a function that returns the height of a row given its index.
   * ({ index: number }): number
   */
  rowHeight: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.func]).isRequired,

  /** Number of rows in table. */
  rowCount: _propTypes2.default.number.isRequired,

  /**
   * Responsible for rendering a table row given an array of columns:
   * Should implement the following interface: ({
   *   className: string,
   *   columns: Array,
   *   index: number,
   *   isScrolling: boolean,
   *   onRowClick: ?Function,
   *   onRowDoubleClick: ?Function,
   *   onRowMouseOver: ?Function,
   *   onRowMouseOut: ?Function,
   *   rowData: any,
   *   style: any
   * }): PropTypes.node
   */
  rowRenderer: _propTypes2.default.func,

  /** Optional custom inline style to attach to table rows. */
  rowStyle: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]).isRequired,

  /** See Grid#scrollToAlignment */
  scrollToAlignment: _propTypes2.default.oneOf(['auto', 'end', 'start', 'center']).isRequired,

  /** Row index to ensure visible (by forcefully scrolling if necessary) */
  scrollToIndex: _propTypes2.default.number.isRequired,

  /** Vertical offset. */
  scrollTop: _propTypes2.default.number,

  /**
   * Sort function to be called if a sortable header is clicked.
   * ({ sortBy: string, sortDirection: SortDirection }): void
   */
  sort: _propTypes2.default.func,

  /** Table data is currently sorted by this :dataKey (if it is sorted at all) */
  sortBy: _propTypes2.default.string,

  /** Table data is currently sorted in this direction (if it is sorted at all) */
  sortDirection: _propTypes2.default.oneOf([_SortDirection2.default.ASC, _SortDirection2.default.DESC]),

  /** Optional inline style */
  style: _propTypes2.default.object,

  /** Tab index for focus */
  tabIndex: _propTypes2.default.number,

  /** Width of list */
  width: _propTypes2.default.number.isRequired
} : {};
}).call(this,require('_process'))
},{"../Grid":357,"./Column":377,"./SortDirection":378,"./defaultHeaderRowRenderer":384,"./defaultRowRenderer":385,"_process":172,"classnames":142,"prop-types":406,"react":433,"react-dom":187}],381:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultCellDataGetter;

/**
 * Default accessor for returning a cell value for a given attribute.
 * This function expects to operate on either a vanilla Object or an Immutable Map.
 * You should override the column's cellDataGetter if your data is some other type of object.
 */
var babelPluginFlowReactPropTypes_proptype_CellDataGetterParams = require('./types').babelPluginFlowReactPropTypes_proptype_CellDataGetterParams || require('prop-types').any;

function defaultCellDataGetter(_ref) {
  var dataKey = _ref.dataKey,
      rowData = _ref.rowData;

  if (typeof rowData.get === 'function') {
    return rowData.get(dataKey);
  } else {
    return rowData[dataKey];
  }
}
},{"./types":387,"prop-types":406}],382:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultCellRenderer;

/**
 * Default cell renderer that displays an attribute as a simple string
 * You should override the column's cellRenderer if your data is some other type of object.
 */
var babelPluginFlowReactPropTypes_proptype_CellRendererParams = require('./types').babelPluginFlowReactPropTypes_proptype_CellRendererParams || require('prop-types').any;

function defaultCellRenderer(_ref) {
  var cellData = _ref.cellData;

  if (cellData == null) {
    return '';
  } else {
    return String(cellData);
  }
}
},{"./types":387,"prop-types":406}],383:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultHeaderRenderer;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SortIndicator = require('./SortIndicator');

var _SortIndicator2 = _interopRequireDefault(_SortIndicator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Default table header renderer.
 */
var babelPluginFlowReactPropTypes_proptype_HeaderRendererParams = require('./types').babelPluginFlowReactPropTypes_proptype_HeaderRendererParams || require('prop-types').any;

function defaultHeaderRenderer(_ref) {
  var dataKey = _ref.dataKey,
      label = _ref.label,
      sortBy = _ref.sortBy,
      sortDirection = _ref.sortDirection;

  var showSortIndicator = sortBy === dataKey;
  var children = [_react2.default.createElement(
    'span',
    {
      className: 'ReactVirtualized__Table__headerTruncatedText',
      key: 'label',
      title: label },
    label
  )];

  if (showSortIndicator) {
    children.push(_react2.default.createElement(_SortIndicator2.default, { key: 'SortIndicator', sortDirection: sortDirection }));
  }

  return children;
}
defaultHeaderRenderer.propTypes = babelPluginFlowReactPropTypes_proptype_HeaderRendererParams === require('prop-types').any ? {} : babelPluginFlowReactPropTypes_proptype_HeaderRendererParams;
},{"./SortIndicator":379,"./types":387,"prop-types":406,"react":433}],384:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultHeaderRowRenderer;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams = require('./types').babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams || require('prop-types').any;

function defaultHeaderRowRenderer(_ref) {
  var className = _ref.className,
      columns = _ref.columns,
      style = _ref.style;

  return _react2.default.createElement(
    'div',
    { className: className, role: 'row', style: style },
    columns
  );
}
defaultHeaderRowRenderer.propTypes = babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams === require('prop-types').any ? {} : babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams;
},{"./types":387,"prop-types":406,"react":433}],385:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = defaultRowRenderer;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Default row renderer for Table.
 */
var babelPluginFlowReactPropTypes_proptype_RowRendererParams = require('./types').babelPluginFlowReactPropTypes_proptype_RowRendererParams || require('prop-types').any;

function defaultRowRenderer(_ref) {
  var className = _ref.className,
      columns = _ref.columns,
      index = _ref.index,
      key = _ref.key,
      onRowClick = _ref.onRowClick,
      onRowDoubleClick = _ref.onRowDoubleClick,
      onRowMouseOut = _ref.onRowMouseOut,
      onRowMouseOver = _ref.onRowMouseOver,
      onRowRightClick = _ref.onRowRightClick,
      rowData = _ref.rowData,
      style = _ref.style;

  var a11yProps = {};

  if (onRowClick || onRowDoubleClick || onRowMouseOut || onRowMouseOver || onRowRightClick) {
    a11yProps['aria-label'] = 'row';
    a11yProps.tabIndex = 0;

    if (onRowClick) {
      a11yProps.onClick = function (event) {
        return onRowClick({ event: event, index: index, rowData: rowData });
      };
    }
    if (onRowDoubleClick) {
      a11yProps.onDoubleClick = function (event) {
        return onRowDoubleClick({ event: event, index: index, rowData: rowData });
      };
    }
    if (onRowMouseOut) {
      a11yProps.onMouseOut = function (event) {
        return onRowMouseOut({ event: event, index: index, rowData: rowData });
      };
    }
    if (onRowMouseOver) {
      a11yProps.onMouseOver = function (event) {
        return onRowMouseOver({ event: event, index: index, rowData: rowData });
      };
    }
    if (onRowRightClick) {
      a11yProps.onContextMenu = function (event) {
        return onRowRightClick({ event: event, index: index, rowData: rowData });
      };
    }
  }

  return _react2.default.createElement(
    'div',
    _extends({}, a11yProps, {
      className: className,
      key: key,
      role: 'row',
      style: style }),
    columns
  );
}
defaultRowRenderer.propTypes = babelPluginFlowReactPropTypes_proptype_RowRendererParams === require('prop-types').any ? {} : babelPluginFlowReactPropTypes_proptype_RowRendererParams;
},{"./types":387,"prop-types":406,"react":433}],386:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Table = exports.SortIndicator = exports.SortDirection = exports.Column = exports.defaultRowRenderer = exports.defaultHeaderRenderer = exports.defaultHeaderRowRenderer = exports.defaultCellRenderer = exports.defaultCellDataGetter = undefined;

var _defaultCellDataGetter = require('./defaultCellDataGetter');

var _defaultCellDataGetter2 = _interopRequireDefault(_defaultCellDataGetter);

var _defaultCellRenderer = require('./defaultCellRenderer');

var _defaultCellRenderer2 = _interopRequireDefault(_defaultCellRenderer);

var _defaultHeaderRowRenderer = require('./defaultHeaderRowRenderer.js');

var _defaultHeaderRowRenderer2 = _interopRequireDefault(_defaultHeaderRowRenderer);

var _defaultHeaderRenderer = require('./defaultHeaderRenderer');

var _defaultHeaderRenderer2 = _interopRequireDefault(_defaultHeaderRenderer);

var _defaultRowRenderer = require('./defaultRowRenderer');

var _defaultRowRenderer2 = _interopRequireDefault(_defaultRowRenderer);

var _Column = require('./Column');

var _Column2 = _interopRequireDefault(_Column);

var _SortDirection = require('./SortDirection');

var _SortDirection2 = _interopRequireDefault(_SortDirection);

var _SortIndicator = require('./SortIndicator');

var _SortIndicator2 = _interopRequireDefault(_SortIndicator);

var _Table = require('./Table');

var _Table2 = _interopRequireDefault(_Table);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _Table2.default;
exports.defaultCellDataGetter = _defaultCellDataGetter2.default;
exports.defaultCellRenderer = _defaultCellRenderer2.default;
exports.defaultHeaderRowRenderer = _defaultHeaderRowRenderer2.default;
exports.defaultHeaderRenderer = _defaultHeaderRenderer2.default;
exports.defaultRowRenderer = _defaultRowRenderer2.default;
exports.Column = _Column2.default;
exports.SortDirection = _SortDirection2.default;
exports.SortIndicator = _SortIndicator2.default;
exports.Table = _Table2.default;
},{"./Column":377,"./SortDirection":378,"./SortIndicator":379,"./Table":380,"./defaultCellDataGetter":381,"./defaultCellRenderer":382,"./defaultHeaderRenderer":383,"./defaultHeaderRowRenderer.js":384,"./defaultRowRenderer":385}],387:[function(require,module,exports){
"use strict";

if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellDataGetterParams", {
  value: {
    columnData: require("prop-types").any,
    dataKey: require("prop-types").string.isRequired,
    rowData: require("prop-types").any.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_CellRendererParams", {
  value: {
    cellData: require("prop-types").any,
    columnData: require("prop-types").any,
    dataKey: require("prop-types").string.isRequired,
    rowData: require("prop-types").any.isRequired,
    rowIndex: require("prop-types").number.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_HeaderRowRendererParams", {
  value: {
    className: require("prop-types").string.isRequired,
    columns: require("prop-types").arrayOf(require("prop-types").any).isRequired,
    style: require("prop-types").any.isRequired
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_HeaderRendererParams", {
  value: {
    columnData: require("prop-types").any,
    dataKey: require("prop-types").string.isRequired,
    disableSort: require("prop-types").bool,
    label: require("prop-types").any,
    sortBy: require("prop-types").string,
    sortDirection: require("prop-types").string
  },
  configurable: true
});
if (typeof exports !== "undefined") Object.defineProperty(exports, "babelPluginFlowReactPropTypes_proptype_RowRendererParams", {
  value: {
    className: require("prop-types").string.isRequired,
    columns: require("prop-types").arrayOf(require("prop-types").any).isRequired,
    index: require("prop-types").number.isRequired,
    isScrolling: require("prop-types").bool.isRequired,
    onRowClick: require("prop-types").func,
    onRowDoubleClick: require("prop-types").func,
    onRowMouseOver: require("prop-types").func,
    onRowMouseOut: require("prop-types").func,
    rowData: require("prop-types").any.isRequired,
    style: require("prop-types").any.isRequired
  },
  configurable: true
});
},{"prop-types":406}],388:[function(require,module,exports){
(function (process){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IS_SCROLLING_TIMEOUT = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _onScroll = require('./utils/onScroll');

var _dimensions = require('./utils/dimensions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
 * This improves performance and makes scrolling smoother.
 */
var IS_SCROLLING_TIMEOUT = exports.IS_SCROLLING_TIMEOUT = 150;

var WindowScroller = function (_PureComponent) {
  _inherits(WindowScroller, _PureComponent);

  function WindowScroller(props) {
    _classCallCheck(this, WindowScroller);

    // Handle server-side rendering case
    var _this = _possibleConstructorReturn(this, (WindowScroller.__proto__ || Object.getPrototypeOf(WindowScroller)).call(this, props));

    var _ref = typeof window !== 'undefined' ? (0, _dimensions.getDimensions)(props.scrollElement || window) : { width: 0, height: 0 },
        width = _ref.width,
        height = _ref.height;

    _this.state = {
      height: height,
      width: width,
      isScrolling: false,
      scrollLeft: 0,
      scrollTop: 0
    };

    _this._onResize = _this._onResize.bind(_this);
    _this._onChildScroll = _this._onChildScroll.bind(_this);
    _this.__handleWindowScrollEvent = _this.__handleWindowScrollEvent.bind(_this);
    _this.__resetIsScrolling = _this.__resetIsScrolling.bind(_this);
    return _this;
  }

  // Can’t use defaultProps for scrollElement without breaking server-side rendering


  _createClass(WindowScroller, [{
    key: 'updatePosition',
    value: function updatePosition(scrollElement) {
      var onResize = this.props.onResize;
      var _state = this.state,
          height = _state.height,
          width = _state.width;


      scrollElement = scrollElement || this.props.scrollElement || window;
      var offset = (0, _dimensions.getPositionOffset)(_reactDom2.default.findDOMNode(this), scrollElement);
      this._positionFromTop = offset.top;
      this._positionFromLeft = offset.left;

      var dimensions = (0, _dimensions.getDimensions)(scrollElement);
      if (height !== dimensions.height || width !== dimensions.width) {
        this.setState({
          height: dimensions.height,
          width: dimensions.width
        });
        onResize({
          height: dimensions.height,
          width: dimensions.width
        });
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var scrollElement = this.props.scrollElement || window;

      this.updatePosition(scrollElement);

      (0, _onScroll.registerScrollListener)(this, scrollElement);

      window.addEventListener('resize', this._onResize, false);

      this._isMounted = true;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var scrollElement = this.props.scrollElement || window;
      var nextScrollElement = nextProps.scrollElement || window;

      if (scrollElement !== nextScrollElement) {
        this.updatePosition(nextScrollElement);

        (0, _onScroll.unregisterScrollListener)(this, scrollElement);
        (0, _onScroll.registerScrollListener)(this, nextScrollElement);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      (0, _onScroll.unregisterScrollListener)(this, this.props.scrollElement || window);
      window.removeEventListener('resize', this._onResize, false);

      this._isMounted = false;
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;
      var _state2 = this.state,
          isScrolling = _state2.isScrolling,
          scrollTop = _state2.scrollTop,
          scrollLeft = _state2.scrollLeft,
          height = _state2.height,
          width = _state2.width;


      return children({
        onChildScroll: this._onChildScroll,
        height: height,
        isScrolling: isScrolling,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop,
        width: width
      });
    }
  }, {
    key: '_onChildScroll',
    value: function _onChildScroll(_ref2) {
      var scrollTop = _ref2.scrollTop;

      if (this.state.scrollTop === scrollTop) {
        return;
      }

      var scrollElement = this.scrollElement;

      if (typeof scrollElement.scrollTo === 'function') {
        scrollElement.scrollTo(0, scrollTop + this._positionFromTop);
      } else {
        scrollElement.scrollTop = scrollTop + this._positionFromTop;
      }
    }
  }, {
    key: '_onResize',
    value: function _onResize() {
      this.updatePosition();
    }

    // Referenced by utils/onScroll

  }, {
    key: '__handleWindowScrollEvent',
    value: function __handleWindowScrollEvent() {
      if (!this._isMounted) {
        return;
      }

      var onScroll = this.props.onScroll;


      var scrollElement = this.props.scrollElement || window;
      var scrollOffset = (0, _dimensions.getScrollOffset)(scrollElement);
      var scrollLeft = Math.max(0, scrollOffset.left - this._positionFromLeft);
      var scrollTop = Math.max(0, scrollOffset.top - this._positionFromTop);

      this.setState({
        isScrolling: true,
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });

      onScroll({
        scrollLeft: scrollLeft,
        scrollTop: scrollTop
      });
    }

    // Referenced by utils/onScroll

  }, {
    key: '__resetIsScrolling',
    value: function __resetIsScrolling() {
      this.setState({
        isScrolling: false
      });
    }
  }, {
    key: 'scrollElement',
    get: function get() {
      return this.props.scrollElement || window;
    }
  }]);

  return WindowScroller;
}(_react.PureComponent);

WindowScroller.defaultProps = {
  onResize: function onResize() {},
  onScroll: function onScroll() {},
  scrollingResetTimeInterval: IS_SCROLLING_TIMEOUT
};
exports.default = WindowScroller;
WindowScroller.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * Function responsible for rendering children.
   * This function should implement the following signature:
   * ({ height, isScrolling, scrollLeft, scrollTop, width }) => PropTypes.element
   */
  children: _propTypes2.default.func.isRequired,

  /** Callback to be invoked on-resize: ({ height, width }) */
  onResize: _propTypes2.default.func.isRequired,

  /** Callback to be invoked on-scroll: ({ scrollLeft, scrollTop }) */
  onScroll: _propTypes2.default.func.isRequired,

  /** Element to attach scroll event listeners. Defaults to window. */
  scrollElement: _propTypes2.default.any,

  /**
   * Wait this amount of time after the last scroll event before resetting child `pointer-events`.
   */
  scrollingResetTimeInterval: _propTypes2.default.number.isRequired
} : {};
}).call(this,require('_process'))
},{"./utils/dimensions":390,"./utils/onScroll":391,"_process":172,"prop-types":406,"react":433,"react-dom":187}],389:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IS_SCROLLING_TIMEOUT = exports.WindowScroller = undefined;

var _WindowScroller = require('./WindowScroller');

var _WindowScroller2 = _interopRequireDefault(_WindowScroller);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _WindowScroller2.default;
exports.WindowScroller = _WindowScroller2.default;
exports.IS_SCROLLING_TIMEOUT = _WindowScroller.IS_SCROLLING_TIMEOUT;
},{"./WindowScroller":388}],390:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDimensions = getDimensions;
exports.getPositionOffset = getPositionOffset;
exports.getScrollOffset = getScrollOffset;
/**
 * Gets the dimensions of the element, accounting for API differences between
 * `window` and other DOM elements.
 */

function getDimensions(element) {
  if (element === window) {
    return {
      height: typeof window.innerHeight === 'number' ? window.innerHeight : 0,
      width: typeof window.innerWidth === 'number' ? window.innerWidth : 0
    };
  }

  var _element$getBoundingC = element.getBoundingClientRect(),
      width = _element$getBoundingC.width,
      height = _element$getBoundingC.height;

  return { width: width, height: height };
}

/**
 * Gets the vertical and horizontal position of an element within its scroll container.
 * Elements that have been “scrolled past” return negative values.
 * Handles edge-case where a user is navigating back (history) from an already-scrolled page.
 * In this case the body’s top or left position will be a negative number and this element’s top or left will be increased (by that amount).
 */
function getPositionOffset(element, container) {
  var scrollOffset = container === window ? { top: 0, left: 0 } : getScrollOffset(container);
  var containerElement = container === window ? document.documentElement : container;
  var elementRect = element.getBoundingClientRect();
  var containerRect = containerElement.getBoundingClientRect();
  return {
    top: elementRect.top + scrollOffset.top - containerRect.top,
    left: elementRect.left + scrollOffset.left - containerRect.left
  };
}

/**
 * Gets the vertical and horizontal scroll amount of the element, accounting for IE compatibility
 * and API differences between `window` and other DOM elements.
 */
function getScrollOffset(element) {
  if (element === window) {
    return {
      top: 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop,
      left: 'scrollX' in window ? window.scrollX : document.documentElement.scrollLeft
    };
  } else {
    return {
      top: element.scrollTop,
      left: element.scrollLeft
    };
  }
}
},{}],391:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerScrollListener = registerScrollListener;
exports.unregisterScrollListener = unregisterScrollListener;

var _requestAnimationTimeout = require('../../utils/requestAnimationTimeout');

var mountedInstances = [];
var originalBodyPointerEvents = null;
var disablePointerEventsTimeoutId = null;

function enablePointerEventsIfDisabled() {
  if (disablePointerEventsTimeoutId) {
    disablePointerEventsTimeoutId = null;

    document.body.style.pointerEvents = originalBodyPointerEvents;

    originalBodyPointerEvents = null;
  }
}

function enablePointerEventsAfterDelayCallback() {
  enablePointerEventsIfDisabled();
  mountedInstances.forEach(function (instance) {
    return instance.__resetIsScrolling();
  });
}

function enablePointerEventsAfterDelay() {
  if (disablePointerEventsTimeoutId) {
    (0, _requestAnimationTimeout.cancelAnimationTimeout)(disablePointerEventsTimeoutId);
  }

  var maximumTimeout = 0;
  mountedInstances.forEach(function (instance) {
    maximumTimeout = Math.max(maximumTimeout, instance.props.scrollingResetTimeInterval);
  });

  disablePointerEventsTimeoutId = (0, _requestAnimationTimeout.requestAnimationTimeout)(enablePointerEventsAfterDelayCallback, maximumTimeout);
}

function onScrollWindow(event) {
  if (event.currentTarget === window && originalBodyPointerEvents == null) {
    originalBodyPointerEvents = document.body.style.pointerEvents;

    document.body.style.pointerEvents = 'none';
  }
  enablePointerEventsAfterDelay();
  mountedInstances.forEach(function (instance) {
    if (instance.scrollElement === event.currentTarget) {
      instance.__handleWindowScrollEvent(event);
    }
  });
}

function registerScrollListener(component, element) {
  if (!mountedInstances.some(function (instance) {
    return instance.scrollElement === element;
  })) {
    element.addEventListener('scroll', onScrollWindow);
  }
  mountedInstances.push(component);
}

function unregisterScrollListener(component, element) {
  mountedInstances = mountedInstances.filter(function (instance) {
    return instance !== component;
  });
  if (!mountedInstances.length) {
    element.removeEventListener('scroll', onScrollWindow);
    if (disablePointerEventsTimeoutId) {
      (0, _requestAnimationTimeout.cancelAnimationTimeout)(disablePointerEventsTimeoutId);
      enablePointerEventsIfDisabled();
    }
  }
}
},{"../../utils/requestAnimationTimeout":396}],392:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ArrowKeyStepper = require('./ArrowKeyStepper');

Object.defineProperty(exports, 'ArrowKeyStepper', {
  enumerable: true,
  get: function get() {
    return _ArrowKeyStepper.ArrowKeyStepper;
  }
});

var _AutoSizer = require('./AutoSizer');

Object.defineProperty(exports, 'AutoSizer', {
  enumerable: true,
  get: function get() {
    return _AutoSizer.AutoSizer;
  }
});

var _CellMeasurer = require('./CellMeasurer');

Object.defineProperty(exports, 'CellMeasurer', {
  enumerable: true,
  get: function get() {
    return _CellMeasurer.CellMeasurer;
  }
});
Object.defineProperty(exports, 'CellMeasurerCache', {
  enumerable: true,
  get: function get() {
    return _CellMeasurer.CellMeasurerCache;
  }
});

var _Collection = require('./Collection');

Object.defineProperty(exports, 'Collection', {
  enumerable: true,
  get: function get() {
    return _Collection.Collection;
  }
});

var _ColumnSizer = require('./ColumnSizer');

Object.defineProperty(exports, 'ColumnSizer', {
  enumerable: true,
  get: function get() {
    return _ColumnSizer.ColumnSizer;
  }
});

var _Grid = require('./Grid');

Object.defineProperty(exports, 'accessibilityOverscanIndicesGetter', {
  enumerable: true,
  get: function get() {
    return _Grid.accessibilityOverscanIndicesGetter;
  }
});
Object.defineProperty(exports, 'defaultCellRangeRenderer', {
  enumerable: true,
  get: function get() {
    return _Grid.defaultCellRangeRenderer;
  }
});
Object.defineProperty(exports, 'defaultOverscanIndicesGetter', {
  enumerable: true,
  get: function get() {
    return _Grid.defaultOverscanIndicesGetter;
  }
});
Object.defineProperty(exports, 'Grid', {
  enumerable: true,
  get: function get() {
    return _Grid.Grid;
  }
});

var _InfiniteLoader = require('./InfiniteLoader');

Object.defineProperty(exports, 'InfiniteLoader', {
  enumerable: true,
  get: function get() {
    return _InfiniteLoader.InfiniteLoader;
  }
});

var _List = require('./List');

Object.defineProperty(exports, 'List', {
  enumerable: true,
  get: function get() {
    return _List.List;
  }
});

var _Masonry = require('./Masonry');

Object.defineProperty(exports, 'createMasonryCellPositioner', {
  enumerable: true,
  get: function get() {
    return _Masonry.createCellPositioner;
  }
});
Object.defineProperty(exports, 'Masonry', {
  enumerable: true,
  get: function get() {
    return _Masonry.Masonry;
  }
});

var _MultiGrid = require('./MultiGrid');

Object.defineProperty(exports, 'MultiGrid', {
  enumerable: true,
  get: function get() {
    return _MultiGrid.MultiGrid;
  }
});

var _ScrollSync = require('./ScrollSync');

Object.defineProperty(exports, 'ScrollSync', {
  enumerable: true,
  get: function get() {
    return _ScrollSync.ScrollSync;
  }
});

var _Table = require('./Table');

Object.defineProperty(exports, 'defaultTableCellDataGetter', {
  enumerable: true,
  get: function get() {
    return _Table.defaultCellDataGetter;
  }
});
Object.defineProperty(exports, 'defaultTableCellRenderer', {
  enumerable: true,
  get: function get() {
    return _Table.defaultCellRenderer;
  }
});
Object.defineProperty(exports, 'defaultTableHeaderRenderer', {
  enumerable: true,
  get: function get() {
    return _Table.defaultHeaderRenderer;
  }
});
Object.defineProperty(exports, 'defaultTableHeaderRowRenderer', {
  enumerable: true,
  get: function get() {
    return _Table.defaultHeaderRowRenderer;
  }
});
Object.defineProperty(exports, 'defaultTableRowRenderer', {
  enumerable: true,
  get: function get() {
    return _Table.defaultRowRenderer;
  }
});
Object.defineProperty(exports, 'Table', {
  enumerable: true,
  get: function get() {
    return _Table.Table;
  }
});
Object.defineProperty(exports, 'Column', {
  enumerable: true,
  get: function get() {
    return _Table.Column;
  }
});
Object.defineProperty(exports, 'SortDirection', {
  enumerable: true,
  get: function get() {
    return _Table.SortDirection;
  }
});
Object.defineProperty(exports, 'SortIndicator', {
  enumerable: true,
  get: function get() {
    return _Table.SortIndicator;
  }
});

var _WindowScroller = require('./WindowScroller');

Object.defineProperty(exports, 'WindowScroller', {
  enumerable: true,
  get: function get() {
    return _WindowScroller.WindowScroller;
  }
});
},{"./ArrowKeyStepper":336,"./AutoSizer":339,"./CellMeasurer":343,"./Collection":348,"./ColumnSizer":352,"./Grid":357,"./InfiniteLoader":364,"./List":366,"./Masonry":371,"./MultiGrid":374,"./ScrollSync":376,"./Table":386,"./WindowScroller":389}],393:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


// Properly handle server-side rendering.
var win = void 0;

if (typeof window !== 'undefined') {
  win = window;
} else if (typeof self !== 'undefined') {
  win = self;
} else {
  win = {};
}

// requestAnimationFrame() shim by Paul Irish
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
var request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {
  return win.setTimeout(callback, 1000 / 60);
};

var cancel = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {
  win.clearTimeout(id);
};

var raf = exports.raf = request;
var caf = exports.caf = cancel;
},{}],394:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createCallbackMemoizer;
/**
 * Helper utility that updates the specified callback whenever any of the specified indices have changed.
 */
function createCallbackMemoizer() {
  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  var cachedIndices = {};

  return function (_ref) {
    var callback = _ref.callback,
        indices = _ref.indices;

    var keys = Object.keys(indices);
    var allInitialized = !requireAllKeys || keys.every(function (key) {
      var value = indices[key];
      return Array.isArray(value) ? value.length > 0 : value >= 0;
    });
    var indexChanged = keys.length !== Object.keys(cachedIndices).length || keys.some(function (key) {
      var cachedValue = cachedIndices[key];
      var value = indices[key];

      return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;
    });

    cachedIndices = indices;

    if (allInitialized && indexChanged) {
      callback(indices);
    }
  };
}
},{}],395:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getUpdatedOffsetForIndex;
/**
 * Determines a new offset that ensures a certain cell is visible, given the current offset.
 * If the cell is already visible then the current offset will be returned.
 * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
 *
 * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
 * @param cellOffset Offset (x or y) position for cell
 * @param cellSize Size (width or height) of cell
 * @param containerSize Total size (width or height) of the container
 * @param currentOffset Container's current (x or y) offset
 * @return Offset to use to ensure the specified cell is visible
 */
function getUpdatedOffsetForIndex(_ref) {
  var _ref$align = _ref.align,
      align = _ref$align === undefined ? 'auto' : _ref$align,
      cellOffset = _ref.cellOffset,
      cellSize = _ref.cellSize,
      containerSize = _ref.containerSize,
      currentOffset = _ref.currentOffset;

  var maxOffset = cellOffset;
  var minOffset = maxOffset - containerSize + cellSize;

  switch (align) {
    case 'start':
      return maxOffset;
    case 'end':
      return minOffset;
    case 'center':
      return maxOffset - (containerSize - cellSize) / 2;
    default:
      return Math.max(minOffset, Math.min(maxOffset, currentOffset));
  }
}
},{}],396:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestAnimationTimeout = exports.cancelAnimationTimeout = undefined;

var _animationFrame = require('./animationFrame');

if (typeof exports !== 'undefined') Object.defineProperty(exports, 'babelPluginFlowReactPropTypes_proptype_AnimationTimeoutId', {
  value: {
    id: require('prop-types').number.isRequired
  },
  configurable: true
});
var cancelAnimationTimeout = exports.cancelAnimationTimeout = function cancelAnimationTimeout(frame) {
  return (0, _animationFrame.caf)(frame.id);
};

/**
 * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.
 * When the delay time has been reached the function you're timing out will be called.
 *
 * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)
 */
var requestAnimationTimeout = exports.requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {
  var start = Date.now();

  var timeout = function timeout() {
    if (Date.now() - start >= delay) {
      callback.call();
    } else {
      frame.id = (0, _animationFrame.raf)(timeout);
    }
  };

  var frame = {
    id: (0, _animationFrame.raf)(timeout)
  };

  return frame;
};
},{"./animationFrame":393,"prop-types":406}],397:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Binary Search Bounds
 * https://github.com/mikolalysenko/binary-search-bounds
 * Mikola Lysenko
 *
 * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax.
 * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
 **/

function _GEA(a, l, h, y) {
  var i = h + 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x >= y) {
      i = m;
      h = m - 1;
    } else {
      l = m + 1;
    }
  }
  return i;
}
function _GEP(a, l, h, y, c) {
  var i = h + 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (c(x, y) >= 0) {
      i = m;
      h = m - 1;
    } else {
      l = m + 1;
    }
  }
  return i;
}
function dispatchBsearchGE(a, y, c, l, h) {
  if (typeof c === 'function') {
    return _GEP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _GEA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

function _GTA(a, l, h, y) {
  var i = h + 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x > y) {
      i = m;
      h = m - 1;
    } else {
      l = m + 1;
    }
  }
  return i;
}
function _GTP(a, l, h, y, c) {
  var i = h + 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (c(x, y) > 0) {
      i = m;
      h = m - 1;
    } else {
      l = m + 1;
    }
  }
  return i;
}
function dispatchBsearchGT(a, y, c, l, h) {
  if (typeof c === 'function') {
    return _GTP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _GTA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

function _LTA(a, l, h, y) {
  var i = l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x < y) {
      i = m;
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return i;
}
function _LTP(a, l, h, y, c) {
  var i = l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (c(x, y) < 0) {
      i = m;
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return i;
}
function dispatchBsearchLT(a, y, c, l, h) {
  if (typeof c === 'function') {
    return _LTP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _LTA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

function _LEA(a, l, h, y) {
  var i = l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x <= y) {
      i = m;
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return i;
}
function _LEP(a, l, h, y, c) {
  var i = l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (c(x, y) <= 0) {
      i = m;
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return i;
}
function dispatchBsearchLE(a, y, c, l, h) {
  if (typeof c === 'function') {
    return _LEP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _LEA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

function _EQA(a, l, h, y) {
  l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    if (x === y) {
      return m;
    } else if (x <= y) {
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return -1;
}
function _EQP(a, l, h, y, c) {
  l - 1;
  while (l <= h) {
    var m = l + h >>> 1,
        x = a[m];
    var p = c(x, y);
    if (p === 0) {
      return m;
    } else if (p <= 0) {
      l = m + 1;
    } else {
      h = m - 1;
    }
  }
  return -1;
}
function dispatchBsearchEQ(a, y, c, l, h) {
  if (typeof c === 'function') {
    return _EQP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
  } else {
    return _EQA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
  }
}

exports.default = {
  ge: dispatchBsearchGE,
  gt: dispatchBsearchGT,
  lt: dispatchBsearchLT,
  le: dispatchBsearchLE,
  eq: dispatchBsearchEQ
};
},{}],398:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createDetectElementResize;
/**
 * Detect Element Resize.
 * https://github.com/sdecima/javascript-detect-element-resize
 * Sebastian Decima
 *
 * Forked from version 0.5.3; includes the following modifications:
 * 1) Guard against unsafe 'window' and 'document' references (to support SSR).
 * 2) Defer initialization code via a top-level function wrapper (to support SSR).
 * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.
 * 4) Add nonce for style element.
 **/

function createDetectElementResize(nonce) {
  // Check `document` and `window` in case of server-side rendering
  var _window;
  if (typeof window !== 'undefined') {
    _window = window;
  } else if (typeof self !== 'undefined') {
    _window = self;
  } else {
    _window = this;
  }

  var attachEvent = typeof document !== 'undefined' && document.attachEvent;

  if (!attachEvent) {
    var requestFrame = function () {
      var raf = _window.requestAnimationFrame || _window.mozRequestAnimationFrame || _window.webkitRequestAnimationFrame || function (fn) {
        return _window.setTimeout(fn, 20);
      };
      return function (fn) {
        return raf(fn);
      };
    }();

    var cancelFrame = function () {
      var cancel = _window.cancelAnimationFrame || _window.mozCancelAnimationFrame || _window.webkitCancelAnimationFrame || _window.clearTimeout;
      return function (id) {
        return cancel(id);
      };
    }();

    var resetTriggers = function resetTriggers(element) {
      var triggers = element.__resizeTriggers__,
          expand = triggers.firstElementChild,
          contract = triggers.lastElementChild,
          expandChild = expand.firstElementChild;
      contract.scrollLeft = contract.scrollWidth;
      contract.scrollTop = contract.scrollHeight;
      expandChild.style.width = expand.offsetWidth + 1 + 'px';
      expandChild.style.height = expand.offsetHeight + 1 + 'px';
      expand.scrollLeft = expand.scrollWidth;
      expand.scrollTop = expand.scrollHeight;
    };

    var checkTriggers = function checkTriggers(element) {
      return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;
    };

    var scrollListener = function scrollListener(e) {
      // Don't measure (which forces) reflow for scrolls that happen inside of children!
      if (e.target.className.indexOf('contract-trigger') < 0 && e.target.className.indexOf('expand-trigger') < 0) {
        return;
      }

      var element = this;
      resetTriggers(this);
      if (this.__resizeRAF__) {
        cancelFrame(this.__resizeRAF__);
      }
      this.__resizeRAF__ = requestFrame(function () {
        if (checkTriggers(element)) {
          element.__resizeLast__.width = element.offsetWidth;
          element.__resizeLast__.height = element.offsetHeight;
          element.__resizeListeners__.forEach(function (fn) {
            fn.call(element, e);
          });
        }
      });
    };

    /* Detect CSS Animations support to detect element display/re-attach */
    var animation = false,
        keyframeprefix = '',
        animationstartevent = 'animationstart',
        domPrefixes = 'Webkit Moz O ms'.split(' '),
        startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),
        pfx = '';
    {
      var elm = document.createElement('fakeelement');
      if (elm.style.animationName !== undefined) {
        animation = true;
      }

      if (animation === false) {
        for (var i = 0; i < domPrefixes.length; i++) {
          if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
            pfx = domPrefixes[i];
            keyframeprefix = '-' + pfx.toLowerCase() + '-';
            animationstartevent = startEvents[i];
            animation = true;
            break;
          }
        }
      }
    }

    var animationName = 'resizeanim';
    var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';
    var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';
  }

  var createStyles = function createStyles() {
    if (!document.getElementById('detectElementResize')) {
      //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360
      var css = (animationKeyframes ? animationKeyframes : '') + '.resize-triggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
          head = document.head || document.getElementsByTagName('head')[0],
          style = document.createElement('style');

      style.id = 'detectElementResize';
      style.type = 'text/css';

      if (nonce != null) {
        style.setAttribute('nonce', nonce);
      }

      if (style.styleSheet) {
        style.styleSheet.cssText = css;
      } else {
        style.appendChild(document.createTextNode(css));
      }

      head.appendChild(style);
    }
  };

  var addResizeListener = function addResizeListener(element, fn) {
    if (attachEvent) {
      element.attachEvent('onresize', fn);
    } else {
      if (!element.__resizeTriggers__) {
        var elementStyle = _window.getComputedStyle(element);
        if (elementStyle && elementStyle.position == 'static') {
          element.style.position = 'relative';
        }
        createStyles();
        element.__resizeLast__ = {};
        element.__resizeListeners__ = [];
        (element.__resizeTriggers__ = document.createElement('div')).className = 'resize-triggers';
        element.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div>' + '<div class="contract-trigger"></div>';
        element.appendChild(element.__resizeTriggers__);
        resetTriggers(element);
        element.addEventListener('scroll', scrollListener, true);

        /* Listen for a css animation to detect element display/re-attach */
        if (animationstartevent) {
          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
            if (e.animationName == animationName) {
              resetTriggers(element);
            }
          };
          element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
        }
      }
      element.__resizeListeners__.push(fn);
    }
  };

  var removeResizeListener = function removeResizeListener(element, fn) {
    if (attachEvent) {
      element.detachEvent('onresize', fn);
    } else {
      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
      if (!element.__resizeListeners__.length) {
        element.removeEventListener('scroll', scrollListener, true);
        if (element.__resizeTriggers__.__animationListener__) {
          element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
          element.__resizeTriggers__.__animationListener__ = null;
        }
        try {
          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
        } catch (e) {
          // Preact compat; see developit/preact-compat/issues/228
        }
      }
    }
  };

  return {
    addResizeListener: addResizeListener,
    removeResizeListener: removeResizeListener
  };
}
},{}],399:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createWrapper;

var _binarySearchBounds = require('./binarySearchBounds');

var _binarySearchBounds2 = _interopRequireDefault(_binarySearchBounds);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NOT_FOUND = 0; /**
                    * Binary Search Bounds
                    * https://github.com/mikolalysenko/interval-tree-1d
                    * Mikola Lysenko
                    *
                    * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax in an upstream dependency.
                    * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
                    **/

var SUCCESS = 1;
var EMPTY = 2;

function IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {
  this.mid = mid;
  this.left = left;
  this.right = right;
  this.leftPoints = leftPoints;
  this.rightPoints = rightPoints;
  this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length;
}

var proto = IntervalTreeNode.prototype;

function copy(a, b) {
  a.mid = b.mid;
  a.left = b.left;
  a.right = b.right;
  a.leftPoints = b.leftPoints;
  a.rightPoints = b.rightPoints;
  a.count = b.count;
}

function rebuild(node, intervals) {
  var ntree = createIntervalTree(intervals);
  node.mid = ntree.mid;
  node.left = ntree.left;
  node.right = ntree.right;
  node.leftPoints = ntree.leftPoints;
  node.rightPoints = ntree.rightPoints;
  node.count = ntree.count;
}

function rebuildWithInterval(node, interval) {
  var intervals = node.intervals([]);
  intervals.push(interval);
  rebuild(node, intervals);
}

function rebuildWithoutInterval(node, interval) {
  var intervals = node.intervals([]);
  var idx = intervals.indexOf(interval);
  if (idx < 0) {
    return NOT_FOUND;
  }
  intervals.splice(idx, 1);
  rebuild(node, intervals);
  return SUCCESS;
}

proto.intervals = function (result) {
  result.push.apply(result, this.leftPoints);
  if (this.left) {
    this.left.intervals(result);
  }
  if (this.right) {
    this.right.intervals(result);
  }
  return result;
};

proto.insert = function (interval) {
  var weight = this.count - this.leftPoints.length;
  this.count += 1;
  if (interval[1] < this.mid) {
    if (this.left) {
      if (4 * (this.left.count + 1) > 3 * (weight + 1)) {
        rebuildWithInterval(this, interval);
      } else {
        this.left.insert(interval);
      }
    } else {
      this.left = createIntervalTree([interval]);
    }
  } else if (interval[0] > this.mid) {
    if (this.right) {
      if (4 * (this.right.count + 1) > 3 * (weight + 1)) {
        rebuildWithInterval(this, interval);
      } else {
        this.right.insert(interval);
      }
    } else {
      this.right = createIntervalTree([interval]);
    }
  } else {
    var l = _binarySearchBounds2.default.ge(this.leftPoints, interval, compareBegin);
    var r = _binarySearchBounds2.default.ge(this.rightPoints, interval, compareEnd);
    this.leftPoints.splice(l, 0, interval);
    this.rightPoints.splice(r, 0, interval);
  }
};

proto.remove = function (interval) {
  var weight = this.count - this.leftPoints;
  if (interval[1] < this.mid) {
    if (!this.left) {
      return NOT_FOUND;
    }
    var rw = this.right ? this.right.count : 0;
    if (4 * rw > 3 * (weight - 1)) {
      return rebuildWithoutInterval(this, interval);
    }
    var r = this.left.remove(interval);
    if (r === EMPTY) {
      this.left = null;
      this.count -= 1;
      return SUCCESS;
    } else if (r === SUCCESS) {
      this.count -= 1;
    }
    return r;
  } else if (interval[0] > this.mid) {
    if (!this.right) {
      return NOT_FOUND;
    }
    var lw = this.left ? this.left.count : 0;
    if (4 * lw > 3 * (weight - 1)) {
      return rebuildWithoutInterval(this, interval);
    }
    var r = this.right.remove(interval);
    if (r === EMPTY) {
      this.right = null;
      this.count -= 1;
      return SUCCESS;
    } else if (r === SUCCESS) {
      this.count -= 1;
    }
    return r;
  } else {
    if (this.count === 1) {
      if (this.leftPoints[0] === interval) {
        return EMPTY;
      } else {
        return NOT_FOUND;
      }
    }
    if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {
      if (this.left && this.right) {
        var p = this;
        var n = this.left;
        while (n.right) {
          p = n;
          n = n.right;
        }
        if (p === this) {
          n.right = this.right;
        } else {
          var l = this.left;
          var r = this.right;
          p.count -= n.count;
          p.right = n.left;
          n.left = l;
          n.right = r;
        }
        copy(this, n);
        this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;
      } else if (this.left) {
        copy(this, this.left);
      } else {
        copy(this, this.right);
      }
      return SUCCESS;
    }
    for (var l = _binarySearchBounds2.default.ge(this.leftPoints, interval, compareBegin); l < this.leftPoints.length; ++l) {
      if (this.leftPoints[l][0] !== interval[0]) {
        break;
      }
      if (this.leftPoints[l] === interval) {
        this.count -= 1;
        this.leftPoints.splice(l, 1);
        for (var r = _binarySearchBounds2.default.ge(this.rightPoints, interval, compareEnd); r < this.rightPoints.length; ++r) {
          if (this.rightPoints[r][1] !== interval[1]) {
            break;
          } else if (this.rightPoints[r] === interval) {
            this.rightPoints.splice(r, 1);
            return SUCCESS;
          }
        }
      }
    }
    return NOT_FOUND;
  }
};

function reportLeftRange(arr, hi, cb) {
  for (var i = 0; i < arr.length && arr[i][0] <= hi; ++i) {
    var r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}

function reportRightRange(arr, lo, cb) {
  for (var i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i) {
    var r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}

function reportRange(arr, cb) {
  for (var i = 0; i < arr.length; ++i) {
    var r = cb(arr[i]);
    if (r) {
      return r;
    }
  }
}

proto.queryPoint = function (x, cb) {
  if (x < this.mid) {
    if (this.left) {
      var r = this.left.queryPoint(x, cb);
      if (r) {
        return r;
      }
    }
    return reportLeftRange(this.leftPoints, x, cb);
  } else if (x > this.mid) {
    if (this.right) {
      var r = this.right.queryPoint(x, cb);
      if (r) {
        return r;
      }
    }
    return reportRightRange(this.rightPoints, x, cb);
  } else {
    return reportRange(this.leftPoints, cb);
  }
};

proto.queryInterval = function (lo, hi, cb) {
  if (lo < this.mid && this.left) {
    var r = this.left.queryInterval(lo, hi, cb);
    if (r) {
      return r;
    }
  }
  if (hi > this.mid && this.right) {
    var r = this.right.queryInterval(lo, hi, cb);
    if (r) {
      return r;
    }
  }
  if (hi < this.mid) {
    return reportLeftRange(this.leftPoints, hi, cb);
  } else if (lo > this.mid) {
    return reportRightRange(this.rightPoints, lo, cb);
  } else {
    return reportRange(this.leftPoints, cb);
  }
};

function compareNumbers(a, b) {
  return a - b;
}

function compareBegin(a, b) {
  var d = a[0] - b[0];
  if (d) {
    return d;
  }
  return a[1] - b[1];
}

function compareEnd(a, b) {
  var d = a[1] - b[1];
  if (d) {
    return d;
  }
  return a[0] - b[0];
}

function createIntervalTree(intervals) {
  if (intervals.length === 0) {
    return null;
  }
  var pts = [];
  for (var i = 0; i < intervals.length; ++i) {
    pts.push(intervals[i][0], intervals[i][1]);
  }
  pts.sort(compareNumbers);

  var mid = pts[pts.length >> 1];

  var leftIntervals = [];
  var rightIntervals = [];
  var centerIntervals = [];
  for (var i = 0; i < intervals.length; ++i) {
    var s = intervals[i];
    if (s[1] < mid) {
      leftIntervals.push(s);
    } else if (mid < s[0]) {
      rightIntervals.push(s);
    } else {
      centerIntervals.push(s);
    }
  }

  //Split center intervals
  var leftPoints = centerIntervals;
  var rightPoints = centerIntervals.slice();
  leftPoints.sort(compareBegin);
  rightPoints.sort(compareEnd);

  return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);
}

//User friendly wrapper that makes it possible to support empty trees
function IntervalTree(root) {
  this.root = root;
}

var tproto = IntervalTree.prototype;

tproto.insert = function (interval) {
  if (this.root) {
    this.root.insert(interval);
  } else {
    this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval]);
  }
};

tproto.remove = function (interval) {
  if (this.root) {
    var r = this.root.remove(interval);
    if (r === EMPTY) {
      this.root = null;
    }
    return r !== NOT_FOUND;
  }
  return false;
};

tproto.queryPoint = function (p, cb) {
  if (this.root) {
    return this.root.queryPoint(p, cb);
  }
};

tproto.queryInterval = function (lo, hi, cb) {
  if (lo <= hi && this.root) {
    return this.root.queryInterval(lo, hi, cb);
  }
};

Object.defineProperty(tproto, 'count', {
  get: function get() {
    if (this.root) {
      return this.root.count;
    }
    return 0;
  }
});

Object.defineProperty(tproto, 'intervals', {
  get: function get() {
    if (this.root) {
      return this.root.intervals([]);
    }
    return [];
  }
});

function createWrapper(intervals) {
  if (!intervals || intervals.length === 0) {
    return new IntervalTree(null);
  }
  return new IntervalTree(createIntervalTree(intervals));
}
},{"./binarySearchBounds":397}],400:[function(require,module,exports){
arguments[4][327][0].apply(exports,arguments)
},{"dup":327}],401:[function(require,module,exports){
arguments[4][328][0].apply(exports,arguments)
},{"_process":172,"dup":328}],402:[function(require,module,exports){
arguments[4][329][0].apply(exports,arguments)
},{"./emptyFunction":400,"_process":172,"dup":329}],403:[function(require,module,exports){
arguments[4][330][0].apply(exports,arguments)
},{"./lib/ReactPropTypesSecret":407,"_process":172,"dup":330,"fbjs/lib/invariant":401,"fbjs/lib/warning":402}],404:[function(require,module,exports){
arguments[4][331][0].apply(exports,arguments)
},{"./lib/ReactPropTypesSecret":407,"dup":331,"fbjs/lib/emptyFunction":400,"fbjs/lib/invariant":401}],405:[function(require,module,exports){
arguments[4][332][0].apply(exports,arguments)
},{"./checkPropTypes":403,"./lib/ReactPropTypesSecret":407,"_process":172,"dup":332,"fbjs/lib/emptyFunction":400,"fbjs/lib/invariant":401,"fbjs/lib/warning":402,"object-assign":171}],406:[function(require,module,exports){
arguments[4][333][0].apply(exports,arguments)
},{"./factoryWithThrowingShims":404,"./factoryWithTypeCheckers":405,"_process":172,"dup":333}],407:[function(require,module,exports){
arguments[4][334][0].apply(exports,arguments)
},{"dup":334}],408:[function(require,module,exports){
arguments[4][209][0].apply(exports,arguments)
},{"dup":209}],409:[function(require,module,exports){
arguments[4][211][0].apply(exports,arguments)
},{"./reactProdInvariant":431,"_process":172,"dup":211,"fbjs/lib/invariant":161}],410:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactBaseClasses = require('./ReactBaseClasses');
var ReactChildren = require('./ReactChildren');
var ReactDOMFactories = require('./ReactDOMFactories');
var ReactElement = require('./ReactElement');
var ReactPropTypes = require('./ReactPropTypes');
var ReactVersion = require('./ReactVersion');

var createReactClass = require('./createClass');
var onlyChild = require('./onlyChild');

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var lowPriorityWarning = require('./lowPriorityWarning');
  var canDefineProperty = require('./canDefineProperty');
  var ReactElementValidator = require('./ReactElementValidator');
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;
var createMixin = function (mixin) {
  return mixin;
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForSpread = false;
  var warnedForCreateMixin = false;
  __spread = function () {
    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
    warnedForSpread = true;
    return _assign.apply(null, arguments);
  };

  createMixin = function (mixin) {
    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
    warnedForCreateMixin = true;
    return mixin;
  };
}

var React = {
  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: createReactClass,
  createFactory: createFactory,
  createMixin: createMixin,

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

if (process.env.NODE_ENV !== 'production') {
  var warnedForCreateClass = false;
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function () {
        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function () {
        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
        warnedForCreateClass = true;
        return createReactClass;
      }
    });
  }

  // React.DOM factories are deprecated. Wrap these methods so that
  // invocations of the React.DOM namespace and alert users to switch
  // to the `react-dom-factories` package.
  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories).forEach(function (factory) {
    React.DOM[factory] = function () {
      if (!warnedForFactories) {
        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
        warnedForFactories = true;
      }
      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
    };
  });
}

module.exports = React;
}).call(this,require('_process'))
},{"./ReactBaseClasses":411,"./ReactChildren":412,"./ReactDOMFactories":415,"./ReactElement":416,"./ReactElementValidator":418,"./ReactPropTypes":421,"./ReactVersion":423,"./canDefineProperty":424,"./createClass":426,"./lowPriorityWarning":429,"./onlyChild":430,"_process":172,"object-assign":171}],411:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant'),
    _assign = require('object-assign');

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');

var canDefineProperty = require('./canDefineProperty');
var emptyObject = require('fbjs/lib/emptyObject');
var invariant = require('fbjs/lib/invariant');
var lowPriorityWarning = require('./lowPriorityWarning');

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};
}).call(this,require('_process'))
},{"./ReactNoopUpdateQueue":419,"./canDefineProperty":424,"./lowPriorityWarning":429,"./reactProdInvariant":431,"_process":172,"fbjs/lib/emptyObject":154,"fbjs/lib/invariant":161,"object-assign":171}],412:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var PooledClass = require('./PooledClass');
var ReactElement = require('./ReactElement');

var emptyFunction = require('fbjs/lib/emptyFunction');
var traverseAllChildren = require('./traverseAllChildren');

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
},{"./PooledClass":409,"./ReactElement":416,"./traverseAllChildren":432,"fbjs/lib/emptyFunction":153}],413:[function(require,module,exports){
(function (process){
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty
  // Strip regex characters so we can use it for regex
  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
  // Remove hasOwnProperty from the template to make it generic
  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs,

  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
    if (typeof console.reactStack !== 'function') {
      return;
    }

    var stack = [];
    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    try {
      if (isCreatingElement) {
        stack.push({
          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
          fileName: currentSource ? currentSource.fileName : null,
          lineNumber: currentSource ? currentSource.lineNumber : null
        });
      }

      while (id) {
        var element = ReactComponentTreeHook.getElement(id);
        var parentID = ReactComponentTreeHook.getParentID(id);
        var ownerID = ReactComponentTreeHook.getOwnerID(id);
        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
        var source = element && element._source;
        stack.push({
          name: ownerName,
          fileName: source ? source.fileName : null,
          lineNumber: source ? source.lineNumber : null
        });
        id = parentID;
      }
    } catch (err) {
      // Internal state is messed up.
      // Stop building the stack (it's just a nice to have).
    }

    console.reactStack(stack);
  },
  popNonStandardWarningStack: function () {
    if (typeof console.reactStackEnd !== 'function') {
      return;
    }
    console.reactStackEnd();
  }
};

module.exports = ReactComponentTreeHook;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":414,"./reactProdInvariant":431,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168}],414:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

module.exports = ReactCurrentOwner;
},{}],415:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var ReactElement = require('./ReactElement');

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require('./ReactElementValidator');
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
}).call(this,require('_process'))
},{"./ReactElement":416,"./ReactElementValidator":418,"_process":172}],416:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _assign = require('object-assign');

var ReactCurrentOwner = require('./ReactCurrentOwner');

var warning = require('fbjs/lib/warning');
var canDefineProperty = require('./canDefineProperty');
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}).call(this,require('_process'))
},{"./ReactCurrentOwner":414,"./ReactElementSymbol":417,"./canDefineProperty":424,"_process":172,"fbjs/lib/warning":168,"object-assign":171}],417:[function(require,module,exports){
arguments[4][238][0].apply(exports,arguments)
},{"dup":238}],418:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */

'use strict';

var ReactCurrentOwner = require('./ReactCurrentOwner');
var ReactComponentTreeHook = require('./ReactComponentTreeHook');
var ReactElement = require('./ReactElement');

var checkReactTypeSpec = require('./checkReactTypeSpec');

var canDefineProperty = require('./canDefineProperty');
var getIteratorFn = require('./getIteratorFn');
var warning = require('fbjs/lib/warning');
var lowPriorityWarning = require('./lowPriorityWarning');

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {
  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
        ReactComponentTreeHook.popNonStandardWarningStack();
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }
};

module.exports = ReactElementValidator;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":413,"./ReactCurrentOwner":414,"./ReactElement":416,"./canDefineProperty":424,"./checkReactTypeSpec":425,"./getIteratorFn":427,"./lowPriorityWarning":429,"_process":172,"fbjs/lib/warning":168}],419:[function(require,module,exports){
(function (process){
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var warning = require('fbjs/lib/warning');

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
}).call(this,require('_process'))
},{"_process":172,"fbjs/lib/warning":168}],420:[function(require,module,exports){
arguments[4][256][0].apply(exports,arguments)
},{"_process":172,"dup":256}],421:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _require = require('./ReactElement'),
    isValidElement = _require.isValidElement;

var factory = require('prop-types/factory');

module.exports = factory(isValidElement);
},{"./ReactElement":416,"prop-types/factory":174}],422:[function(require,module,exports){
arguments[4][257][0].apply(exports,arguments)
},{"dup":257}],423:[function(require,module,exports){
arguments[4][265][0].apply(exports,arguments)
},{"dup":265}],424:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
}).call(this,require('_process'))
},{"_process":172}],425:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');
var ReactPropTypesSecret = require('./ReactPropTypesSecret');

var invariant = require('fbjs/lib/invariant');
var warning = require('fbjs/lib/warning');

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = require('./ReactComponentTreeHook');
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require('./ReactComponentTreeHook');
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}).call(this,require('_process'))
},{"./ReactComponentTreeHook":413,"./ReactPropTypeLocationNames":420,"./ReactPropTypesSecret":422,"./reactProdInvariant":431,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168}],426:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _require = require('./ReactBaseClasses'),
    Component = _require.Component;

var _require2 = require('./ReactElement'),
    isValidElement = _require2.isValidElement;

var ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');
var factory = require('create-react-class/factory');

module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);
},{"./ReactBaseClasses":411,"./ReactElement":416,"./ReactNoopUpdateQueue":419,"create-react-class/factory":143}],427:[function(require,module,exports){
arguments[4][298][0].apply(exports,arguments)
},{"dup":298}],428:[function(require,module,exports){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

'use strict';

var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;
},{}],429:[function(require,module,exports){
(function (process){
/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

/**
 * Forked from fbjs/warning:
 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
 *
 * Only change is we use console.warn instead of console.error,
 * and do nothing when 'console' is not supported.
 * This really simplifies the code.
 * ---
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var lowPriorityWarning = function () {};

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function (format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.warn(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  lowPriorityWarning = function (condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = lowPriorityWarning;
}).call(this,require('_process'))
},{"_process":172}],430:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */
'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactElement = require('./ReactElement');

var invariant = require('fbjs/lib/invariant');

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
}).call(this,require('_process'))
},{"./ReactElement":416,"./reactProdInvariant":431,"_process":172,"fbjs/lib/invariant":161}],431:[function(require,module,exports){
arguments[4][307][0].apply(exports,arguments)
},{"dup":307}],432:[function(require,module,exports){
(function (process){
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

'use strict';

var _prodInvariant = require('./reactProdInvariant');

var ReactCurrentOwner = require('./ReactCurrentOwner');
var REACT_ELEMENT_TYPE = require('./ReactElementSymbol');

var getIteratorFn = require('./getIteratorFn');
var invariant = require('fbjs/lib/invariant');
var KeyEscapeUtils = require('./KeyEscapeUtils');
var warning = require('fbjs/lib/warning');

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}).call(this,require('_process'))
},{"./KeyEscapeUtils":408,"./ReactCurrentOwner":414,"./ReactElementSymbol":417,"./getIteratorFn":427,"./reactProdInvariant":431,"_process":172,"fbjs/lib/invariant":161,"fbjs/lib/warning":168}],433:[function(require,module,exports){
'use strict';

module.exports = require('./lib/React');

},{"./lib/React":410}],434:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// errors
var ERROR_MISSING_MACHINE = exports.ERROR_MISSING_MACHINE = function ERROR_MISSING_MACHINE(name) {
  return 'There\'s no machine with name ' + name;
};
var ERROR_MISSING_STATE = exports.ERROR_MISSING_STATE = 'Configuration error: missing initial "state"';
var ERROR_MISSING_TRANSITIONS = exports.ERROR_MISSING_TRANSITIONS = 'Configuration error: missing "transitions"';
var ERROR_WRONG_STATE_FORMAT = exports.ERROR_WRONG_STATE_FORMAT = function ERROR_WRONG_STATE_FORMAT(state) {
  var serialized = (typeof state === 'undefined' ? 'undefined' : _typeof(state)) === 'object' ? JSON.stringify(state, null, 2) : state;

  return 'The state should be an object and it should always have at least "name" property. You passed ' + serialized;
};
var ERROR_UNCOVERED_STATE = exports.ERROR_UNCOVERED_STATE = function ERROR_UNCOVERED_STATE(state) {
  return 'You just transitioned the machine to a state (' + state + ') which is not defined or it has no actions. This means that the machine is stuck.';
};
var ERROR_NOT_SUPPORTED_HANDLER_TYPE = exports.ERROR_NOT_SUPPORTED_HANDLER_TYPE = 'Wrong handler type passed. Please read the docs https://github.com/krasimir/stent';
var ERROR_RESERVED_WORD_USED_AS_ACTION = exports.ERROR_RESERVED_WORD_USED_AS_ACTION = function ERROR_RESERVED_WORD_USED_AS_ACTION(word) {
  return 'Sorry, you can\'t use ' + word + ' as a name for an action. It is reserved.';
};

// middlewares
var MIDDLEWARE_PROCESS_ACTION = exports.MIDDLEWARE_PROCESS_ACTION = 'onActionDispatched';
var MIDDLEWARE_ACTION_PROCESSED = exports.MIDDLEWARE_ACTION_PROCESSED = 'onActionProcessed';
var MIDDLEWARE_STATE_WILL_CHANGE = exports.MIDDLEWARE_STATE_WILL_CHANGE = 'onStateWillChange';
var MIDDLEWARE_PROCESS_STATE_CHANGE = exports.MIDDLEWARE_PROCESS_STATE_CHANGE = 'onStateChanged';
var MIDDLEWARE_GENERATOR_STEP = exports.MIDDLEWARE_GENERATOR_STEP = 'onGeneratorStep';
var MIDDLEWARE_GENERATOR_END = exports.MIDDLEWARE_GENERATOR_END = 'onGeneratorEnd';
var MIDDLEWARE_GENERATOR_RESUMED = exports.MIDDLEWARE_GENERATOR_RESUMED = 'onGeneratorResumed';
var MIDDLEWARE_MACHINE_CREATED = exports.MIDDLEWARE_MACHINE_CREATED = 'onMachineCreated';
var MIDDLEWARE_MACHINE_CONNECTED = exports.MIDDLEWARE_MACHINE_CONNECTED = 'onMachineConnected';
var MIDDLEWARE_MACHINE_DISCONNECTED = exports.MIDDLEWARE_MACHINE_DISCONNECTED = 'onMachineDisconnected';
var MIDDLEWARE_REGISTERED = exports.MIDDLEWARE_REGISTERED = 'onMiddlewareRegister';

// misc
var DEVTOOLS_KEY = exports.DEVTOOLS_KEY = '__hello__stent__';
},{}],435:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = createMachine;

var _handleAction = require('./helpers/handleAction');

var _handleAction2 = _interopRequireDefault(_handleAction);

var _handleActionLatest = require('./helpers/handleActionLatest');

var _handleActionLatest2 = _interopRequireDefault(_handleActionLatest);

var _validateConfig = require('./helpers/validateConfig');

var _validateConfig2 = _interopRequireDefault(_validateConfig);

var _registerMethods = require('./helpers/registerMethods');

var _registerMethods2 = _interopRequireDefault(_registerMethods);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var IDX = 0;
var getMachineID = function getMachineID() {
  return '_@@@' + ++IDX;
};

function createMachine(name, config) {
  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
    if (typeof config === 'undefined') {
      config = name;
      name = getMachineID();
    } else {
      config = {
        state: name,
        transitions: config
      };
      name = getMachineID();
    }
  }

  var machine = { name: name };

  (0, _validateConfig2.default)(config);

  var _config = config,
      initialState = _config.state,
      transitions = _config.transitions,
      customMethods = _objectWithoutProperties(_config, ['state', 'transitions']);

  var dispatch = function dispatch(action) {
    for (var _len = arguments.length, payload = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      payload[_key - 1] = arguments[_key];
    }

    return _handleAction2.default.apply(undefined, [machine, action].concat(payload));
  };
  var dispatchLatest = function dispatchLatest(action) {
    for (var _len2 = arguments.length, payload = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      payload[_key2 - 1] = arguments[_key2];
    }

    return _handleActionLatest2.default.apply(undefined, [machine, action].concat(payload));
  };

  machine.state = initialState;
  machine.transitions = transitions;

  if (customMethods) {
    for (var key in customMethods) {
      machine[key] = customMethods[key];
    }
  }

  (0, _registerMethods2.default)(machine, transitions, dispatch, dispatchLatest);

  return machine;
}
module.exports = exports['default'];
},{"./helpers/handleAction":438,"./helpers/handleActionLatest":439,"./helpers/registerMethods":443,"./helpers/validateConfig":447}],436:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.flush = flush;
exports.getMapping = getMapping;
exports.destroy = destroy;
exports.default = connect;

var _ = require('../');

var _handleMiddleware = require('./handleMiddleware');

var _handleMiddleware2 = _interopRequireDefault(_handleMiddleware);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var idIndex = 0;
var mappings = null;

var getId = function getId() {
  return 'm' + ++idIndex;
};
var setup = function setup() {
  if (mappings !== null) return;
  mappings = {};
  _.Machine.addMiddleware({
    onStateChanged: function onStateChanged() {
      for (var id in mappings) {
        var _mappings$id = mappings[id],
            done = _mappings$id.done,
            machines = _mappings$id.machines;


        if (machines.map(function (m) {
          return m.name;
        }).indexOf(this.name) >= 0) {
          done && done.apply(undefined, machines);
        }
      }
    }
  });
};

function flush() {
  mappings = null;
}

function getMapping() {
  return mappings;
}

function destroy(machineId) {
  for (var mId in mappings) {
    mappings[mId].machines = mappings[mId].machines.filter(function (_ref) {
      var name = _ref.name;
      return name !== machineId;
    });
    (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_MACHINE_DISCONNECTED, null, mappings[mId].machines);
    if (mappings[mId].machines.length === 0) {
      delete mappings[mId];
    }
  }
}

function connect() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      meta = _ref2.meta;

  setup();
  var withFunc = function withFunc() {
    for (var _len = arguments.length, names = Array(_len), _key = 0; _key < _len; _key++) {
      names[_key] = arguments[_key];
    }

    var machines = names.map(function (name) {
      return _.Machine.get(name);
    });
    var mapFunc = function mapFunc(done, once, silent) {
      var id = getId();

      !once && (mappings[id] = { done: done, machines: machines });
      !silent && done && done.apply(undefined, machines);

      return function disconnect() {
        (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_MACHINE_DISCONNECTED, null, machines, meta);
        if (mappings && mappings[id]) delete mappings[id];
      };
    };

    (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_MACHINE_CONNECTED, null, machines, meta);
    return {
      'map': mapFunc,
      'mapOnce': function mapOnce(done) {
        return mapFunc(done, true);
      },
      'mapSilent': function mapSilent(done) {
        return mapFunc(done, false, true);
      }
    };
  };

  return { 'with': withFunc };
}
},{"../":449,"../constants":434,"./handleMiddleware":441}],437:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = call;
function call(func) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return { __type: 'call', func: func, args: args };
};
module.exports = exports['default'];
},{}],438:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = handleAction;

var _constants = require('../constants');

var _updateState = require('./updateState');

var _updateState2 = _interopRequireDefault(_updateState);

var _handleMiddleware = require('./handleMiddleware');

var _handleMiddleware2 = _interopRequireDefault(_handleMiddleware);

var _handleGenerator = require('./handleGenerator');

var _handleGenerator2 = _interopRequireDefault(_handleGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function handleAction(machine, action) {
  for (var _len = arguments.length, payload = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    payload[_key - 2] = arguments[_key];
  }

  var state = machine.state,
      transitions = machine.transitions;


  if (!transitions[state.name]) return false;

  var handler = transitions[state.name][action];

  if (typeof handler === 'undefined') return false;

  _handleMiddleware2.default.apply(undefined, [_constants.MIDDLEWARE_PROCESS_ACTION, machine, action].concat(payload));

  // string as a handler
  if (typeof handler === 'string') {
    (0, _updateState2.default)(machine, _extends({}, state, { name: transitions[state.name][action] }));

    // object as a handler
  } else if ((typeof handler === 'undefined' ? 'undefined' : _typeof(handler)) === 'object') {
    (0, _updateState2.default)(machine, handler);

    // function as a handler
  } else if (typeof handler === 'function') {
    var response = transitions[state.name][action].apply(machine, [machine.state].concat(payload));

    // generator
    if (response && typeof response.next === 'function') {
      var generator = response;

      return (0, _handleGenerator2.default)(machine, generator, function (response) {
        (0, _updateState2.default)(machine, response);
        _handleMiddleware2.default.apply(undefined, [_constants.MIDDLEWARE_ACTION_PROCESSED, machine, action].concat(payload));
      });
    } else {
      (0, _updateState2.default)(machine, response);
    }

    // wrong type of handler
  } else {
    throw new Error(_constants.ERROR_NOT_SUPPORTED_HANDLER_TYPE);
  }

  _handleMiddleware2.default.apply(undefined, [_constants.MIDDLEWARE_ACTION_PROCESSED, machine, action].concat(payload));
};
module.exports = exports['default'];
},{"../constants":434,"./handleGenerator":440,"./handleMiddleware":441,"./updateState":446}],439:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = handleActionLatest;

var _handleAction = require('./handleAction');

var _handleAction2 = _interopRequireDefault(_handleAction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var actions = {};

function handleActionLatest(machine, action) {
  actions[action] && actions[action]();

  for (var _len = arguments.length, payload = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    payload[_key - 2] = arguments[_key];
  }

  actions[action] = _handleAction2.default.apply(undefined, [machine, action].concat(payload));
};
module.exports = exports['default'];
},{"./handleAction":438}],440:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = handleGenerator;

var _handleMiddleware = require('./handleMiddleware');

var _handleMiddleware2 = _interopRequireDefault(_handleMiddleware);

var _constants = require('../constants');

var _updateState = require('./updateState');

var _updateState2 = _interopRequireDefault(_updateState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function handleGenerator(machine, generator, done, resultOfPreviousOperation) {
  var generatorNext = function generatorNext(gen, res) {
    return !canceled && gen.next(res);
  };
  var generatorThrow = function generatorThrow(gen, error) {
    return !canceled && gen.throw(error);
  };
  var cancelGenerator = function cancelGenerator() {
    cancelInsideGenerator && cancelInsideGenerator();
    canceled = true;
  };
  var canceled = false;
  var cancelInsideGenerator;

  var iterate = function iterate(result) {
    if (canceled) return;

    if (!result.done) {
      (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_GENERATOR_STEP, machine, result.value);

      // yield call
      if (_typeof(result.value) === 'object' && result.value.__type === 'call') {
        var _result$value = result.value,
            func = _result$value.func,
            args = _result$value.args;

        var funcResult = func.apply(machine, args);

        // promise
        if (typeof funcResult.then !== 'undefined') {
          funcResult.then(function (result) {
            (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_GENERATOR_RESUMED, machine, result);
            return iterate(generatorNext(generator, result));
          }, function (error) {
            (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_GENERATOR_RESUMED, machine, error);
            return iterate(generatorThrow(generator, error));
          });
          // generator
        } else if (typeof funcResult.next === 'function') {
          cancelInsideGenerator = handleGenerator(machine, funcResult, function (generatorResult) {
            (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_GENERATOR_RESUMED, machine, generatorResult);
            iterate(generatorNext(generator, generatorResult));
          });
        } else {
          (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_GENERATOR_RESUMED, machine, funcResult);
          iterate(generatorNext(generator, funcResult));
        }

        // a return statement of the normal function
      } else {
        (0, _updateState2.default)(machine, result.value);
        (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_GENERATOR_RESUMED, machine);
        iterate(generatorNext(generator));
      }

      // the end of the generator (return statement)
    } else {
      (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_GENERATOR_END, machine, result.value);
      done(result.value);
    }
  };

  iterate(generatorNext(generator, resultOfPreviousOperation));

  return cancelGenerator;
}
module.exports = exports['default'];
},{"../constants":434,"./handleMiddleware":441,"./updateState":446}],441:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = handleMiddleware;

var _ = require('../');

function handleMiddleware(hook, machine) {
  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  var middlewares = _.Machine.middlewares;

  if (middlewares.length === 0) {
    return;
  }

  var loop = function loop(index, process) {
    return index < middlewares.length - 1 ? process(index + 1) : null;
  };

  (function process(index) {
    var middleware = middlewares[index];

    if (middleware && typeof middleware[hook] !== 'undefined') {
      middleware[hook].apply(machine, args);
    }
    loop(index, process);
  })(0);
}
module.exports = exports['default'];
},{"../":449}],442:[function(require,module,exports){
"use strict";

exports.__esModule = true;
exports.default = isEmptyObject;
function isEmptyObject(obj) {
  var name;
  for (name in obj) {
    if (obj.hasOwnProperty(name)) return false;
  }
  return true;
}
module.exports = exports['default'];
},{}],443:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = registerMethods;

var _toCamelCase = require('./toCamelCase');

var _toCamelCase2 = _interopRequireDefault(_toCamelCase);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reserved = ['name', 'transitions', 'state', 'destroy'];

function registerMethods(machine, transitions, dispatch, dispatchLatest) {
  for (var state in transitions) {

    (function (state) {
      machine[(0, _toCamelCase2.default)('is ' + state)] = function () {
        return machine.state.name === state;
      };
    })(state);

    for (var action in transitions[state]) {
      var normalized = (0, _toCamelCase2.default)(action);
      if (reserved.indexOf(normalized) >= 0) throw new Error((0, _constants.ERROR_RESERVED_WORD_USED_AS_ACTION)(normalized));
      (function (n, a) {
        machine[n] = function () {
          for (var _len = arguments.length, payload = Array(_len), _key = 0; _key < _len; _key++) {
            payload[_key] = arguments[_key];
          }

          return dispatch.apply(undefined, [a].concat(payload));
        };
        machine[n].latest = function () {
          for (var _len2 = arguments.length, payload = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            payload[_key2] = arguments[_key2];
          }

          return dispatchLatest.apply(undefined, [a].concat(payload));
        };
      })(normalized, action);
    }
  }
}
module.exports = exports['default'];
},{"../constants":434,"./toCamelCase":444}],444:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (text) {
  return text.toLowerCase().replace(/\W+(.)/g, function (match, chr) {
    return chr.toUpperCase();
  });
};

module.exports = exports['default'];
},{}],445:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = uid;
function uid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = Math.random() * 16 | 0,
        v = c == 'x' ? r : r & 0x3 | 0x8;
    return v.toString(16);
  });
}
module.exports = exports['default'];
},{}],446:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.default = updateState;

var _validateState = require('./validateState');

var _validateState2 = _interopRequireDefault(_validateState);

var _isEmptyObject = require('./isEmptyObject');

var _isEmptyObject2 = _interopRequireDefault(_isEmptyObject);

var _handleMiddleware = require('./handleMiddleware');

var _handleMiddleware2 = _interopRequireDefault(_handleMiddleware);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function updateState(machine, state) {
  var newState;

  if (typeof state === 'undefined') return;
  if (typeof state === 'string' || typeof state === 'number') {
    newState = { name: state.toString() };
  } else {
    newState = (0, _validateState2.default)(state);
  }

  if (typeof machine.transitions[newState.name] === 'undefined' || (0, _isEmptyObject2.default)(machine.transitions[newState.name])) {
    throw new Error((0, _constants.ERROR_UNCOVERED_STATE)(newState.name));
  }

  (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_STATE_WILL_CHANGE, machine);

  machine.state = newState;

  (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_PROCESS_STATE_CHANGE, machine);
}
module.exports = exports['default'];
},{"../constants":434,"./handleMiddleware":441,"./isEmptyObject":442,"./validateState":448}],447:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = validateConfig;

var _constants = require('../constants');

function validateConfig(config) {
  if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) !== 'object') throw new Error(_constants.ERROR_MISSING_STATE);

  var state = config.state,
      transitions = config.transitions;


  if ((typeof state === 'undefined' ? 'undefined' : _typeof(state)) !== 'object') throw new Error(_constants.ERROR_MISSING_STATE);
  if ((typeof transitions === 'undefined' ? 'undefined' : _typeof(transitions)) !== 'object') throw new Error(_constants.ERROR_MISSING_TRANSITIONS);
  return true;
}
module.exports = exports['default'];
},{"../constants":434}],448:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = validateState;

var _constants = require('../constants');

function validateState(state) {
  if (state && (typeof state === 'undefined' ? 'undefined' : _typeof(state)) === 'object' && typeof state.name !== 'undefined') return state;
  throw new Error((0, _constants.ERROR_WRONG_STATE_FORMAT)(state));
}
module.exports = exports['default'];
},{"../constants":434}],449:[function(require,module,exports){
'use strict';

exports.__esModule = true;
exports.Machine = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createMachine = require('./createMachine');

var _createMachine2 = _interopRequireDefault(_createMachine);

var _constants = require('./constants');

var _connect = require('./helpers/connect');

var _connect2 = _interopRequireDefault(_connect);

var _call = require('./helpers/generators/call');

var _call2 = _interopRequireDefault(_call);

var _handleMiddleware = require('./helpers/handleMiddleware');

var _handleMiddleware2 = _interopRequireDefault(_handleMiddleware);

var _uid = require('./helpers/uid');

var _uid2 = _interopRequireDefault(_uid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MachineFactory = function () {
  function MachineFactory() {
    _classCallCheck(this, MachineFactory);

    this.machines = {};
    this.middlewares = [];
    this.connect = _connect2.default;
    this.call = _call2.default;
  }

  MachineFactory.prototype.create = function create(name, config) {
    var _this = this;

    var machine = (0, _createMachine2.default)(name, config, this.middlewares);

    this.machines[machine.name] = machine;
    (0, _handleMiddleware2.default)(_constants.MIDDLEWARE_MACHINE_CREATED, machine, machine);
    machine.destroy = function () {
      return _this.destroy(machine);
    };
    return machine;
  };

  MachineFactory.prototype.get = function get(name) {
    if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') name = name.name;
    if (this.machines[name]) return this.machines[name];
    throw new Error((0, _constants.ERROR_MISSING_MACHINE)(name));
  };

  MachineFactory.prototype.flush = function flush() {
    this.machines = {};
    this.middlewares = [];
    (0, _connect.flush)();
  };

  MachineFactory.prototype.addMiddleware = function addMiddleware(middleware) {
    if (Array.isArray(middleware)) {
      this.middlewares = this.middlewares.concat(middleware);
    } else {
      this.middlewares.push(middleware);
    }
    if (middleware.__initialize) middleware.__initialize(this, (0, _uid2.default)());
    if (middleware[_constants.MIDDLEWARE_REGISTERED]) middleware[_constants.MIDDLEWARE_REGISTERED]();
  };

  MachineFactory.prototype.destroy = function destroy(machine) {
    var m = machine;
    if (typeof machine === 'string') {
      m = this.machines[machine];
      if (!m) throw new Error((0, _constants.ERROR_MISSING_MACHINE)(machine));
    }
    delete this.machines[m.name];
    (0, _connect.destroy)(m.name);
  };

  return MachineFactory;
}();

var factory = new MachineFactory();

exports.Machine = factory;


if (typeof window !== 'undefined') {
  window[_constants.DEVTOOLS_KEY] = factory;
}
},{"./constants":434,"./createMachine":435,"./helpers/connect":436,"./helpers/generators/call":437,"./helpers/handleMiddleware":441,"./helpers/uid":445}],450:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = function (Component) {
  var withFunc = function withFunc() {
    for (var _len = arguments.length, names = Array(_len), _key = 0; _key < _len; _key++) {
      names[_key] = arguments[_key];
    }

    var mapFunc = function mapFunc(done, once, silent) {
      return function (_React$Component) {
        _inherits(StentConnect, _React$Component);

        function StentConnect() {
          _classCallCheck(this, StentConnect);

          return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
        }

        StentConnect.prototype.componentWillMount = function componentWillMount() {
          var _connect,
              _this2 = this;

          var mapping = 'map';

          if (once) mapping = 'mapOnce';
          if (silent) mapping = 'mapSilent';

          this._disconnect = (_connect = (0, _connect3.default)({
            meta: { component: Component.name }
          })).with.apply(_connect, names)[mapping](function () {
            if (!done) {
              _this2.forceUpdate();
            } else {
              _this2.setState(done.apply(undefined, arguments));
            }
          });
        };

        StentConnect.prototype.componentWillUnmount = function componentWillUnmount() {
          this._disconnect();
        };

        StentConnect.prototype.render = function render() {
          return _react2.default.createElement(Component, _extends({}, this.state, this.props));
        };

        return StentConnect;
      }(_react2.default.Component);;
    };

    return {
      'map': mapFunc,
      'mapOnce': function mapOnce(done) {
        return mapFunc(done, true);
      },
      'mapSilent': function mapSilent(done) {
        return mapFunc(done, false, true);
      }
    };
  };

  return { 'with': withFunc };
};

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _connect2 = require('../helpers/connect');

var _connect3 = _interopRequireDefault(_connect2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

module.exports = exports['default'];
},{"../helpers/connect":436,"react":433}],451:[function(require,module,exports){
'use strict';

exports.__esModule = true;

var _connect = require('./connect');

var _connect2 = _interopRequireDefault(_connect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = { connect: _connect2.default };
module.exports = exports['default'];
},{"./connect":450}],452:[function(require,module,exports){
module.exports={
  "name": "working",
  "page": "LOG",
  "pinnedEvent": {
    "time": 1512914994508,
    "uid": "redux",
    "state": {
      "contactRequest": {
        "status": "IDLE",
        "error": null
      },
      "content": {
        "searchAttribution": null,
        "questionHelp": null
      },
      "l10n": {
        "current": "en",
        "locales": [
          "en",
          "es",
          "fr",
          "de"
        ],
        "messages": {}
      },
      "questionnaire": {
        "steps": [
          {
            "type": "MATCH_QUESTION",
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "answer": "Type 2 Diabetes",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            },
            "wording": "For what condition are you looking to find a clinical trial?",
            "returnValue": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "returnValue": {
              "properties": {
                "geo": {
                  "properties": {
                    "latitude": {
                      "type": "number"
                    },
                    "longitude": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "geo"
              ],
              "type": "object"
            },
            "answer": "New York, NY, United States",
            "value": {
              "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                "geo": {
                  "latitude": 40.7127753,
                  "longitude": -74.0059728
                },
                "country": "United States",
                "countryCode": "US",
                "state": "NY",
                "city": "New York",
                "zip": "",
                "streetAddress": "",
                "formattedAddress": "New York, NY, USA"
              }
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 40300000,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            },
            "answer": "20 miles",
            "value": {
              "f565b298-b6e8-5715-b679-c6486a438459": 32187
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "canonicalUnit": "a",
            "wording": "How old are you?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 150,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            },
            "answer": "33",
            "value": {
              "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "returnValue": {
              "enum": [
                "male",
                "female"
              ],
              "type": "string"
            },
            "answer": "Male",
            "value": {
              "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
            }
          },
          {
            "type": "EMAIL_QUESTION",
            "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
          },
          {
            "type": "MATCH_QUESTION",
            "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
            "wording": "Do you currently have type 2 diabetes mellitus?",
            "returnValue": {
              "oneOf": [
                {
                  "description": "type 2 diabetes mellitus",
                  "type": "boolean"
                },
                {
                  "enum": [
                    "skip",
                    "idk"
                  ],
                  "type": "string"
                }
              ]
            }
          }
        ],
        "current": 5,
        "fastForward": false,
        "pending": false,
        "progress": 0.3333333333333333,
        "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
        "universe": null
      },
      "registration": {
        "fields": {
          "email": {
            "validators": [
              {
                "__func": "<anonymous>"
              }
            ]
          }
        },
        "values": {
          "email": ""
        },
        "errors": {},
        "pending": false,
        "registered": false
      },
      "sites": {
        "locations": [],
        "selectedCountry": null,
        "selectedState": null,
        "selectedCity": null,
        "selectedLocation": null
      },
      "studies": {
        "matches": [],
        "totalMatches": 30,
        "pending": false,
        "error": null
      },
      "studyData": null,
      "user": {
        "patientAttributes": {},
        "userLocation": null,
        "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
        "preferences": {
          "hideEmailCapture": false
        }
      }
    },
    "type": "@redux_ACTION",
    "action": {
      "type": "CONTENT_REQUEST_FAILURE",
      "contentType": "questionHelp",
      "contentQuery": {
        "fields.id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed",
        "locale": "en"
      }
    },
    "icon": "fa-gear",
    "color": "#e7f7e3",
    "origin": "http://local.antidote.me/match/2.0/questions/6",
    "timeDiff": "+ 0:01:505",
    "id": 71
  },
  "events": [
    {
      "time": 1512914964496,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "persist/REHYDRATE",
        "payload": {
          "questionnaire": {
            "steps": [
              {
                "type": "MATCH_QUESTION",
                "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
                "answer": "Type 2 Diabetes",
                "value": {
                  "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
                }
              },
              {
                "type": "MATCH_QUESTION",
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "f565b298-b6e8-5715-b679-c6486a438459"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e"
              }
            ],
            "current": 1,
            "fastForward": false,
            "pending": false,
            "progress": 0.06666666666666667,
            "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
            "universe": null
          },
          "registration": {
            "fields": {},
            "values": {},
            "errors": {},
            "pending": false,
            "registered": false
          },
          "user": {
            "patientAttributes": {},
            "userLocation": null,
            "preferredLocation": null,
            "preferences": {
              "hideEmailCapture": false
            }
          }
        },
        "error": null
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 0
    },
    {
      "time": 1512914964743,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MODULE_START",
        "saga": {
          "__func": "_callee"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:247",
      "id": 1
    },
    {
      "time": 1512914964761,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 1
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:018",
      "id": 2
    },
    {
      "time": 1512914964772,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
        "progress": 0.06666666666666667
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:011",
      "id": 3
    },
    {
      "time": 1512914964781,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "SEARCH_REQUEST_ATTRIBUTION_CONTENT",
        "contentType": "searchAttribution",
        "contentQuery": {
          "fields.name": "__unspecified__"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:009",
      "id": 4
    },
    {
      "time": 1512914964783,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "searchAttribution"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:002",
      "id": 5
    },
    {
      "time": 1512914964812,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:029",
      "id": 6
    },
    {
      "time": 1512914964948,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_REQUEST_FAILURE",
        "contentType": "searchAttribution",
        "contentQuery": {
          "fields.name": "__unspecified__"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:136",
      "id": 7
    },
    {
      "time": 1512914965233,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_NEW_SESSION",
        "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:285",
      "id": 8
    },
    {
      "time": 1512914965240,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_INITIAL_STEPS",
        "steps": [
          {
            "type": "MATCH_QUESTION",
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "answer": "Type 2 Diabetes",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            },
            "wording": "For what condition are you looking to find a clinical trial?",
            "returnValue": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "returnValue": {
              "properties": {
                "geo": {
                  "properties": {
                    "latitude": {
                      "type": "number"
                    },
                    "longitude": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "geo"
              ],
              "type": "object"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 40300000,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "canonicalUnit": "a",
            "wording": "How old are you?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 150,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "returnValue": {
              "enum": [
                "male",
                "female"
              ],
              "type": "string"
            }
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:007",
      "id": 9
    },
    {
      "time": 1512914965249,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
        "questions": []
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:009",
      "id": 10
    },
    {
      "time": 1512914965258,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST",
        "patientAttributes": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          }
        ],
        "options": {}
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:009",
      "id": 11
    },
    {
      "time": 1512914965789,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
        "studies": [],
        "total": 916
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:01:531",
      "id": 12
    },
    {
      "time": 1512914970141,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_CLEAR_ANSWER",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:04:352",
      "id": 13
    },
    {
      "time": 1512914970207,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_CLEAR_ANSWER",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:066",
      "id": 14
    },
    {
      "time": 1512914970273,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_CLEAR_ANSWER",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:066",
      "id": 15
    },
    {
      "time": 1512914972002,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_ANSWER",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
        "answer": "New York, NY, United States",
        "value": {
          "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
            "geo": {
              "latitude": 40.7127753,
              "longitude": -74.0059728
            },
            "country": "United States",
            "countryCode": "US",
            "state": "NY",
            "city": "New York",
            "zip": "",
            "streetAddress": "",
            "formattedAddress": "New York, NY, USA"
          }
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:02:729",
      "id": 16
    },
    {
      "time": 1512914972285,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
        "questions": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "wording": "For what condition are you looking to find a clinical trial?",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            }
          },
          {
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "value": {
              "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                "city": "New York",
                "country": "United States",
                "countryCode": "US",
                "formattedAddress": "New York, NY, USA",
                "geo": {
                  "latitude": 40.7127753,
                  "longitude": -74.0059728
                },
                "state": "NY",
                "streetAddress": "",
                "zip": ""
              }
            }
          },
          {
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "error": "required"
          },
          {
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "wording": "How old are you?",
            "error": "required"
          },
          {
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "error": "required"
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:283",
      "id": 17
    },
    {
      "time": 1512914972292,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_APPEND_STEPS",
        "steps": []
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:007",
      "id": 18
    },
    {
      "time": 1512914972300,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "PREFERRED_LOCATION",
        "location": {
          "geo": {
            "latitude": 40.7127753,
            "longitude": -74.0059728
          },
          "country": "United States",
          "countryCode": "US",
          "state": "NY",
          "city": "New York",
          "zip": "",
          "streetAddress": "",
          "formattedAddress": "New York, NY, USA"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:008",
      "id": 19
    },
    {
      "time": 1512914972309,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST",
        "patientAttributes": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          {
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "value": {
              "geo": {
                "latitude": 40.7127753,
                "longitude": -74.0059728
              },
              "country": "United States",
              "countryCode": "US",
              "state": "NY",
              "city": "New York",
              "zip": "",
              "streetAddress": "",
              "formattedAddress": "New York, NY, USA"
            }
          }
        ],
        "options": {}
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:009",
      "id": 20
    },
    {
      "time": 1512914973064,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
        "studies": [],
        "total": 310
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:01:755",
      "id": 21
    },
    {
      "time": 1512914973070,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 2
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:006",
      "id": 22
    },
    {
      "time": 1512914973074,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
        "id": "f565b298-b6e8-5715-b679-c6486a438459"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:004",
      "id": 23
    },
    {
      "time": 1512914973114,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "@@router/LOCATION_CHANGE",
        "payload": {
          "pathname": "/2.0/questions/3",
          "search": "",
          "hash": "",
          "key": "cwmbs1"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:040",
      "id": 24
    },
    {
      "time": 1512914973137,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_ANSWER_PROCESSED"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:023",
      "id": 25
    },
    {
      "time": 1512914973159,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": false,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
        "progress": 0.13333333333333333
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:022",
      "id": 26
    },
    {
      "time": 1512914973166,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": false,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "questionHelp"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:007",
      "id": 27
    },
    {
      "time": 1512914973174,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": false,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "questionHelp"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:008",
      "id": 28
    },
    {
      "time": 1512914973877,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": false,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_REQUEST_FAILURE",
        "contentType": "questionHelp",
        "contentQuery": {
          "fields.id": "f565b298-b6e8-5715-b679-c6486a438459",
          "locale": "en"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:01:703",
      "id": 29
    },
    {
      "time": 1512914975831,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_ANSWER",
        "id": "f565b298-b6e8-5715-b679-c6486a438459",
        "answer": "20 miles",
        "value": {
          "f565b298-b6e8-5715-b679-c6486a438459": 32187
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:02:954",
      "id": 30
    },
    {
      "time": 1512914976132,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
        "questions": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "wording": "For what condition are you looking to find a clinical trial?",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            }
          },
          {
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "value": {
              "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                "city": "New York",
                "country": "United States",
                "countryCode": "US",
                "formattedAddress": "New York, NY, USA",
                "geo": {
                  "latitude": 40.7127753,
                  "longitude": -74.0059728
                },
                "state": "NY",
                "streetAddress": "",
                "zip": ""
              }
            }
          },
          {
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "value": {
              "f565b298-b6e8-5715-b679-c6486a438459": 32187
            }
          },
          {
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "wording": "How old are you?",
            "error": "required"
          },
          {
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "error": "required"
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:301",
      "id": 31
    },
    {
      "time": 1512914976139,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_APPEND_STEPS",
        "steps": []
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:007",
      "id": 32
    },
    {
      "time": 1512914976146,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST",
        "patientAttributes": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          {
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "value": {
              "geo": {
                "latitude": 40.7127753,
                "longitude": -74.0059728
              },
              "country": "United States",
              "countryCode": "US",
              "state": "NY",
              "city": "New York",
              "zip": "",
              "streetAddress": "",
              "formattedAddress": "New York, NY, USA"
            }
          },
          {
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "value": 32187
          }
        ],
        "options": {}
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "timeDiff": "+ 0:00:007",
      "id": 33
    },
    {
      "time": 1512914976640,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
        "studies": [],
        "total": 43
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:494",
      "id": 34
    },
    {
      "time": 1512914976644,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": true,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 3
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:004",
      "id": 35
    },
    {
      "time": 1512914976647,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": true,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
        "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:003",
      "id": 36
    },
    {
      "time": 1512914976685,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": true,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "@@router/LOCATION_CHANGE",
        "payload": {
          "pathname": "/2.0/questions/4",
          "search": "",
          "hash": "",
          "key": "96t49s"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:038",
      "id": 37
    },
    {
      "time": 1512914976707,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": false,
          "progress": 0.13333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_ANSWER_PROCESSED"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:022",
      "id": 38
    },
    {
      "time": 1512914976724,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": false,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
        "progress": 0.2
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:017",
      "id": 39
    },
    {
      "time": 1512914976732,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": false,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "questionHelp"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:008",
      "id": 40
    },
    {
      "time": 1512914977343,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": false,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_REQUEST_SUCCESS",
        "contentType": "questionHelp",
        "contentQuery": {
          "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
          "locale": "en"
        },
        "fetchedContent": [
          {
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "questionWording": "<p>How old are you?</p>\n",
            "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
            "buttonLabel": "Why are we asking this?"
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:01:611",
      "id": 41
    },
    {
      "time": 1512914985865,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": false,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_CLEAR_ANSWER",
        "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:09:522",
      "id": 42
    },
    {
      "time": 1512914986019,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": false,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_CLEAR_ANSWER",
        "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:154",
      "id": 43
    },
    {
      "time": 1512914986697,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": true,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_ANSWER",
        "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
        "answer": "33",
        "value": {
          "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:01:678",
      "id": 44
    },
    {
      "time": 1512914987037,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": true,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
        "questions": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "wording": "For what condition are you looking to find a clinical trial?",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            }
          },
          {
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "value": {
              "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                "city": "New York",
                "country": "United States",
                "countryCode": "US",
                "formattedAddress": "New York, NY, USA",
                "geo": {
                  "latitude": 40.7127753,
                  "longitude": -74.0059728
                },
                "state": "NY",
                "streetAddress": "",
                "zip": ""
              }
            }
          },
          {
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "value": {
              "f565b298-b6e8-5715-b679-c6486a438459": 32187
            }
          },
          {
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "wording": "How old are you?",
            "value": {
              "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
            }
          },
          {
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "error": "required"
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:340",
      "id": 45
    },
    {
      "time": 1512914987044,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": true,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_APPEND_STEPS",
        "steps": []
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:007",
      "id": 46
    },
    {
      "time": 1512914987052,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": true,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 43,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST",
        "patientAttributes": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          {
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "value": {
              "geo": {
                "latitude": 40.7127753,
                "longitude": -74.0059728
              },
              "country": "United States",
              "countryCode": "US",
              "state": "NY",
              "city": "New York",
              "zip": "",
              "streetAddress": "",
              "formattedAddress": "New York, NY, USA"
            }
          },
          {
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "value": 32187
          },
          {
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "value": 33
          }
        ],
        "options": {}
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/4",
      "timeDiff": "+ 0:00:008",
      "id": 47
    },
    {
      "time": 1512914987553,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 3,
          "fastForward": false,
          "pending": true,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
        "studies": [],
        "total": 31
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:01:501",
      "id": 48
    },
    {
      "time": 1512914987558,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 4
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:005",
      "id": 49
    },
    {
      "time": 1512914987560,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
        "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:002",
      "id": 50
    },
    {
      "time": 1512914987595,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "@@router/LOCATION_CHANGE",
        "payload": {
          "pathname": "/2.0/questions/5",
          "search": "",
          "hash": "",
          "key": "qbpe9y"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:035",
      "id": 51
    },
    {
      "time": 1512914987616,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": false,
          "progress": 0.2,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_ANSWER_PROCESSED"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:021",
      "id": 52
    },
    {
      "time": 1512914987632,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "locale": "en"
            },
            "entries": [
              {
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "questionWording": "<p>How old are you?</p>\n",
                "content": "<p>Clinical trials often have different age range criteria that determine who can take part.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": false,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
        "progress": 0.26666666666666666
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:016",
      "id": 53
    },
    {
      "time": 1512914987639,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": false,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "questionHelp"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:007",
      "id": 54
    },
    {
      "time": 1512914987647,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": false,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "questionHelp"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:008",
      "id": 55
    },
    {
      "time": 1512914988225,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": false,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_REQUEST_SUCCESS",
        "contentType": "questionHelp",
        "contentQuery": {
          "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
          "locale": "en"
        },
        "fetchedContent": [
          {
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "questionWording": "<p>What is your sex?</p>\n",
            "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
            "buttonLabel": "Why are we asking this?"
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:01:578",
      "id": 56
    },
    {
      "time": 1512914991251,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_ANSWER",
        "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
        "answer": "Male",
        "value": {
          "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:03:026",
      "id": 57
    },
    {
      "time": 1512914992486,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
        "questions": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "wording": "For what condition are you looking to find a clinical trial?",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            }
          },
          {
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "value": {
              "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                "city": "New York",
                "country": "United States",
                "countryCode": "US",
                "formattedAddress": "New York, NY, USA",
                "geo": {
                  "latitude": 40.7127753,
                  "longitude": -74.0059728
                },
                "state": "NY",
                "streetAddress": "",
                "zip": ""
              }
            }
          },
          {
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "value": {
              "f565b298-b6e8-5715-b679-c6486a438459": 32187
            }
          },
          {
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "wording": "How old are you?",
            "value": {
              "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
            }
          },
          {
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "value": {
              "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
            }
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:01:235",
      "id": 58
    },
    {
      "time": 1512914992491,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_APPEND_STEPS",
        "steps": [
          {
            "type": "MATCH_QUESTION",
            "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
            "wording": "Do you currently have type 2 diabetes mellitus?",
            "returnValue": {
              "oneOf": [
                {
                  "description": "type 2 diabetes mellitus",
                  "type": "boolean"
                },
                {
                  "enum": [
                    "skip",
                    "idk"
                  ],
                  "type": "string"
                }
              ]
            }
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:005",
      "id": 59
    },
    {
      "time": 1512914992497,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_INSERT_STEPS",
        "steps": [
          {
            "type": "EMAIL_QUESTION",
            "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:006",
      "id": 60
    },
    {
      "time": 1512914992503,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 31,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST",
        "patientAttributes": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          {
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "value": {
              "geo": {
                "latitude": 40.7127753,
                "longitude": -74.0059728
              },
              "country": "United States",
              "countryCode": "US",
              "state": "NY",
              "city": "New York",
              "zip": "",
              "streetAddress": "",
              "formattedAddress": "New York, NY, USA"
            }
          },
          {
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "value": 32187
          },
          {
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "value": 33
          },
          {
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "value": "male"
          }
        ],
        "options": {}
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/5",
      "timeDiff": "+ 0:00:006",
      "id": 61
    },
    {
      "time": 1512914993815,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 4,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
        "studies": [],
        "total": 30
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:01:312",
      "id": 62
    },
    {
      "time": 1512914993818,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 5
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:00:003",
      "id": 63
    },
    {
      "time": 1512914993823,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
        "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:00:005",
      "id": 64
    },
    {
      "time": 1512914993860,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": true,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "@@router/LOCATION_CHANGE",
        "payload": {
          "pathname": "/2.0/questions/6",
          "search": "",
          "hash": "",
          "key": "d6vj68"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:00:037",
      "id": 65
    },
    {
      "time": 1512914993893,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": false,
          "progress": 0.26666666666666666,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_ANSWER_PROCESSED"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:00:033",
      "id": 66
    },
    {
      "time": 1512914993913,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "locale": "en"
            },
            "entries": [
              {
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "questionWording": "<p>What is your sex?</p>\n",
                "content": "<p>Biological sex is often an eligibility criterion for clinical trials, which means that it may determine which trials you can take part in.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": false,
          "progress": 0.3333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
        "progress": 0.3333333333333333
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:00:020",
      "id": 67
    },
    {
      "time": 1512914993918,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": false,
          "progress": 0.3333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "questionHelp"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:00:005",
      "id": 68
    },
    {
      "time": 1512914993924,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": false,
          "progress": 0.3333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "questionHelp"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:00:006",
      "id": 69
    },
    {
      "time": 1512914994003,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": false,
          "progress": 0.3333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {
            "email": {
              "validators": [
                {
                  "__func": "<anonymous>"
                }
              ]
            }
          },
          "values": {
            "email": ""
          },
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "REGISTRATION_NEW_FIELD",
        "name": "email",
        "options": {
          "initialValue": "",
          "validators": [
            {
              "__func": "<anonymous>"
            }
          ]
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:00:079",
      "id": 70
    },
    {
      "time": 1512914994508,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": null
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "New York, NY, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 40.7127753,
                    "longitude": -74.0059728
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "NY",
                  "city": "New York",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "New York, NY, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "20 miles",
              "value": {
                "f565b298-b6e8-5715-b679-c6486a438459": 32187
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              },
              "answer": "33",
              "value": {
                "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d": 33
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              },
              "answer": "Male",
              "value": {
                "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e": "male"
              }
            },
            {
              "type": "EMAIL_QUESTION",
              "id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed"
            },
            {
              "type": "MATCH_QUESTION",
              "id": "fc311fd1-a2aa-59ef-80cf-57f845767b92",
              "wording": "Do you currently have type 2 diabetes mellitus?",
              "returnValue": {
                "oneOf": [
                  {
                    "description": "type 2 diabetes mellitus",
                    "type": "boolean"
                  },
                  {
                    "enum": [
                      "skip",
                      "idk"
                    ],
                    "type": "string"
                  }
                ]
              }
            }
          ],
          "current": 5,
          "fastForward": false,
          "pending": false,
          "progress": 0.3333333333333333,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {
            "email": {
              "validators": [
                {
                  "__func": "<anonymous>"
                }
              ]
            }
          },
          "values": {
            "email": ""
          },
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 30,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_REQUEST_FAILURE",
        "contentType": "questionHelp",
        "contentQuery": {
          "fields.id": "d1d413a3-80d4-4062-8375-cd43aa8aa8ed",
          "locale": "en"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/6",
      "timeDiff": "+ 0:01:505",
      "id": 71
    }
  ]
}

},{}],453:[function(require,module,exports){
module.exports={
  "name": "working",
  "page": "LOG",
  "pinnedEvent": {
    "time": 1512913729416,
    "uid": "redux",
    "state": {
      "contactRequest": {
        "status": "IDLE",
        "error": null
      },
      "content": {
        "searchAttribution": null,
        "questionHelp": {
          "query": {
            "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "locale": "en"
          },
          "entries": [
            {
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
              "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
              "buttonLabel": "Why are we asking this?"
            }
          ]
        }
      },
      "l10n": {
        "current": "en",
        "locales": [
          "en",
          "es",
          "fr",
          "de"
        ],
        "messages": {}
      },
      "questionnaire": {
        "steps": [
          {
            "type": "MATCH_QUESTION",
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "answer": "Type 2 Diabetes",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            },
            "wording": "For what condition are you looking to find a clinical trial?",
            "returnValue": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "returnValue": {
              "properties": {
                "geo": {
                  "properties": {
                    "latitude": {
                      "type": "number"
                    },
                    "longitude": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "geo"
              ],
              "type": "object"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 40300000,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "canonicalUnit": "a",
            "wording": "How old are you?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 150,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "returnValue": {
              "enum": [
                "male",
                "female"
              ],
              "type": "string"
            }
          }
        ],
        "current": 1,
        "fastForward": false,
        "pending": false,
        "progress": 0.06666666666666667,
        "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
        "universe": null
      },
      "registration": {
        "fields": {},
        "values": {},
        "errors": {},
        "pending": false,
        "registered": false
      },
      "sites": {
        "locations": [],
        "selectedCountry": null,
        "selectedState": null,
        "selectedCity": null,
        "selectedLocation": null
      },
      "studies": {
        "matches": [],
        "totalMatches": 916,
        "pending": false,
        "error": null
      },
      "studyData": null,
      "user": {
        "patientAttributes": {},
        "userLocation": null,
        "preferredLocation": null,
        "preferences": {
          "hideEmailCapture": false
        }
      }
    },
    "icon": "fa-circle-o",
    "color": "#f7f5e3",
    "type": "@saga_effectResolved",
    "effectId": 94,
    "result": [
      0,
      1
    ],
    "origin": "http://local.antidote.me/match/2.0/questions/2",
    "id": 196
  },
  "events": [
    {
      "time": 1512913728029,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 1,
      "parentEffectId": 0,
      "effect": {
        "root": true,
        "saga": {
          "__func": "root"
        },
        "args": []
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 0
    },
    {
      "time": 1512913728036,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 2,
      "parentEffectId": 1,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "ALL": [
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchModuleStart"
              },
              "args": [
                []
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchModuleStop"
              },
              "args": [
                []
              ]
            }
          }
        ]
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:007",
      "id": 1
    },
    {
      "time": 1512913728037,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 3,
      "parentEffectId": 2,
      "label": "0",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchModuleStart"
          },
          "args": [
            []
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 2
    },
    {
      "time": 1512913728038,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 4,
      "parentEffectId": 3,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "MODULE_START"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 3
    },
    {
      "time": 1512913728039,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 3,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 3,
        "name": "watchModuleStart",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 4
    },
    {
      "time": 1512913728039,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 5,
      "parentEffectId": 2,
      "label": "1",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchModuleStop"
          },
          "args": [
            []
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 5
    },
    {
      "time": 1512913728040,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 6,
      "parentEffectId": 5,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "MODULE_STOP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 6
    },
    {
      "time": 1512913728040,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 5,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 5,
        "name": "watchModuleStop",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 7
    },
    {
      "time": 1512913728041,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 2,
      "result": [
        {
          "@@redux-saga/TASK": true,
          "id": 3,
          "name": "watchModuleStart",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 5,
          "name": "watchModuleStop",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 8
    },
    {
      "time": 1512913728042,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 1,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 1,
        "name": "root",
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 9
    },
    {
      "time": 1512913728073,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "persist/REHYDRATE",
        "payload": {
          "questionnaire": {
            "steps": [
              {
                "type": "MATCH_QUESTION",
                "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
                "answer": "Type 2 Diabetes",
                "value": {
                  "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
                }
              },
              {
                "type": "MATCH_QUESTION",
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "f565b298-b6e8-5715-b679-c6486a438459"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e"
              }
            ],
            "current": 1,
            "fastForward": false,
            "pending": false,
            "progress": 0.06666666666666667,
            "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
            "universe": null
          },
          "registration": {
            "fields": {},
            "values": {},
            "errors": {},
            "pending": false,
            "registered": false
          },
          "user": {
            "patientAttributes": {},
            "userLocation": null,
            "preferredLocation": null,
            "preferences": {
              "hideEmailCapture": false
            }
          }
        },
        "error": null
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:031",
      "id": 10
    },
    {
      "time": 1512913728075,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "persist/REHYDRATE",
        "payload": {
          "questionnaire": {
            "steps": [
              {
                "type": "MATCH_QUESTION",
                "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
                "answer": "Type 2 Diabetes",
                "value": {
                  "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
                }
              },
              {
                "type": "MATCH_QUESTION",
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "f565b298-b6e8-5715-b679-c6486a438459"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e"
              }
            ],
            "current": 1,
            "fastForward": false,
            "pending": false,
            "progress": 0.06666666666666667,
            "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
            "universe": null
          },
          "registration": {
            "fields": {},
            "values": {},
            "errors": {},
            "pending": false,
            "registered": false
          },
          "user": {
            "patientAttributes": {},
            "userLocation": null,
            "preferredLocation": null,
            "preferences": {
              "hideEmailCapture": false
            }
          }
        },
        "error": null
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:002",
      "id": 11
    },
    {
      "time": 1512913728325,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "MODULE_START",
        "saga": {
          "__func": "_callee"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:250",
      "id": 12
    },
    {
      "time": 1512913728327,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MODULE_START",
        "saga": {
          "__func": "_callee"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:002",
      "id": 13
    },
    {
      "time": 1512913728328,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 4,
      "result": {
        "type": "MODULE_START",
        "saga": {
          "__func": "_callee"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 14
    },
    {
      "time": 1512913728328,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 7,
      "parentEffectId": 3,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "CALL": {
          "context": null,
          "fn": {
            "__func": "startSaga"
          },
          "args": [
            [],
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 15
    },
    {
      "time": 1512913728329,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 8,
      "parentEffectId": 7,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "_callee"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 16
    },
    {
      "time": 1512913728331,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 9,
      "parentEffectId": 8,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "ALL": [
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchQuestionHelpContent"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                },
                {
                  "_console": {
                    "debug": {
                      "__func": "<anonymous>"
                    },
                    "error": {
                      "__func": "<anonymous>"
                    },
                    "info": {
                      "__func": "<anonymous>"
                    },
                    "log": {
                      "__func": "<anonymous>"
                    },
                    "warn": {
                      "__func": "<anonymous>"
                    },
                    "dir": {
                      "__func": "dir"
                    },
                    "dirxml": {
                      "__func": "dirxml"
                    },
                    "table": {
                      "__func": "table"
                    },
                    "trace": {
                      "__func": "trace"
                    },
                    "group": {
                      "__func": "group"
                    },
                    "groupCollapsed": {
                      "__func": "groupCollapsed"
                    },
                    "groupEnd": {
                      "__func": "groupEnd"
                    },
                    "clear": {
                      "__func": "clear"
                    },
                    "count": {
                      "__func": "count"
                    },
                    "assert": {
                      "__func": "assert"
                    },
                    "markTimeline": {
                      "__func": "markTimeline"
                    },
                    "profile": {
                      "__func": "profile"
                    },
                    "profileEnd": {
                      "__func": "profileEnd"
                    },
                    "timeline": {
                      "__func": "timeline"
                    },
                    "timelineEnd": {
                      "__func": "timelineEnd"
                    },
                    "time": {
                      "__func": "time"
                    },
                    "timeEnd": {
                      "__func": "timeEnd"
                    },
                    "timeStamp": {
                      "__func": "timeStamp"
                    },
                    "context": {
                      "__func": "context"
                    },
                    "memory": {}
                  }
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "questionnaire"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                },
                {
                  "__func": "bound answerMatchQuestions"
                },
                {
                  "__func": "bound _callee"
                },
                {
                  "__func": "<anonymous>"
                },
                {
                  "__func": "bound _callee"
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "results"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                },
                {
                  "__func": "bound _callee"
                },
                {
                  "__func": "bound _callee"
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchContentRequest"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchSearchAttributionContent"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                },
                "~effect~ALL~0~FORK~args~1"
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchRegistration"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "trackStructEvents"
              },
              "args": [
                {
                  "_debug": false,
                  "_middlewares": [
                    {
                      "__func": "<anonymous>"
                    }
                  ],
                  "_location": {
                    "replace": {
                      "__func": "<anonymous>"
                    },
                    "assign": {
                      "__func": "<anonymous>"
                    },
                    "href": "http://local.antidote.me/match/2.0/questions/2",
                    "ancestorOrigins": {},
                    "origin": "http://local.antidote.me",
                    "protocol": "http:",
                    "host": "local.antidote.me",
                    "hostname": "local.antidote.me",
                    "port": "",
                    "pathname": "/match/2.0/questions/2",
                    "search": "",
                    "hash": "",
                    "reload": {
                      "__func": "reload"
                    }
                  },
                  "_data": {
                    "tr_uid": "668a4b41-8206-4244-c2b9-269395a5881a"
                  }
                },
                "Search",
                {
                  "QUESTIONNAIRE_GO_TO_STEP": {
                    "__func": "_callee"
                  },
                  "QUESTIONNAIRE_ANSWER": {
                    "__func": "_callee2"
                  }
                },
                {
                  "REGISTRATION_ERRORS": {
                    "__func": "<anonymous>"
                  },
                  "REGISTRATION_SUBMIT": {
                    "__func": "<anonymous>"
                  },
                  "REGISTRATION_SUCCESS": {
                    "__func": "<anonymous>"
                  },
                  "REGISTRATION_FAILURE": {
                    "__func": "<anonymous>"
                  }
                },
                {
                  "@@router/LOCATION_CHANGE": {
                    "__func": "_callee"
                  },
                  "SEARCH_BRIDGE_TOOLTIP_OPENED": {
                    "__func": "_callee2"
                  },
                  "SEARCH_RESULTS_ITEM_VIEWED": {
                    "__func": "_callee3"
                  }
                }
              ]
            }
          }
        ]
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:002",
      "id": 17
    },
    {
      "time": 1512913728331,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 10,
      "parentEffectId": 9,
      "label": "0",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchQuestionHelpContent"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "_console": {
                "debug": {
                  "__func": "<anonymous>"
                },
                "error": {
                  "__func": "<anonymous>"
                },
                "info": {
                  "__func": "<anonymous>"
                },
                "log": {
                  "__func": "<anonymous>"
                },
                "warn": {
                  "__func": "<anonymous>"
                },
                "dir": {
                  "__func": "dir"
                },
                "dirxml": {
                  "__func": "dirxml"
                },
                "table": {
                  "__func": "table"
                },
                "trace": {
                  "__func": "trace"
                },
                "group": {
                  "__func": "group"
                },
                "groupCollapsed": {
                  "__func": "groupCollapsed"
                },
                "groupEnd": {
                  "__func": "groupEnd"
                },
                "clear": {
                  "__func": "clear"
                },
                "count": {
                  "__func": "count"
                },
                "assert": {
                  "__func": "assert"
                },
                "markTimeline": {
                  "__func": "markTimeline"
                },
                "profile": {
                  "__func": "profile"
                },
                "profileEnd": {
                  "__func": "profileEnd"
                },
                "timeline": {
                  "__func": "timeline"
                },
                "timelineEnd": {
                  "__func": "timelineEnd"
                },
                "time": {
                  "__func": "time"
                },
                "timeEnd": {
                  "__func": "timeEnd"
                },
                "timeStamp": {
                  "__func": "timeStamp"
                },
                "context": {
                  "__func": "context"
                },
                "memory": {}
              }
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 18
    },
    {
      "time": 1512913728332,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 11,
      "parentEffectId": 10,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeLatestHelper"
          },
          "args": [
            "QUESTIONNAIRE_FETCH_HELP_CONTENT",
            {
              "__func": "fetchQuestionHelp"
            },
            {
              "__func": "<anonymous>"
            },
            {
              "_console": {
                "debug": {
                  "__func": "<anonymous>"
                },
                "error": {
                  "__func": "<anonymous>"
                },
                "info": {
                  "__func": "<anonymous>"
                },
                "log": {
                  "__func": "<anonymous>"
                },
                "warn": {
                  "__func": "<anonymous>"
                },
                "dir": {
                  "__func": "dir"
                },
                "dirxml": {
                  "__func": "dirxml"
                },
                "table": {
                  "__func": "table"
                },
                "trace": {
                  "__func": "trace"
                },
                "group": {
                  "__func": "group"
                },
                "groupCollapsed": {
                  "__func": "groupCollapsed"
                },
                "groupEnd": {
                  "__func": "groupEnd"
                },
                "clear": {
                  "__func": "clear"
                },
                "count": {
                  "__func": "count"
                },
                "assert": {
                  "__func": "assert"
                },
                "markTimeline": {
                  "__func": "markTimeline"
                },
                "profile": {
                  "__func": "profile"
                },
                "profileEnd": {
                  "__func": "profileEnd"
                },
                "timeline": {
                  "__func": "timeline"
                },
                "timelineEnd": {
                  "__func": "timelineEnd"
                },
                "time": {
                  "__func": "time"
                },
                "timeEnd": {
                  "__func": "timeEnd"
                },
                "timeStamp": {
                  "__func": "timeStamp"
                },
                "context": {
                  "__func": "context"
                },
                "memory": {}
              }
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 19
    },
    {
      "time": 1512913728333,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 12,
      "parentEffectId": 11,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_FETCH_HELP_CONTENT"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 20
    },
    {
      "time": 1512913728334,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 11,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 11,
        "name": "takeLatestHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 21
    },
    {
      "time": 1512913728334,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 10,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 10,
        "name": "watchQuestionHelpContent",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 22
    },
    {
      "time": 1512913728335,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 13,
      "parentEffectId": 9,
      "label": "1",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "questionnaire"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "__func": "bound answerMatchQuestions"
            },
            {
              "__func": "bound _callee"
            },
            {
              "__func": "<anonymous>"
            },
            {
              "__func": "bound _callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 23
    },
    {
      "time": 1512913728336,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 14,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchQuestionnaireFlow"
          },
          "args": [
            {
              "MATCH_QUESTION": {
                "__func": "_callee2"
              },
              "EMAIL_QUESTION": {
                "__func": "_callee3"
              }
            },
            {
              "__func": "<anonymous>"
            },
            {
              "__func": "bound _callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 24
    },
    {
      "time": 1512913728337,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 15,
      "parentEffectId": 14,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeLatestHelper"
          },
          "args": [
            "QUESTIONNAIRE_GO_TO_STEP",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 25
    },
    {
      "time": 1512913728337,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 16,
      "parentEffectId": 15,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_GO_TO_STEP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 26
    },
    {
      "time": 1512913728338,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 15,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 15,
        "name": "takeLatestHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 27
    },
    {
      "time": 1512913728338,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 14,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 14,
        "name": "watchQuestionnaireFlow",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 28
    },
    {
      "time": 1512913728339,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 17,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_GO_TO_STEP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 29
    },
    {
      "time": 1512913728340,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 13,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 13,
        "name": "questionnaire",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 30
    },
    {
      "time": 1512913728340,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 18,
      "parentEffectId": 9,
      "label": "2",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "results"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "__func": "bound _callee"
            },
            {
              "__func": "bound _callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 31
    },
    {
      "time": 1512913728341,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 19,
      "parentEffectId": 18,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "SEARCH_MATCHING_STUDIES",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 32
    },
    {
      "time": 1512913728342,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 20,
      "parentEffectId": 19,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "SEARCH_MATCHING_STUDIES"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 33
    },
    {
      "time": 1512913728342,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 19,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 19,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 34
    },
    {
      "time": 1512913728343,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 18,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 18,
        "name": "results",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 35
    },
    {
      "time": 1512913728343,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 21,
      "parentEffectId": 9,
      "label": "3",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchContentRequest"
          },
          "args": [
            {
              "__func": "<anonymous>"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 36
    },
    {
      "time": 1512913728344,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 22,
      "parentEffectId": 21,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "CONTENT_REQUEST",
            {
              "__func": "loadContent"
            },
            {
              "__func": "<anonymous>"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 37
    },
    {
      "time": 1512913728344,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 23,
      "parentEffectId": 22,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "CONTENT_REQUEST"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 38
    },
    {
      "time": 1512913728345,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 22,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 22,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 39
    },
    {
      "time": 1512913728345,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 21,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 21,
        "name": "watchContentRequest",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 40
    },
    {
      "time": 1512913728346,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 24,
      "parentEffectId": 9,
      "label": "4",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchSearchAttributionContent"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "_console": {
                "debug": {
                  "__func": "<anonymous>"
                },
                "error": {
                  "__func": "<anonymous>"
                },
                "info": {
                  "__func": "<anonymous>"
                },
                "log": {
                  "__func": "<anonymous>"
                },
                "warn": {
                  "__func": "<anonymous>"
                },
                "dir": {
                  "__func": "dir"
                },
                "dirxml": {
                  "__func": "dirxml"
                },
                "table": {
                  "__func": "table"
                },
                "trace": {
                  "__func": "trace"
                },
                "group": {
                  "__func": "group"
                },
                "groupCollapsed": {
                  "__func": "groupCollapsed"
                },
                "groupEnd": {
                  "__func": "groupEnd"
                },
                "clear": {
                  "__func": "clear"
                },
                "count": {
                  "__func": "count"
                },
                "assert": {
                  "__func": "assert"
                },
                "markTimeline": {
                  "__func": "markTimeline"
                },
                "profile": {
                  "__func": "profile"
                },
                "profileEnd": {
                  "__func": "profileEnd"
                },
                "timeline": {
                  "__func": "timeline"
                },
                "timelineEnd": {
                  "__func": "timelineEnd"
                },
                "time": {
                  "__func": "time"
                },
                "timeEnd": {
                  "__func": "timeEnd"
                },
                "timeStamp": {
                  "__func": "timeStamp"
                },
                "context": {
                  "__func": "context"
                },
                "memory": {}
              }
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 41
    },
    {
      "time": 1512913728347,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 25,
      "parentEffectId": 24,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "SEARCH_REQUEST_ATTRIBUTION_CONTENT"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 42
    },
    {
      "time": 1512913728347,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 24,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 24,
        "name": "watchSearchAttributionContent",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 43
    },
    {
      "time": 1512913728348,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 26,
      "parentEffectId": 9,
      "label": "5",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchRegistration"
          },
          "args": [
            {
              "__func": "<anonymous>"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 44
    },
    {
      "time": 1512913728348,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 27,
      "parentEffectId": 26,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "REGISTRATION_SUBMIT"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 45
    },
    {
      "time": 1512913728349,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 26,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 26,
        "name": "watchRegistration",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 46
    },
    {
      "time": 1512913728349,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 28,
      "parentEffectId": 9,
      "label": "6",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "trackStructEvents"
          },
          "args": [
            {
              "_debug": false,
              "_middlewares": [
                {
                  "__func": "<anonymous>"
                }
              ],
              "_location": {
                "replace": {
                  "__func": "<anonymous>"
                },
                "assign": {
                  "__func": "<anonymous>"
                },
                "href": "http://local.antidote.me/match/2.0/questions/2",
                "ancestorOrigins": {},
                "origin": "http://local.antidote.me",
                "protocol": "http:",
                "host": "local.antidote.me",
                "hostname": "local.antidote.me",
                "port": "",
                "pathname": "/match/2.0/questions/2",
                "search": "",
                "hash": "",
                "reload": {
                  "__func": "reload"
                }
              },
              "_data": {
                "tr_uid": "668a4b41-8206-4244-c2b9-269395a5881a"
              }
            },
            "Search",
            {
              "QUESTIONNAIRE_GO_TO_STEP": {
                "__func": "_callee"
              },
              "QUESTIONNAIRE_ANSWER": {
                "__func": "_callee2"
              }
            },
            {
              "REGISTRATION_ERRORS": {
                "__func": "<anonymous>"
              },
              "REGISTRATION_SUBMIT": {
                "__func": "<anonymous>"
              },
              "REGISTRATION_SUCCESS": {
                "__func": "<anonymous>"
              },
              "REGISTRATION_FAILURE": {
                "__func": "<anonymous>"
              }
            },
            {
              "@@router/LOCATION_CHANGE": {
                "__func": "_callee"
              },
              "SEARCH_BRIDGE_TOOLTIP_OPENED": {
                "__func": "_callee2"
              },
              "SEARCH_RESULTS_ITEM_VIEWED": {
                "__func": "_callee3"
              }
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 47
    },
    {
      "time": 1512913728351,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 29,
      "parentEffectId": 28,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "ALL": [
          [
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "QUESTIONNAIRE_GO_TO_STEP",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            },
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "QUESTIONNAIRE_ANSWER",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            }
          ],
          [
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "REGISTRATION_ERRORS",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            },
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "REGISTRATION_SUBMIT",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            },
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "REGISTRATION_SUCCESS",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            },
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "REGISTRATION_FAILURE",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            }
          ],
          [
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "@@router/LOCATION_CHANGE",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            },
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "SEARCH_BRIDGE_TOOLTIP_OPENED",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            },
            {
              "@@redux-saga/IO": true,
              "FORK": {
                "context": null,
                "fn": {
                  "__func": "takeEveryHelper"
                },
                "args": [
                  "SEARCH_RESULTS_ITEM_VIEWED",
                  {
                    "__func": "_callee"
                  }
                ]
              }
            }
          ]
        ]
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:002",
      "id": 48
    },
    {
      "time": 1512913728351,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 30,
      "parentEffectId": 29,
      "label": "0",
      "effect": [
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "QUESTIONNAIRE_GO_TO_STEP",
              {
                "__func": "_callee"
              }
            ]
          }
        },
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "QUESTIONNAIRE_ANSWER",
              {
                "__func": "_callee"
              }
            ]
          }
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 49
    },
    {
      "time": 1512913728354,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 31,
      "parentEffectId": 30,
      "label": "0",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "QUESTIONNAIRE_GO_TO_STEP",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:003",
      "id": 50
    },
    {
      "time": 1512913728355,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 32,
      "parentEffectId": 31,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_GO_TO_STEP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 51
    },
    {
      "time": 1512913728356,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 31,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 31,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 52
    },
    {
      "time": 1512913728356,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 33,
      "parentEffectId": 30,
      "label": "1",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "QUESTIONNAIRE_ANSWER",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 53
    },
    {
      "time": 1512913728357,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 34,
      "parentEffectId": 33,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_ANSWER"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 54
    },
    {
      "time": 1512913728357,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 33,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 33,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 55
    },
    {
      "time": 1512913728358,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 30,
      "result": [
        {
          "@@redux-saga/TASK": true,
          "id": 31,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 33,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 56
    },
    {
      "time": 1512913728359,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 35,
      "parentEffectId": 29,
      "label": "1",
      "effect": [
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "REGISTRATION_ERRORS",
              {
                "__func": "_callee"
              }
            ]
          }
        },
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "REGISTRATION_SUBMIT",
              {
                "__func": "_callee"
              }
            ]
          }
        },
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "REGISTRATION_SUCCESS",
              {
                "__func": "_callee"
              }
            ]
          }
        },
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "REGISTRATION_FAILURE",
              {
                "__func": "_callee"
              }
            ]
          }
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 57
    },
    {
      "time": 1512913728361,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 36,
      "parentEffectId": 35,
      "label": "0",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "REGISTRATION_ERRORS",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:002",
      "id": 58
    },
    {
      "time": 1512913728361,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 37,
      "parentEffectId": 36,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "REGISTRATION_ERRORS"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 59
    },
    {
      "time": 1512913728362,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 36,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 36,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 60
    },
    {
      "time": 1512913728362,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 38,
      "parentEffectId": 35,
      "label": "1",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "REGISTRATION_SUBMIT",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 61
    },
    {
      "time": 1512913728363,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 39,
      "parentEffectId": 38,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "REGISTRATION_SUBMIT"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 62
    },
    {
      "time": 1512913728364,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 38,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 38,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 63
    },
    {
      "time": 1512913728364,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 40,
      "parentEffectId": 35,
      "label": "2",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "REGISTRATION_SUCCESS",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 64
    },
    {
      "time": 1512913728365,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 41,
      "parentEffectId": 40,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "REGISTRATION_SUCCESS"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 65
    },
    {
      "time": 1512913728366,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 40,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 40,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 66
    },
    {
      "time": 1512913728366,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 42,
      "parentEffectId": 35,
      "label": "3",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "REGISTRATION_FAILURE",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 67
    },
    {
      "time": 1512913728367,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 43,
      "parentEffectId": 42,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "REGISTRATION_FAILURE"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 68
    },
    {
      "time": 1512913728367,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 42,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 42,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 69
    },
    {
      "time": 1512913728368,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 35,
      "result": [
        {
          "@@redux-saga/TASK": true,
          "id": 36,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 38,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 40,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 42,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 70
    },
    {
      "time": 1512913728369,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 44,
      "parentEffectId": 29,
      "label": "2",
      "effect": [
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "@@router/LOCATION_CHANGE",
              {
                "__func": "_callee"
              }
            ]
          }
        },
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "SEARCH_BRIDGE_TOOLTIP_OPENED",
              {
                "__func": "_callee"
              }
            ]
          }
        },
        {
          "@@redux-saga/IO": true,
          "FORK": {
            "context": null,
            "fn": {
              "__func": "takeEveryHelper"
            },
            "args": [
              "SEARCH_RESULTS_ITEM_VIEWED",
              {
                "__func": "_callee"
              }
            ]
          }
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 71
    },
    {
      "time": 1512913728370,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 45,
      "parentEffectId": 44,
      "label": "0",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "@@router/LOCATION_CHANGE",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 72
    },
    {
      "time": 1512913728371,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 46,
      "parentEffectId": 45,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "@@router/LOCATION_CHANGE"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 73
    },
    {
      "time": 1512913728372,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 45,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 45,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 74
    },
    {
      "time": 1512913728372,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 47,
      "parentEffectId": 44,
      "label": "1",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "SEARCH_BRIDGE_TOOLTIP_OPENED",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 75
    },
    {
      "time": 1512913728372,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 48,
      "parentEffectId": 47,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "SEARCH_BRIDGE_TOOLTIP_OPENED"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 76
    },
    {
      "time": 1512913728373,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 47,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 47,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 77
    },
    {
      "time": 1512913728373,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 49,
      "parentEffectId": 44,
      "label": "2",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "SEARCH_RESULTS_ITEM_VIEWED",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 78
    },
    {
      "time": 1512913728374,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 50,
      "parentEffectId": 49,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "SEARCH_RESULTS_ITEM_VIEWED"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 79
    },
    {
      "time": 1512913728374,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 49,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 49,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 80
    },
    {
      "time": 1512913728375,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 44,
      "result": [
        {
          "@@redux-saga/TASK": true,
          "id": 45,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 47,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 49,
          "name": "takeEveryHelper",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 81
    },
    {
      "time": 1512913728376,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 29,
      "result": [
        [
          {
            "@@redux-saga/TASK": true,
            "id": 31,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          },
          {
            "@@redux-saga/TASK": true,
            "id": 33,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          }
        ],
        [
          {
            "@@redux-saga/TASK": true,
            "id": 36,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          },
          {
            "@@redux-saga/TASK": true,
            "id": 38,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          },
          {
            "@@redux-saga/TASK": true,
            "id": 40,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          },
          {
            "@@redux-saga/TASK": true,
            "id": 42,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          }
        ],
        [
          {
            "@@redux-saga/TASK": true,
            "id": 45,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          },
          {
            "@@redux-saga/TASK": true,
            "id": 47,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          },
          {
            "@@redux-saga/TASK": true,
            "id": 49,
            "name": "takeEveryHelper",
            "cont": {
              "__func": "<anonymous>"
            },
            "joiners": [],
            "cancel": {
              "__func": "cancel"
            },
            "isRunning": {
              "__func": "isRunning"
            },
            "isCancelled": {
              "__func": "isCancelled"
            },
            "isAborted": {
              "__func": "isAborted"
            },
            "result": {
              "__func": "result"
            },
            "error": {
              "__func": "error"
            },
            "setContext": {
              "__func": "setContext"
            },
            "done": {}
          }
        ]
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 82
    },
    {
      "time": 1512913728377,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 28,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 28,
        "name": "trackStructEvents",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 83
    },
    {
      "time": 1512913728377,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 9,
      "result": [
        {
          "@@redux-saga/TASK": true,
          "id": 10,
          "name": "watchQuestionHelpContent",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 13,
          "name": "questionnaire",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 18,
          "name": "results",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 21,
          "name": "watchContentRequest",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 24,
          "name": "watchSearchAttributionContent",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 26,
          "name": "watchRegistration",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 28,
          "name": "trackStructEvents",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 84
    },
    {
      "time": 1512913728378,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 8,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 8,
        "name": "_callee",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 85
    },
    {
      "time": 1512913728383,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 1
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:005",
      "id": 86
    },
    {
      "time": 1512913728384,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 1
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 87
    },
    {
      "time": 1512913728385,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 17,
      "result": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 1
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 88
    },
    {
      "time": 1512913728386,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 51,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 89
    },
    {
      "time": 1512913728387,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 51,
      "result": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 90
    },
    {
      "time": 1512913728388,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 52,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 91
    },
    {
      "time": 1512913728388,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 52,
      "result": null,
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 92
    },
    {
      "time": 1512913728389,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 53,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 93
    },
    {
      "time": 1512913728390,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 53,
      "result": [
        {
          "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
          "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 94
    },
    {
      "time": 1512913728390,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 54,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "CALL": {
          "context": null,
          "fn": {
            "__func": "answerQuestions"
          },
          "args": [
            [
              {
                "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
                "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              }
            ]
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 95
    },
    {
      "time": 1512913728395,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 16,
      "result": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 1
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:005",
      "id": 96
    },
    {
      "time": 1512913728396,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 55,
      "parentEffectId": 15,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "_callee"
          },
          "args": [
            {
              "type": "QUESTIONNAIRE_GO_TO_STEP",
              "current": 1
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 97
    },
    {
      "time": 1512913728397,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 56,
      "parentEffectId": 55,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 98
    },
    {
      "time": 1512913728398,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 56,
      "result": 0.06666666666666667,
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 99
    },
    {
      "time": 1512913728398,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 57,
      "parentEffectId": 55,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "PUT": {
          "channel": null,
          "action": {
            "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
            "progress": 0.06666666666666667
          }
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 100
    },
    {
      "time": 1512913728399,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 55,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 55,
        "name": "_callee",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 101
    },
    {
      "time": 1512913728400,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 58,
      "parentEffectId": 15,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_GO_TO_STEP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 102
    },
    {
      "time": 1512913728400,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
        "progress": 0.06666666666666667
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 103
    },
    {
      "time": 1512913728401,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
        "progress": 0.06666666666666667
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 104
    },
    {
      "time": 1512913728402,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 57,
      "result": {
        "type": "QUESTIONNAIRE_PROGRESS_UPDATE",
        "progress": 0.06666666666666667
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 105
    },
    {
      "time": 1512913728402,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 59,
      "parentEffectId": 55,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 106
    },
    {
      "time": 1512913728403,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 59,
      "result": {
        "type": "MATCH_QUESTION",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
        "wording": "Where are you looking to find a clinical trial?",
        "returnValue": {
          "properties": {
            "geo": {
              "properties": {
                "latitude": {
                  "type": "number"
                },
                "longitude": {
                  "type": "number"
                }
              },
              "required": [
                "latitude",
                "longitude"
              ],
              "type": "object"
            }
          },
          "required": [
            "geo"
          ],
          "type": "object"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 107
    },
    {
      "time": 1512913728403,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 60,
      "parentEffectId": 55,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_ANSWER"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 108
    },
    {
      "time": 1512913728403,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 32,
      "result": {
        "type": "QUESTIONNAIRE_GO_TO_STEP",
        "current": 1
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 109
    },
    {
      "time": 1512913728404,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 61,
      "parentEffectId": 31,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "_callee"
          },
          "args": [
            {
              "type": "QUESTIONNAIRE_GO_TO_STEP",
              "current": 1
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 110
    },
    {
      "time": 1512913728405,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 62,
      "parentEffectId": 61,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "CALL": {
          "context": null,
          "fn": {
            "__func": "_callee"
          },
          "args": [
            {
              "type": "QUESTIONNAIRE_GO_TO_STEP",
              "current": 1
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 111
    },
    {
      "time": 1512913728405,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 63,
      "parentEffectId": 62,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "getQuestionnaire"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 112
    },
    {
      "time": 1512913728406,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 63,
      "result": {
        "steps": [
          {
            "type": "MATCH_QUESTION",
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "answer": "Type 2 Diabetes",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            },
            "wording": "For what condition are you looking to find a clinical trial?",
            "returnValue": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "returnValue": {
              "properties": {
                "geo": {
                  "properties": {
                    "latitude": {
                      "type": "number"
                    },
                    "longitude": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "geo"
              ],
              "type": "object"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 40300000,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "canonicalUnit": "a",
            "wording": "How old are you?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 150,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "returnValue": {
              "enum": [
                "male",
                "female"
              ],
              "type": "string"
            }
          }
        ],
        "current": 1,
        "fastForward": false,
        "pending": false,
        "progress": 0.06666666666666667,
        "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
        "universe": null
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 113
    },
    {
      "time": 1512913728406,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 64,
      "parentEffectId": 62,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 114
    },
    {
      "time": 1512913728407,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 64,
      "result": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 115
    },
    {
      "time": 1512913728407,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 62,
      "result": {
        "action": "Step Displayed",
        "label": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
        "value": 2
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 116
    },
    {
      "time": 1512913728409,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 61,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 61,
        "name": "_callee",
        "cont": {
          "__func": "noop"
        },
        "joiners": null,
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:002",
      "id": 117
    },
    {
      "time": 1512913728409,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 65,
      "parentEffectId": 31,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_GO_TO_STEP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 118
    },
    {
      "time": 1512913728412,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "SEARCH_REQUEST_ATTRIBUTION_CONTENT",
        "contentType": "searchAttribution",
        "contentQuery": {
          "fields.name": "__unspecified__"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:003",
      "id": 119
    },
    {
      "time": 1512913728412,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "SEARCH_REQUEST_ATTRIBUTION_CONTENT",
        "contentType": "searchAttribution",
        "contentQuery": {
          "fields.name": "__unspecified__"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 120
    },
    {
      "time": 1512913728413,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 25,
      "result": {
        "type": "SEARCH_REQUEST_ATTRIBUTION_CONTENT",
        "contentType": "searchAttribution",
        "contentQuery": {
          "fields.name": "__unspecified__"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 121
    },
    {
      "time": 1512913728413,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 66,
      "parentEffectId": 24,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "CALL": {
          "context": null,
          "fn": {
            "__func": "loadContent"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "contentType": "searchAttribution",
              "contentQuery": {
                "fields.name": "__unspecified__"
              }
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 122
    },
    {
      "time": 1512913728414,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 67,
      "parentEffectId": 66,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "getContentOfTypeWithQuery"
          },
          "args": [
            "searchAttribution",
            {
              "fields.name": "__unspecified__"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 123
    },
    {
      "time": 1512913728415,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 67,
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 124
    },
    {
      "time": 1512913728415,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 68,
      "parentEffectId": 66,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "PUT": {
          "channel": null,
          "action": {
            "type": "CONTENT_CLEAR",
            "contentType": "searchAttribution"
          }
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 125
    },
    {
      "time": 1512913728416,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "searchAttribution"
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 126
    },
    {
      "time": 1512913728416,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_CLEAR",
        "contentType": "searchAttribution"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 127
    },
    {
      "time": 1512913728417,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 68,
      "result": {
        "type": "CONTENT_CLEAR",
        "contentType": "searchAttribution"
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 128
    },
    {
      "time": 1512913728417,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 69,
      "parentEffectId": 66,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "CALL": {
          "context": null,
          "fn": {
            "__func": "<anonymous>"
          },
          "args": [
            "searchAttribution",
            {
              "fields.name": "__unspecified__"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 129
    },
    {
      "time": 1512913728443,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:026",
      "id": 130
    },
    {
      "time": 1512913728444,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 131
    },
    {
      "time": 1512913728445,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 12,
      "result": {
        "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 132
    },
    {
      "time": 1512913728445,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 70,
      "parentEffectId": 11,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "fetchQuestionHelp"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "_console": {
                "debug": {
                  "__func": "<anonymous>"
                },
                "error": {
                  "__func": "<anonymous>"
                },
                "info": {
                  "__func": "<anonymous>"
                },
                "log": {
                  "__func": "<anonymous>"
                },
                "warn": {
                  "__func": "<anonymous>"
                },
                "dir": {
                  "__func": "dir"
                },
                "dirxml": {
                  "__func": "dirxml"
                },
                "table": {
                  "__func": "table"
                },
                "trace": {
                  "__func": "trace"
                },
                "group": {
                  "__func": "group"
                },
                "groupCollapsed": {
                  "__func": "groupCollapsed"
                },
                "groupEnd": {
                  "__func": "groupEnd"
                },
                "clear": {
                  "__func": "clear"
                },
                "count": {
                  "__func": "count"
                },
                "assert": {
                  "__func": "assert"
                },
                "markTimeline": {
                  "__func": "markTimeline"
                },
                "profile": {
                  "__func": "profile"
                },
                "profileEnd": {
                  "__func": "profileEnd"
                },
                "timeline": {
                  "__func": "timeline"
                },
                "timelineEnd": {
                  "__func": "timelineEnd"
                },
                "time": {
                  "__func": "time"
                },
                "timeEnd": {
                  "__func": "timeEnd"
                },
                "timeStamp": {
                  "__func": "timeStamp"
                },
                "context": {
                  "__func": "context"
                },
                "memory": {}
              }
            },
            {
              "type": "QUESTIONNAIRE_FETCH_HELP_CONTENT",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 133
    },
    {
      "time": 1512913728446,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 71,
      "parentEffectId": 70,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "getContentOfType"
          },
          "args": [
            "questionHelp"
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 134
    },
    {
      "time": 1512913728447,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 71,
      "result": {
        "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
        "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
        "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
        "buttonLabel": "Why are we asking this?"
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 135
    },
    {
      "time": 1512913728448,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 70,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 70,
        "name": "fetchQuestionHelp",
        "cont": {
          "__func": "noop"
        },
        "joiners": null,
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 136
    },
    {
      "time": 1512913728448,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 72,
      "parentEffectId": 11,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_FETCH_HELP_CONTENT"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 137
    },
    {
      "time": 1512913728597,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 69,
      "result": [],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:149",
      "id": 138
    },
    {
      "time": 1512913728597,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 73,
      "parentEffectId": 66,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "PUT": {
          "channel": null,
          "action": {
            "type": "CONTENT_REQUEST_FAILURE",
            "contentType": "searchAttribution",
            "contentQuery": {
              "fields.name": "__unspecified__"
            }
          }
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 139
    },
    {
      "time": 1512913728598,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "CONTENT_REQUEST_FAILURE",
        "contentType": "searchAttribution",
        "contentQuery": {
          "fields.name": "__unspecified__"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 140
    },
    {
      "time": 1512913728606,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "CONTENT_REQUEST_FAILURE",
        "contentType": "searchAttribution",
        "contentQuery": {
          "fields.name": "__unspecified__"
        }
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:008",
      "id": 141
    },
    {
      "time": 1512913728606,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 73,
      "result": {
        "type": "CONTENT_REQUEST_FAILURE",
        "contentType": "searchAttribution",
        "contentQuery": {
          "fields.name": "__unspecified__"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 142
    },
    {
      "time": 1512913728606,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 66,
      "result": [],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 143
    },
    {
      "time": 1512913728800,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 54,
      "result": [
        {
          "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
          "wording": "For what condition are you looking to find a clinical trial?",
          "returnValue": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string"
          },
          "value": {
            "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          }
        },
        {
          "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "wording": "Where are you looking to find a clinical trial?",
          "returnValue": {
            "properties": {
              "geo": {
                "properties": {
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ],
                "type": "object"
              }
            },
            "required": [
              "geo"
            ],
            "type": "object"
          },
          "error": "required"
        },
        {
          "id": "f565b298-b6e8-5715-b679-c6486a438459",
          "wording": "How far are you willing to travel?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 40300000,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          },
          "error": "required"
        },
        {
          "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
          "wording": "How old are you?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 150,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          },
          "canonicalUnit": "a",
          "error": "required"
        },
        {
          "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
          "wording": "What is your sex?",
          "returnValue": {
            "enum": [
              "male",
              "female"
            ],
            "type": "string"
          },
          "error": "required"
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:194",
      "id": 144
    },
    {
      "time": 1512913728800,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 74,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 145
    },
    {
      "time": 1512913728801,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 74,
      "result": [
        {
          "type": "MATCH_QUESTION",
          "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
          "answer": "Type 2 Diabetes",
          "value": {
            "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          "wording": "For what condition are you looking to find a clinical trial?",
          "returnValue": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "wording": "Where are you looking to find a clinical trial?",
          "returnValue": {
            "properties": {
              "geo": {
                "properties": {
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ],
                "type": "object"
              }
            },
            "required": [
              "geo"
            ],
            "type": "object"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "f565b298-b6e8-5715-b679-c6486a438459",
          "wording": "How far are you willing to travel?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 40300000,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
          "canonicalUnit": "a",
          "wording": "How old are you?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 150,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
          "wording": "What is your sex?",
          "returnValue": {
            "enum": [
              "male",
              "female"
            ],
            "type": "string"
          }
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 146
    },
    {
      "time": 1512913728801,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 75,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 147
    },
    {
      "time": 1512913728801,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 75,
      "result": [
        {
          "type": "MATCH_QUESTION",
          "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
          "answer": "Type 2 Diabetes",
          "value": {
            "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          "wording": "For what condition are you looking to find a clinical trial?",
          "returnValue": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "wording": "Where are you looking to find a clinical trial?",
          "returnValue": {
            "properties": {
              "geo": {
                "properties": {
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ],
                "type": "object"
              }
            },
            "required": [
              "geo"
            ],
            "type": "object"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "f565b298-b6e8-5715-b679-c6486a438459",
          "wording": "How far are you willing to travel?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 40300000,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
          "canonicalUnit": "a",
          "wording": "How old are you?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 150,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
          "wording": "What is your sex?",
          "returnValue": {
            "enum": [
              "male",
              "female"
            ],
            "type": "string"
          }
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 148
    },
    {
      "time": 1512913728802,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 76,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "CALL": {
          "context": null,
          "fn": {
            "__func": "bound getSessionId"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 149
    },
    {
      "time": 1512913728803,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 76,
      "result": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 150
    },
    {
      "time": 1512913728803,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 77,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "PUT": {
          "channel": null,
          "action": {
            "type": "QUESTIONNAIRE_NEW_SESSION",
            "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b"
          }
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 151
    },
    {
      "time": 1512913728803,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "QUESTIONNAIRE_NEW_SESSION",
        "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b"
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 152
    },
    {
      "time": 1512913728814,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_NEW_SESSION",
        "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b"
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:011",
      "id": 153
    },
    {
      "time": 1512913728815,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 77,
      "result": {
        "type": "QUESTIONNAIRE_NEW_SESSION",
        "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b"
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 154
    },
    {
      "time": 1512913728816,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 78,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "PUT": {
          "channel": null,
          "action": {
            "type": "QUESTIONNAIRE_INITIAL_STEPS",
            "steps": [
              {
                "type": "MATCH_QUESTION",
                "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
                "answer": "Type 2 Diabetes",
                "value": {
                  "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
                },
                "wording": "For what condition are you looking to find a clinical trial?",
                "returnValue": {
                  "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                  "type": "string"
                }
              },
              {
                "type": "MATCH_QUESTION",
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "wording": "Where are you looking to find a clinical trial?",
                "returnValue": {
                  "properties": {
                    "geo": {
                      "properties": {
                        "latitude": {
                          "type": "number"
                        },
                        "longitude": {
                          "type": "number"
                        }
                      },
                      "required": [
                        "latitude",
                        "longitude"
                      ],
                      "type": "object"
                    }
                  },
                  "required": [
                    "geo"
                  ],
                  "type": "object"
                }
              },
              {
                "type": "MATCH_QUESTION",
                "id": "f565b298-b6e8-5715-b679-c6486a438459",
                "wording": "How far are you willing to travel?",
                "returnValue": {
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "maximum": 40300000,
                  "minimum": 0,
                  "multipleOf": 0.001,
                  "type": "number"
                }
              },
              {
                "type": "MATCH_QUESTION",
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
                "canonicalUnit": "a",
                "wording": "How old are you?",
                "returnValue": {
                  "exclusiveMaximum": false,
                  "exclusiveMinimum": false,
                  "maximum": 150,
                  "minimum": 0,
                  "multipleOf": 0.001,
                  "type": "number"
                }
              },
              {
                "type": "MATCH_QUESTION",
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
                "wording": "What is your sex?",
                "returnValue": {
                  "enum": [
                    "male",
                    "female"
                  ],
                  "type": "string"
                }
              }
            ]
          }
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 155
    },
    {
      "time": 1512913728817,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "QUESTIONNAIRE_INITIAL_STEPS",
        "steps": [
          {
            "type": "MATCH_QUESTION",
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "answer": "Type 2 Diabetes",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            },
            "wording": "For what condition are you looking to find a clinical trial?",
            "returnValue": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "returnValue": {
              "properties": {
                "geo": {
                  "properties": {
                    "latitude": {
                      "type": "number"
                    },
                    "longitude": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "geo"
              ],
              "type": "object"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 40300000,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "canonicalUnit": "a",
            "wording": "How old are you?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 150,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "returnValue": {
              "enum": [
                "male",
                "female"
              ],
              "type": "string"
            }
          }
        ]
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 156
    },
    {
      "time": 1512913728824,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_INITIAL_STEPS",
        "steps": [
          {
            "type": "MATCH_QUESTION",
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "answer": "Type 2 Diabetes",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            },
            "wording": "For what condition are you looking to find a clinical trial?",
            "returnValue": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "returnValue": {
              "properties": {
                "geo": {
                  "properties": {
                    "latitude": {
                      "type": "number"
                    },
                    "longitude": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "geo"
              ],
              "type": "object"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 40300000,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "canonicalUnit": "a",
            "wording": "How old are you?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 150,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "returnValue": {
              "enum": [
                "male",
                "female"
              ],
              "type": "string"
            }
          }
        ]
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:007",
      "id": 157
    },
    {
      "time": 1512913728825,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 78,
      "result": {
        "type": "QUESTIONNAIRE_INITIAL_STEPS",
        "steps": [
          {
            "type": "MATCH_QUESTION",
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "answer": "Type 2 Diabetes",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            },
            "wording": "For what condition are you looking to find a clinical trial?",
            "returnValue": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "returnValue": {
              "properties": {
                "geo": {
                  "properties": {
                    "latitude": {
                      "type": "number"
                    },
                    "longitude": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "geo"
              ],
              "type": "object"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 40300000,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "canonicalUnit": "a",
            "wording": "How old are you?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 150,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "returnValue": {
              "enum": [
                "male",
                "female"
              ],
              "type": "string"
            }
          }
        ]
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 158
    },
    {
      "time": 1512913728825,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 79,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 159
    },
    {
      "time": 1512913728826,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 79,
      "result": {},
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 160
    },
    {
      "time": 1512913728826,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 80,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 161
    },
    {
      "time": 1512913728826,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 80,
      "result": [
        {
          "type": "MATCH_QUESTION",
          "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
          "answer": "Type 2 Diabetes",
          "value": {
            "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          "wording": "For what condition are you looking to find a clinical trial?",
          "returnValue": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "wording": "Where are you looking to find a clinical trial?",
          "returnValue": {
            "properties": {
              "geo": {
                "properties": {
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ],
                "type": "object"
              }
            },
            "required": [
              "geo"
            ],
            "type": "object"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "f565b298-b6e8-5715-b679-c6486a438459",
          "wording": "How far are you willing to travel?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 40300000,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
          "canonicalUnit": "a",
          "wording": "How old are you?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 150,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
          "wording": "What is your sex?",
          "returnValue": {
            "enum": [
              "male",
              "female"
            ],
            "type": "string"
          }
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 162
    },
    {
      "time": 1512913728827,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 81,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "PUT": {
          "channel": null,
          "action": {
            "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
            "questions": []
          }
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 163
    },
    {
      "time": 1512913728827,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
        "questions": []
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 164
    },
    {
      "time": 1512913728835,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
        "questions": []
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:008",
      "id": 165
    },
    {
      "time": 1512913728835,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 81,
      "result": {
        "type": "QUESTIONNAIRE_UPDATE_QUESTIONS",
        "questions": []
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 166
    },
    {
      "time": 1512913728836,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 82,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 167
    },
    {
      "time": 1512913728836,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 82,
      "result": [
        {
          "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
          "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 168
    },
    {
      "time": 1512913728836,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 83,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 169
    },
    {
      "time": 1512913728837,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 83,
      "result": null,
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 170
    },
    {
      "time": 1512913728837,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 84,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "PUT": {
          "channel": null,
          "action": {
            "type": "MATCHING_STUDIES_REQUEST",
            "patientAttributes": [
              {
                "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
                "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              }
            ],
            "options": {}
          }
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 171
    },
    {
      "time": 1512913728837,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST",
        "patientAttributes": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          }
        ],
        "options": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 172
    },
    {
      "time": 1512913728844,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST",
        "patientAttributes": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          }
        ],
        "options": {}
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:007",
      "id": 173
    },
    {
      "time": 1512913728844,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 84,
      "result": {
        "type": "MATCHING_STUDIES_REQUEST",
        "patientAttributes": [
          {
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          }
        ],
        "options": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 174
    },
    {
      "time": 1512913728844,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 85,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "CALL": {
          "context": null,
          "fn": {
            "__func": "search"
          },
          "args": [
            [
              {
                "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
                "value": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              }
            ],
            {}
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 175
    },
    {
      "time": 1512913729402,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 85,
      "result": {
        "studies": [],
        "total": 916
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:01:558",
      "id": 176
    },
    {
      "time": 1512913729403,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 86,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "PUT": {
          "channel": null,
          "action": {
            "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
            "studies": [],
            "total": 916
          }
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 177
    },
    {
      "time": 1512913729403,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": true,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
        "studies": [],
        "total": 916
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 178
    },
    {
      "time": 1512913729410,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "type": "@redux_ACTION",
      "action": {
        "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
        "studies": [],
        "total": 916
      },
      "icon": "fa-gear",
      "color": "#e7f7e3",
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:007",
      "id": 179
    },
    {
      "time": 1512913729410,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 86,
      "result": {
        "type": "MATCHING_STUDIES_REQUEST_SUCCESS",
        "studies": [],
        "total": 916
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 180
    },
    {
      "time": 1512913729411,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 87,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "_invoke": {
          "__func": "invoke"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 181
    },
    {
      "time": 1512913729411,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 88,
      "parentEffectId": 87,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "ALL": [
          {
            "@@redux-saga/IO": true,
            "SELECT": {
              "selector": {
                "__func": "<anonymous>"
              },
              "args": []
            }
          },
          {
            "@@redux-saga/IO": true,
            "SELECT": {
              "selector": {
                "__func": "<anonymous>"
              },
              "args": []
            }
          },
          {
            "@@redux-saga/IO": true,
            "SELECT": {
              "selector": {
                "__func": "<anonymous>"
              },
              "args": []
            }
          },
          {
            "@@redux-saga/IO": true,
            "SELECT": {
              "selector": {
                "__func": "<anonymous>"
              },
              "args": []
            }
          },
          {
            "@@redux-saga/IO": true,
            "SELECT": {
              "selector": {
                "__func": "getTotalMatchingStudies"
              },
              "args": []
            }
          }
        ]
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 182
    },
    {
      "time": 1512913729412,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 89,
      "parentEffectId": 88,
      "label": "0",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 183
    },
    {
      "time": 1512913729412,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 89,
      "result": [
        {
          "type": "MATCH_QUESTION",
          "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
          "answer": "Type 2 Diabetes",
          "value": {
            "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          "wording": "For what condition are you looking to find a clinical trial?",
          "returnValue": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "wording": "Where are you looking to find a clinical trial?",
          "returnValue": {
            "properties": {
              "geo": {
                "properties": {
                  "latitude": {
                    "type": "number"
                  },
                  "longitude": {
                    "type": "number"
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ],
                "type": "object"
              }
            },
            "required": [
              "geo"
            ],
            "type": "object"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "f565b298-b6e8-5715-b679-c6486a438459",
          "wording": "How far are you willing to travel?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 40300000,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
          "canonicalUnit": "a",
          "wording": "How old are you?",
          "returnValue": {
            "exclusiveMaximum": false,
            "exclusiveMinimum": false,
            "maximum": 150,
            "minimum": 0,
            "multipleOf": 0.001,
            "type": "number"
          }
        },
        {
          "type": "MATCH_QUESTION",
          "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
          "wording": "What is your sex?",
          "returnValue": {
            "enum": [
              "male",
              "female"
            ],
            "type": "string"
          }
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 184
    },
    {
      "time": 1512913729412,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 90,
      "parentEffectId": 88,
      "label": "1",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 185
    },
    {
      "time": 1512913729413,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 90,
      "result": [
        {
          "type": "MATCH_QUESTION",
          "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
          "answer": "Type 2 Diabetes",
          "value": {
            "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
          },
          "wording": "For what condition are you looking to find a clinical trial?",
          "returnValue": {
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
            "type": "string"
          }
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 186
    },
    {
      "time": 1512913729413,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 91,
      "parentEffectId": 88,
      "label": "2",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 187
    },
    {
      "time": 1512913729414,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 91,
      "result": 1,
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 188
    },
    {
      "time": 1512913729414,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 92,
      "parentEffectId": 88,
      "label": "3",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 189
    },
    {
      "time": 1512913729414,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 92,
      "result": [
        0,
        1
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 190
    },
    {
      "time": 1512913729415,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 93,
      "parentEffectId": 88,
      "label": "4",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "getTotalMatchingStudies"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 191
    },
    {
      "time": 1512913729415,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 93,
      "result": 916,
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 192
    },
    {
      "time": 1512913729415,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 88,
      "result": [
        [
          {
            "type": "MATCH_QUESTION",
            "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
            "answer": "Type 2 Diabetes",
            "value": {
              "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
            },
            "wording": "For what condition are you looking to find a clinical trial?",
            "returnValue": {
              "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
              "type": "string"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
            "wording": "Where are you looking to find a clinical trial?",
            "returnValue": {
              "properties": {
                "geo": {
                  "properties": {
                    "latitude": {
                      "type": "number"
                    },
                    "longitude": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "latitude",
                    "longitude"
                  ],
                  "type": "object"
                }
              },
              "required": [
                "geo"
              ],
              "type": "object"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "f565b298-b6e8-5715-b679-c6486a438459",
            "wording": "How far are you willing to travel?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 40300000,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
            "canonicalUnit": "a",
            "wording": "How old are you?",
            "returnValue": {
              "exclusiveMaximum": false,
              "exclusiveMinimum": false,
              "maximum": 150,
              "minimum": 0,
              "multipleOf": 0.001,
              "type": "number"
            }
          },
          {
            "type": "MATCH_QUESTION",
            "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
            "wording": "What is your sex?",
            "returnValue": {
              "enum": [
                "male",
                "female"
              ],
              "type": "string"
            }
          }
        ],
        [
          "~result~0~0"
        ],
        1,
        [
          0,
          1
        ],
        916
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 193
    },
    {
      "time": 1512913729416,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 87,
      "result": false,
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "timeDiff": "+ 0:00:001",
      "id": 194
    },
    {
      "time": 1512913729416,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 94,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "SELECT": {
          "selector": {
            "__func": "<anonymous>"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 195
    },
    {
      "time": 1512913729416,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "ff53cdc8-3204-41bb-8500-dfa82a81487b",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 94,
      "result": [
        0,
        1
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "id": 196
    }
  ]
}

},{}],454:[function(require,module,exports){
module.exports={
  "name": "working",
  "page": "LOG",
  "actions": [
    {
      "time": 1512815443228,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 1,
      "parentEffectId": 0,
      "effect": {
        "root": true,
        "saga": {
          "__func": "root"
        },
        "args": []
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 0
    },
    {
      "time": 1512815443232,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 2,
      "parentEffectId": 1,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "ALL": [
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchModuleStart"
              },
              "args": [
                []
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchModuleStop"
              },
              "args": [
                []
              ]
            }
          }
        ]
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 1
    },
    {
      "time": 1512815443233,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 3,
      "parentEffectId": 2,
      "label": "0",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchModuleStart"
          },
          "args": [
            []
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 2
    },
    {
      "time": 1512815443234,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 4,
      "parentEffectId": 3,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "MODULE_START"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 3
    },
    {
      "time": 1512815443236,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 3,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 3,
        "name": "watchModuleStart",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 4
    },
    {
      "time": 1512815443236,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 5,
      "parentEffectId": 2,
      "label": "1",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchModuleStop"
          },
          "args": [
            []
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 5
    },
    {
      "time": 1512815443237,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 6,
      "parentEffectId": 5,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "MODULE_STOP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 6
    },
    {
      "time": 1512815443238,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 5,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 5,
        "name": "watchModuleStop",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 7
    },
    {
      "time": 1512815443239,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 2,
      "result": [
        {
          "@@redux-saga/TASK": true,
          "id": 3,
          "name": "watchModuleStart",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        },
        {
          "@@redux-saga/TASK": true,
          "id": 5,
          "name": "watchModuleStop",
          "cont": {
            "__func": "<anonymous>"
          },
          "joiners": [],
          "cancel": {
            "__func": "cancel"
          },
          "isRunning": {
            "__func": "isRunning"
          },
          "isCancelled": {
            "__func": "isCancelled"
          },
          "isAborted": {
            "__func": "isAborted"
          },
          "result": {
            "__func": "result"
          },
          "error": {
            "__func": "error"
          },
          "setContext": {
            "__func": "setContext"
          },
          "done": {}
        }
      ],
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 8
    },
    {
      "time": 1512815443240,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 1,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 1,
        "name": "root",
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 9
    },
    {
      "time": 1512815443269,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "persist/REHYDRATE",
        "payload": {
          "questionnaire": {
            "steps": [
              {
                "type": "MATCH_QUESTION",
                "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
                "answer": "Type 2 Diabetes",
                "value": {
                  "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
                }
              },
              {
                "type": "MATCH_QUESTION",
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "f565b298-b6e8-5715-b679-c6486a438459"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d"
              },
              {
                "type": "MATCH_QUESTION",
                "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e"
              }
            ],
            "current": 1,
            "fastForward": false,
            "pending": false,
            "progress": 0.06666666666666667,
            "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
            "universe": null
          },
          "registration": {
            "fields": {},
            "values": {},
            "errors": {},
            "pending": false,
            "registered": false
          },
          "user": {
            "patientAttributes": {},
            "userLocation": null,
            "preferredLocation": null,
            "preferences": {
              "hideEmailCapture": false
            }
          }
        },
        "error": null
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 10
    },
    {
      "time": 1512815443444,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_actionDispatched",
      "action": {
        "type": "MODULE_START",
        "saga": {
          "__func": "_callee"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 11
    },
    {
      "time": 1512815443445,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 4,
      "result": {
        "type": "MODULE_START",
        "saga": {
          "__func": "_callee"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 12
    },
    {
      "time": 1512815443447,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 7,
      "parentEffectId": 3,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "CALL": {
          "context": null,
          "fn": {
            "__func": "startSaga"
          },
          "args": [
            [],
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 13
    },
    {
      "time": 1512815443448,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 8,
      "parentEffectId": 7,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "_callee"
          },
          "args": []
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 14
    },
    {
      "time": 1512815443451,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 9,
      "parentEffectId": 8,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "ALL": [
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchQuestionHelpContent"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                },
                {
                  "_console": {
                    "debug": {
                      "__func": "<anonymous>"
                    },
                    "error": {
                      "__func": "<anonymous>"
                    },
                    "info": {
                      "__func": "<anonymous>"
                    },
                    "log": {
                      "__func": "<anonymous>"
                    },
                    "warn": {
                      "__func": "<anonymous>"
                    },
                    "dir": {
                      "__func": "dir"
                    },
                    "dirxml": {
                      "__func": "dirxml"
                    },
                    "table": {
                      "__func": "table"
                    },
                    "trace": {
                      "__func": "trace"
                    },
                    "group": {
                      "__func": "group"
                    },
                    "groupCollapsed": {
                      "__func": "groupCollapsed"
                    },
                    "groupEnd": {
                      "__func": "groupEnd"
                    },
                    "clear": {
                      "__func": "clear"
                    },
                    "count": {
                      "__func": "count"
                    },
                    "assert": {
                      "__func": "assert"
                    },
                    "markTimeline": {
                      "__func": "markTimeline"
                    },
                    "profile": {
                      "__func": "profile"
                    },
                    "profileEnd": {
                      "__func": "profileEnd"
                    },
                    "timeline": {
                      "__func": "timeline"
                    },
                    "timelineEnd": {
                      "__func": "timelineEnd"
                    },
                    "time": {
                      "__func": "time"
                    },
                    "timeEnd": {
                      "__func": "timeEnd"
                    },
                    "timeStamp": {
                      "__func": "timeStamp"
                    },
                    "context": {
                      "__func": "context"
                    },
                    "memory": {}
                  }
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "questionnaire"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                },
                {
                  "__func": "bound answerMatchQuestions"
                },
                {
                  "__func": "bound _callee"
                },
                {
                  "__func": "<anonymous>"
                },
                {
                  "__func": "bound _callee"
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "results"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                },
                {
                  "__func": "bound _callee"
                },
                {
                  "__func": "bound _callee"
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchContentRequest"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchSearchAttributionContent"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                },
                "~effect~ALL~0~FORK~args~1"
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "watchRegistration"
              },
              "args": [
                {
                  "__func": "<anonymous>"
                }
              ]
            }
          },
          {
            "@@redux-saga/IO": true,
            "FORK": {
              "context": null,
              "fn": {
                "__func": "trackStructEvents"
              },
              "args": [
                {
                  "_debug": false,
                  "_middlewares": [
                    {
                      "__func": "<anonymous>"
                    }
                  ],
                  "_location": {
                    "replace": {
                      "__func": "<anonymous>"
                    },
                    "assign": {
                      "__func": "<anonymous>"
                    },
                    "href": "http://local.antidote.me/match/2.0/questions/2",
                    "ancestorOrigins": {},
                    "origin": "http://local.antidote.me",
                    "protocol": "http:",
                    "host": "local.antidote.me",
                    "hostname": "local.antidote.me",
                    "port": "",
                    "pathname": "/match/2.0/questions/2",
                    "search": "",
                    "hash": "",
                    "reload": {
                      "__func": "reload"
                    }
                  },
                  "_data": {
                    "tr_uid": "668a4b41-8206-4244-c2b9-269395a5881a"
                  }
                },
                "Search",
                {
                  "QUESTIONNAIRE_GO_TO_STEP": {
                    "__func": "_callee"
                  },
                  "QUESTIONNAIRE_ANSWER": {
                    "__func": "_callee2"
                  }
                },
                {
                  "REGISTRATION_ERRORS": {
                    "__func": "<anonymous>"
                  },
                  "REGISTRATION_SUBMIT": {
                    "__func": "<anonymous>"
                  },
                  "REGISTRATION_SUCCESS": {
                    "__func": "<anonymous>"
                  },
                  "REGISTRATION_FAILURE": {
                    "__func": "<anonymous>"
                  }
                },
                {
                  "@@router/LOCATION_CHANGE": {
                    "__func": "_callee"
                  },
                  "SEARCH_BRIDGE_TOOLTIP_OPENED": {
                    "__func": "_callee2"
                  },
                  "SEARCH_RESULTS_ITEM_VIEWED": {
                    "__func": "_callee3"
                  }
                }
              ]
            }
          }
        ]
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 15
    },
    {
      "time": 1512815443452,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 10,
      "parentEffectId": 9,
      "label": "0",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchQuestionHelpContent"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "_console": {
                "debug": {
                  "__func": "<anonymous>"
                },
                "error": {
                  "__func": "<anonymous>"
                },
                "info": {
                  "__func": "<anonymous>"
                },
                "log": {
                  "__func": "<anonymous>"
                },
                "warn": {
                  "__func": "<anonymous>"
                },
                "dir": {
                  "__func": "dir"
                },
                "dirxml": {
                  "__func": "dirxml"
                },
                "table": {
                  "__func": "table"
                },
                "trace": {
                  "__func": "trace"
                },
                "group": {
                  "__func": "group"
                },
                "groupCollapsed": {
                  "__func": "groupCollapsed"
                },
                "groupEnd": {
                  "__func": "groupEnd"
                },
                "clear": {
                  "__func": "clear"
                },
                "count": {
                  "__func": "count"
                },
                "assert": {
                  "__func": "assert"
                },
                "markTimeline": {
                  "__func": "markTimeline"
                },
                "profile": {
                  "__func": "profile"
                },
                "profileEnd": {
                  "__func": "profileEnd"
                },
                "timeline": {
                  "__func": "timeline"
                },
                "timelineEnd": {
                  "__func": "timelineEnd"
                },
                "time": {
                  "__func": "time"
                },
                "timeEnd": {
                  "__func": "timeEnd"
                },
                "timeStamp": {
                  "__func": "timeStamp"
                },
                "context": {
                  "__func": "context"
                },
                "memory": {}
              }
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 16
    },
    {
      "time": 1512815443453,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 11,
      "parentEffectId": 10,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeLatestHelper"
          },
          "args": [
            "QUESTIONNAIRE_FETCH_HELP_CONTENT",
            {
              "__func": "fetchQuestionHelp"
            },
            {
              "__func": "<anonymous>"
            },
            {
              "_console": {
                "debug": {
                  "__func": "<anonymous>"
                },
                "error": {
                  "__func": "<anonymous>"
                },
                "info": {
                  "__func": "<anonymous>"
                },
                "log": {
                  "__func": "<anonymous>"
                },
                "warn": {
                  "__func": "<anonymous>"
                },
                "dir": {
                  "__func": "dir"
                },
                "dirxml": {
                  "__func": "dirxml"
                },
                "table": {
                  "__func": "table"
                },
                "trace": {
                  "__func": "trace"
                },
                "group": {
                  "__func": "group"
                },
                "groupCollapsed": {
                  "__func": "groupCollapsed"
                },
                "groupEnd": {
                  "__func": "groupEnd"
                },
                "clear": {
                  "__func": "clear"
                },
                "count": {
                  "__func": "count"
                },
                "assert": {
                  "__func": "assert"
                },
                "markTimeline": {
                  "__func": "markTimeline"
                },
                "profile": {
                  "__func": "profile"
                },
                "profileEnd": {
                  "__func": "profileEnd"
                },
                "timeline": {
                  "__func": "timeline"
                },
                "timelineEnd": {
                  "__func": "timelineEnd"
                },
                "time": {
                  "__func": "time"
                },
                "timeEnd": {
                  "__func": "timeEnd"
                },
                "timeStamp": {
                  "__func": "timeStamp"
                },
                "context": {
                  "__func": "context"
                },
                "memory": {}
              }
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 17
    },
    {
      "time": 1512815443454,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 12,
      "parentEffectId": 11,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_FETCH_HELP_CONTENT"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 18
    },
    {
      "time": 1512815443455,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 11,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 11,
        "name": "takeLatestHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 19
    },
    {
      "time": 1512815443455,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 10,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 10,
        "name": "watchQuestionHelpContent",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 20
    },
    {
      "time": 1512815443456,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 13,
      "parentEffectId": 9,
      "label": "1",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "questionnaire"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "__func": "bound answerMatchQuestions"
            },
            {
              "__func": "bound _callee"
            },
            {
              "__func": "<anonymous>"
            },
            {
              "__func": "bound _callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 21
    },
    {
      "time": 1512815443458,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 14,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchQuestionnaireFlow"
          },
          "args": [
            {
              "MATCH_QUESTION": {
                "__func": "_callee2"
              },
              "EMAIL_QUESTION": {
                "__func": "_callee3"
              }
            },
            {
              "__func": "<anonymous>"
            },
            {
              "__func": "bound _callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 22
    },
    {
      "time": 1512815443459,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 15,
      "parentEffectId": 14,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeLatestHelper"
          },
          "args": [
            "QUESTIONNAIRE_GO_TO_STEP",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 23
    },
    {
      "time": 1512815443459,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 16,
      "parentEffectId": 15,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_GO_TO_STEP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 24
    },
    {
      "time": 1512815443460,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 15,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 15,
        "name": "takeLatestHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 25
    },
    {
      "time": 1512815443460,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 14,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 14,
        "name": "watchQuestionnaireFlow",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 26
    },
    {
      "time": 1512815443461,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 17,
      "parentEffectId": 13,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "QUESTIONNAIRE_GO_TO_STEP"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 27
    },
    {
      "time": 1512815443461,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 13,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 13,
        "name": "questionnaire",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 28
    },
    {
      "time": 1512815443462,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 18,
      "parentEffectId": 9,
      "label": "2",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "results"
          },
          "args": [
            {
              "__func": "<anonymous>"
            },
            {
              "__func": "bound _callee"
            },
            {
              "__func": "bound _callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 29
    },
    {
      "time": 1512815443463,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 19,
      "parentEffectId": 18,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "SEARCH_MATCHING_STUDIES",
            {
              "__func": "_callee"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 30
    },
    {
      "time": 1512815443464,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 20,
      "parentEffectId": 19,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "SEARCH_MATCHING_STUDIES"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 31
    },
    {
      "time": 1512815443465,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 19,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 19,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 32
    },
    {
      "time": 1512815443465,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 18,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 18,
        "name": "results",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 33
    },
    {
      "time": 1512815443466,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 21,
      "parentEffectId": 9,
      "label": "3",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "watchContentRequest"
          },
          "args": [
            {
              "__func": "<anonymous>"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 34
    },
    {
      "time": 1512815443468,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 22,
      "parentEffectId": 21,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "FORK": {
          "context": null,
          "fn": {
            "__func": "takeEveryHelper"
          },
          "args": [
            "CONTENT_REQUEST",
            {
              "__func": "loadContent"
            },
            {
              "__func": "<anonymous>"
            }
          ]
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 35
    },
    {
      "time": 1512815443468,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectTriggered",
      "effectId": 23,
      "parentEffectId": 22,
      "label": "",
      "effect": {
        "@@redux-saga/IO": true,
        "TAKE": {
          "pattern": "CONTENT_REQUEST"
        }
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 36
    },
    {
      "time": 1512815443469,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 1,
          "fastForward": false,
          "pending": false,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 916,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": null,
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectResolved",
      "effectId": 22,
      "result": {
        "@@redux-saga/TASK": true,
        "id": 22,
        "name": "takeEveryHelper",
        "cont": {
          "__func": "<anonymous>"
        },
        "joiners": [],
        "cancel": {
          "__func": "cancel"
        },
        "isRunning": {
          "__func": "isRunning"
        },
        "isCancelled": {
          "__func": "isCancelled"
        },
        "isAborted": {
          "__func": "isAborted"
        },
        "result": {
          "__func": "result"
        },
        "error": {
          "__func": "error"
        },
        "setContext": {
          "__func": "setContext"
        },
        "done": {}
      },
      "origin": "http://local.antidote.me/match/2.0/questions/2",
      "index": 37
    },
    {
      "time": 1512815470151,
      "uid": "redux",
      "state": {
        "contactRequest": {
          "status": "IDLE",
          "error": null
        },
        "content": {
          "searchAttribution": null,
          "questionHelp": {
            "query": {
              "fields.id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "locale": "en"
            },
            "entries": [
              {
                "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
                "questionWording": "<p>Near where are you looking to find a trial?</p>\n",
                "content": "<p>Clinical trials are normally run in hospitals or clinics and may require visits. By providing a location, we&#39;ll help you find ones that are closest to you.</p>\n",
                "buttonLabel": "Why are we asking this?"
              }
            ]
          }
        },
        "l10n": {
          "current": "en",
          "locales": [
            "en",
            "es",
            "fr",
            "de"
          ],
          "messages": {}
        },
        "questionnaire": {
          "steps": [
            {
              "type": "MATCH_QUESTION",
              "id": "dd3af86c-1506-58a0-a50b-50c69c8a3f7d",
              "answer": "Type 2 Diabetes",
              "value": {
                "dd3af86c-1506-58a0-a50b-50c69c8a3f7d": "7b8f4e3c-18f6-5d14-92db-dcc7c1417cb1"
              },
              "wording": "For what condition are you looking to find a clinical trial?",
              "returnValue": {
                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$",
                "type": "string"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
              "wording": "Where are you looking to find a clinical trial?",
              "returnValue": {
                "properties": {
                  "geo": {
                    "properties": {
                      "latitude": {
                        "type": "number"
                      },
                      "longitude": {
                        "type": "number"
                      }
                    },
                    "required": [
                      "latitude",
                      "longitude"
                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "geo"
                ],
                "type": "object"
              },
              "answer": "Diamond Bar, CA, United States",
              "value": {
                "0f694a7b-d4ab-5b79-b452-5a4447b8c95c": {
                  "geo": {
                    "latitude": 34.0286226,
                    "longitude": -117.8103367
                  },
                  "country": "United States",
                  "countryCode": "US",
                  "state": "CA",
                  "city": "Diamond Bar",
                  "zip": "",
                  "streetAddress": "",
                  "formattedAddress": "Diamond Bar, CA, USA"
                }
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "f565b298-b6e8-5715-b679-c6486a438459",
              "wording": "How far are you willing to travel?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 40300000,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "cd0ba5e2-b340-570c-b7b6-5b7a28a4ff6d",
              "canonicalUnit": "a",
              "wording": "How old are you?",
              "returnValue": {
                "exclusiveMaximum": false,
                "exclusiveMinimum": false,
                "maximum": 150,
                "minimum": 0,
                "multipleOf": 0.001,
                "type": "number"
              }
            },
            {
              "type": "MATCH_QUESTION",
              "id": "7ebd0b7e-1b59-583b-a4e8-42b8e1b5c34e",
              "wording": "What is your sex?",
              "returnValue": {
                "enum": [
                  "male",
                  "female"
                ],
                "type": "string"
              }
            }
          ],
          "current": 2,
          "fastForward": false,
          "pending": true,
          "progress": 0.06666666666666667,
          "session": "c694b4b3-8056-4613-a78b-7807dfa33d7a",
          "universe": null
        },
        "registration": {
          "fields": {},
          "values": {},
          "errors": {},
          "pending": false,
          "registered": false
        },
        "sites": {
          "locations": [],
          "selectedCountry": null,
          "selectedState": null,
          "selectedCity": null,
          "selectedLocation": null
        },
        "studies": {
          "matches": [],
          "totalMatches": 310,
          "pending": false,
          "error": null
        },
        "studyData": null,
        "user": {
          "patientAttributes": {},
          "userLocation": null,
          "preferredLocation": "~questionnaire~steps~1~value~0f694a7b-d4ab-5b79-b452-5a4447b8c95c",
          "preferences": {
            "hideEmailCapture": false
          }
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectCancelled",
      "effectId": 125,
      "origin": "http://local.antidote.me/match/2.0/questions/3",
      "index": 260
    },
    {
      "time": 1512905440954,
      "uid": "redux",
      "state": {
        "a": {
          "value": 42
        },
        "b": [
          1,
          2,
          3,
          4
        ],
        "c": {
          "__func": "c"
        },
        "d": {
          "__func": "d"
        }
      },
      "icon": "fa-circle-o",
      "color": "#f7f5e3",
      "type": "@saga_effectRejected",
      "effectId": 2,
      "error": {
        "name": "Error",
        "message": "Sorry!",
        "stack": ""
      }
    }
  ]
}

},{}],455:[function(require,module,exports){
module.exports={
  "name": "working",
  "page": "LOG",
  "pinnedEvent": {
    "time": 1512916025341,
    "uid": "8327e224-7994-47b8-af95-7731afa9e482",
    "state": [
      {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": true
            }
          ]
        }
      },
      {
        "name": "_@@@1",
        "state": {
          "name": "idle"
        }
      },
      {
        "name": "_@@@2",
        "state": {
          "name": "idle"
        }
      },
      {
        "name": "_@@@3",
        "state": {
          "name": "idle"
        }
      },
      {
        "name": "_@@@5",
        "state": {
          "name": "idle"
        }
      }
    ],
    "type": "onActionProcessed",
    "actionName": "change status",
    "args": [
      3,
      true
    ],
    "machine": {
      "name": "ToDos",
      "state": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          },
          {
            "label": "new one",
            "done": true
          }
        ]
      },
      "transitions": {
        "idle": {
          "fetch todos": {
            "__func": "fetchTodos"
          },
          "add new todo": {
            "__func": "addNewTodo"
          },
          "delete todo": {
            "__func": "deleteTodo"
          },
          "edit todo": {
            "__func": "editTodo"
          },
          "change status": {
            "__func": "changeStatus"
          }
        },
        "fetching": {
          "todos loaded": {
            "__func": "todosLoaded"
          },
          "error": {
            "__func": "error"
          }
        },
        "error": {
          "fetch todos": {
            "__func": "fetchTodos"
          }
        }
      },
      "isIdle": {
        "__func": "<anonymous>"
      },
      "fetchTodos": {
        "__func": "<anonymous>"
      },
      "addNewTodo": {
        "__func": "<anonymous>"
      },
      "deleteTodo": {
        "__func": "<anonymous>"
      },
      "editTodo": {
        "__func": "<anonymous>"
      },
      "changeStatus": {
        "__func": "<anonymous>"
      },
      "isFetching": {
        "__func": "<anonymous>"
      },
      "todosLoaded": {
        "__func": "<anonymous>"
      },
      "error": {
        "__func": "<anonymous>"
      },
      "isError": {
        "__func": "<anonymous>"
      },
      "destroy": {
        "__func": "<anonymous>"
      }
    },
    "meta": {
      "middlewares": 2
    },
    "origin": "http://localhost:3000/",
    "timeDiff": "+ 0:00:005",
    "id": 224
  },
  "events": [
    {
      "time": 1512916015928,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": []
          }
        }
      ],
      "type": "onMachineCreated",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": []
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 1
      },
      "origin": "http://localhost:3000/",
      "id": 119
    },
    {
      "time": 1512916015932,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": []
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "App",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": []
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:004",
      "id": 120
    },
    {
      "time": 1512916015936,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": []
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "AddNewTodo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": []
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:004",
      "id": 121
    },
    {
      "time": 1512916015939,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": []
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "ToDos",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": []
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:003",
      "id": 122
    },
    {
      "time": 1512916015944,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": []
          }
        }
      ],
      "type": "onActionDispatched",
      "actionName": "fetch todos",
      "args": [],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": []
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:005",
      "id": 123
    },
    {
      "time": 1512916015945,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": []
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": "fetching",
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 124
    },
    {
      "time": 1512916015946,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": []
          }
        }
      ],
      "type": "onStateWillChange",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": []
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 125
    },
    {
      "time": 1512916015946,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "fetching"
          }
        }
      ],
      "type": "onStateChanged",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "fetching"
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 126
    },
    {
      "time": 1512916015946,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "fetching"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": null,
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 127
    },
    {
      "time": 1512916015947,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "fetching"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "load",
        "args": []
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 128
    },
    {
      "time": 1512916015949,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "fetching"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "component": "AddNewTodo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "fetching"
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:002",
      "id": 129
    },
    {
      "time": 1512916015949,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "fetching"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "component": "ToDos",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "fetching"
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 130
    },
    {
      "time": 1512916015951,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "fetching"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": [
        {
          "label": "Another thing here",
          "done": true
        },
        {
          "label": "new one",
          "done": false
        },
        {
          "label": "A new one",
          "done": true
        },
        {
          "label": "That's a new something",
          "done": true
        }
      ],
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:002",
      "id": 131
    },
    {
      "time": 1512916015951,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "fetching"
          }
        }
      ],
      "type": "onActionDispatched",
      "actionName": "todos loaded",
      "args": [
        [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": false
          },
          {
            "label": "A new one",
            "done": true
          },
          {
            "label": "That's a new something",
            "done": true
          }
        ]
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "fetching"
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 132
    },
    {
      "time": 1512916015951,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "fetching"
          }
        }
      ],
      "type": "onStateWillChange",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "fetching"
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 133
    },
    {
      "time": 1512916015952,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        }
      ],
      "type": "onStateChanged",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 134
    },
    {
      "time": 1512916015952,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "AddNewTodo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                },
                {
                  "label": "That's a new something",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 135
    },
    {
      "time": 1512916015953,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "ToDos",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                },
                {
                  "label": "That's a new something",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 136
    },
    {
      "time": 1512916015954,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "Todo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                },
                {
                  "label": "That's a new something",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 137
    },
    {
      "time": 1512916015955,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineCreated",
      "machine": {
        "name": "_@@@1",
        "state": {
          "name": "idle"
        },
        "transitions": {
          "idle": {
            "edit": "editing"
          },
          "editing": {
            "save": {
              "__func": "save"
            },
            "cancel": "idle"
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "edit": {
          "__func": "<anonymous>"
        },
        "isEditing": {
          "__func": "<anonymous>"
        },
        "save": {
          "__func": "<anonymous>"
        },
        "cancel": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 138
    },
    {
      "time": 1512916015955,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "machines": [
          {
            "name": "_@@@1",
            "state": {
              "name": "idle"
            },
            "transitions": {
              "idle": {
                "edit": "editing"
              },
              "editing": {
                "save": {
                  "__func": "save"
                },
                "cancel": "idle"
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "edit": {
              "__func": "<anonymous>"
            },
            "isEditing": {
              "__func": "<anonymous>"
            },
            "save": {
              "__func": "<anonymous>"
            },
            "cancel": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 139
    },
    {
      "time": 1512916015957,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "Todo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                },
                {
                  "label": "That's a new something",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:002",
      "id": 140
    },
    {
      "time": 1512916015957,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineCreated",
      "machine": {
        "name": "_@@@2",
        "state": {
          "name": "idle"
        },
        "transitions": {
          "idle": {
            "edit": "editing"
          },
          "editing": {
            "save": {
              "__func": "save"
            },
            "cancel": "idle"
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "edit": {
          "__func": "<anonymous>"
        },
        "isEditing": {
          "__func": "<anonymous>"
        },
        "save": {
          "__func": "<anonymous>"
        },
        "cancel": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 141
    },
    {
      "time": 1512916015957,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "machines": [
          {
            "name": "_@@@2",
            "state": {
              "name": "idle"
            },
            "transitions": {
              "idle": {
                "edit": "editing"
              },
              "editing": {
                "save": {
                  "__func": "save"
                },
                "cancel": "idle"
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "edit": {
              "__func": "<anonymous>"
            },
            "isEditing": {
              "__func": "<anonymous>"
            },
            "save": {
              "__func": "<anonymous>"
            },
            "cancel": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 142
    },
    {
      "time": 1512916015958,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "Todo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                },
                {
                  "label": "That's a new something",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 143
    },
    {
      "time": 1512916015959,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineCreated",
      "machine": {
        "name": "_@@@3",
        "state": {
          "name": "idle"
        },
        "transitions": {
          "idle": {
            "edit": "editing"
          },
          "editing": {
            "save": {
              "__func": "save"
            },
            "cancel": "idle"
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "edit": {
          "__func": "<anonymous>"
        },
        "isEditing": {
          "__func": "<anonymous>"
        },
        "save": {
          "__func": "<anonymous>"
        },
        "cancel": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 144
    },
    {
      "time": 1512916015959,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "machines": [
          {
            "name": "_@@@3",
            "state": {
              "name": "idle"
            },
            "transitions": {
              "idle": {
                "edit": "editing"
              },
              "editing": {
                "save": {
                  "__func": "save"
                },
                "cancel": "idle"
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "edit": {
              "__func": "<anonymous>"
            },
            "isEditing": {
              "__func": "<anonymous>"
            },
            "save": {
              "__func": "<anonymous>"
            },
            "cancel": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 145
    },
    {
      "time": 1512916015960,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "Todo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                },
                {
                  "label": "That's a new something",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 146
    },
    {
      "time": 1512916015960,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineCreated",
      "machine": {
        "name": "_@@@4",
        "state": {
          "name": "idle"
        },
        "transitions": {
          "idle": {
            "edit": "editing"
          },
          "editing": {
            "save": {
              "__func": "save"
            },
            "cancel": "idle"
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "edit": {
          "__func": "<anonymous>"
        },
        "isEditing": {
          "__func": "<anonymous>"
        },
        "save": {
          "__func": "<anonymous>"
        },
        "cancel": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 147
    },
    {
      "time": 1512916015960,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "machines": [
          {
            "name": "_@@@4",
            "state": {
              "name": "idle"
            },
            "transitions": {
              "idle": {
                "edit": "editing"
              },
              "editing": {
                "save": {
                  "__func": "save"
                },
                "cancel": "idle"
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "edit": {
              "__func": "<anonymous>"
            },
            "isEditing": {
              "__func": "<anonymous>"
            },
            "save": {
              "__func": "<anonymous>"
            },
            "cancel": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 148
    },
    {
      "time": 1512916015964,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionProcessed",
      "actionName": "todos loaded",
      "args": [
        [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": false
          },
          {
            "label": "A new one",
            "done": true
          },
          {
            "label": "That's a new something",
            "done": true
          }
        ]
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:004",
      "id": 149
    },
    {
      "time": 1512916015964,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": null,
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 150
    },
    {
      "time": 1512916015964,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionProcessed",
      "actionName": "fetch todos",
      "args": [],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 151
    },
    {
      "time": 1512916019351,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionDispatched",
      "actionName": "change status",
      "args": [
        3,
        false
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:03:387",
      "id": 152
    },
    {
      "time": 1512916019352,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "saveTodos",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": false
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 153
    },
    {
      "time": 1512916019352,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "save",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": false
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 154
    },
    {
      "time": 1512916019353,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": null,
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 155
    },
    {
      "time": 1512916019353,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": false
          },
          {
            "label": "A new one",
            "done": true
          },
          {
            "label": "That's a new something",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 156
    },
    {
      "time": 1512916019354,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": false
          },
          {
            "label": "A new one",
            "done": true
          },
          {
            "label": "That's a new something",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 157
    },
    {
      "time": 1512916019354,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": false
          },
          {
            "label": "A new one",
            "done": true
          },
          {
            "label": "That's a new something",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 158
    },
    {
      "time": 1512916019354,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateWillChange",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 159
    },
    {
      "time": 1512916019354,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateChanged",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 160
    },
    {
      "time": 1512916019362,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionProcessed",
      "actionName": "change status",
      "args": [
        3,
        false
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:008",
      "id": 161
    },
    {
      "time": 1512916020462,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              },
              {
                "label": "That's a new something",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionDispatched",
      "actionName": "delete todo",
      "args": [
        3
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            },
            {
              "label": "That's a new something",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:01:100",
      "id": 162
    },
    {
      "time": 1512916020463,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "saveTodos",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 163
    },
    {
      "time": 1512916020463,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "save",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 164
    },
    {
      "time": 1512916020463,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": null,
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 165
    },
    {
      "time": 1512916020464,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": false
          },
          {
            "label": "A new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 166
    },
    {
      "time": 1512916020464,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": false
          },
          {
            "label": "A new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 167
    },
    {
      "time": 1512916020464,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": false
          },
          {
            "label": "A new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 168
    },
    {
      "time": 1512916020464,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateWillChange",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 169
    },
    {
      "time": 1512916020464,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateChanged",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 170
    },
    {
      "time": 1512916020467,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@4",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "component": "Todo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:003",
      "id": 171
    },
    {
      "time": 1512916020467,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 172
    },
    {
      "time": 1512916020468,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 173
    },
    {
      "time": 1512916020468,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 174
    },
    {
      "time": 1512916020468,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [
          {
            "name": "_@@@1",
            "state": {
              "name": "idle"
            },
            "transitions": {
              "idle": {
                "edit": "editing"
              },
              "editing": {
                "save": {
                  "__func": "save"
                },
                "cancel": "idle"
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "edit": {
              "__func": "<anonymous>"
            },
            "isEditing": {
              "__func": "<anonymous>"
            },
            "save": {
              "__func": "<anonymous>"
            },
            "cancel": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 175
    },
    {
      "time": 1512916020469,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 176
    },
    {
      "time": 1512916020469,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [
          {
            "name": "_@@@2",
            "state": {
              "name": "idle"
            },
            "transitions": {
              "idle": {
                "edit": "editing"
              },
              "editing": {
                "save": {
                  "__func": "save"
                },
                "cancel": "idle"
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "edit": {
              "__func": "<anonymous>"
            },
            "isEditing": {
              "__func": "<anonymous>"
            },
            "save": {
              "__func": "<anonymous>"
            },
            "cancel": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 177
    },
    {
      "time": 1512916020469,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": false
                },
                {
                  "label": "A new one",
                  "done": true
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 178
    },
    {
      "time": 1512916020469,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [
          {
            "name": "_@@@3",
            "state": {
              "name": "idle"
            },
            "transitions": {
              "idle": {
                "edit": "editing"
              },
              "editing": {
                "save": {
                  "__func": "save"
                },
                "cancel": "idle"
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "edit": {
              "__func": "<anonymous>"
            },
            "isEditing": {
              "__func": "<anonymous>"
            },
            "save": {
              "__func": "<anonymous>"
            },
            "cancel": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 179
    },
    {
      "time": 1512916020470,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineDisconnected",
      "meta": {
        "machines": [],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 180
    },
    {
      "time": 1512916020472,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionProcessed",
      "actionName": "delete todo",
      "args": [
        3
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:002",
      "id": 181
    },
    {
      "time": 1512916021550,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": false
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionDispatched",
      "actionName": "change status",
      "args": [
        1,
        true
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": false
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:01:078",
      "id": 182
    },
    {
      "time": 1512916021550,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "saveTodos",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 183
    },
    {
      "time": 1512916021551,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "save",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 184
    },
    {
      "time": 1512916021551,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": null,
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 185
    },
    {
      "time": 1512916021551,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 186
    },
    {
      "time": 1512916021551,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 187
    },
    {
      "time": 1512916021551,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 188
    },
    {
      "time": 1512916021552,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateWillChange",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 189
    },
    {
      "time": 1512916021552,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateChanged",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 190
    },
    {
      "time": 1512916021557,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionProcessed",
      "actionName": "change status",
      "args": [
        1,
        true
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:005",
      "id": 191
    },
    {
      "time": 1512916022096,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionDispatched",
      "actionName": "change status",
      "args": [
        2,
        false
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:01:539",
      "id": 192
    },
    {
      "time": 1512916022096,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "saveTodos",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 193
    },
    {
      "time": 1512916022096,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "save",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 194
    },
    {
      "time": 1512916022097,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": null,
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 195
    },
    {
      "time": 1512916022097,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 196
    },
    {
      "time": 1512916022097,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 197
    },
    {
      "time": 1512916022097,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 198
    },
    {
      "time": 1512916022097,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateWillChange",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 199
    },
    {
      "time": 1512916022097,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateChanged",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 200
    },
    {
      "time": 1512916022102,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionProcessed",
      "actionName": "change status",
      "args": [
        2,
        false
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:005",
      "id": 201
    },
    {
      "time": 1512916024150,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionDispatched",
      "actionName": "add new todo",
      "args": [
        {
          "label": "new one",
          "done": false
        }
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:02:048",
      "id": 202
    },
    {
      "time": 1512916024151,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "saveTodos",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": false
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 203
    },
    {
      "time": 1512916024151,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "save",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": false
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 204
    },
    {
      "time": 1512916024152,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": null,
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 205
    },
    {
      "time": 1512916024153,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          },
          {
            "label": "new one",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 206
    },
    {
      "time": 1512916024153,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          },
          {
            "label": "new one",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 207
    },
    {
      "time": 1512916024153,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          },
          {
            "label": "new one",
            "done": false
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 208
    },
    {
      "time": 1512916024153,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateWillChange",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 209
    },
    {
      "time": 1512916024154,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateChanged",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 210
    },
    {
      "time": 1512916024157,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "component": "Todo",
        "machines": [
          {
            "name": "ToDos",
            "state": {
              "name": "idle",
              "todos": [
                {
                  "label": "Another thing here",
                  "done": true
                },
                {
                  "label": "new one",
                  "done": true
                },
                {
                  "label": "A new one",
                  "done": false
                },
                {
                  "label": "new one",
                  "done": false
                }
              ]
            },
            "transitions": {
              "idle": {
                "fetch todos": {
                  "__func": "fetchTodos"
                },
                "add new todo": {
                  "__func": "addNewTodo"
                },
                "delete todo": {
                  "__func": "deleteTodo"
                },
                "edit todo": {
                  "__func": "editTodo"
                },
                "change status": {
                  "__func": "changeStatus"
                }
              },
              "fetching": {
                "todos loaded": {
                  "__func": "todosLoaded"
                },
                "error": {
                  "__func": "error"
                }
              },
              "error": {
                "fetch todos": {
                  "__func": "fetchTodos"
                }
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "fetchTodos": {
              "__func": "<anonymous>"
            },
            "addNewTodo": {
              "__func": "<anonymous>"
            },
            "deleteTodo": {
              "__func": "<anonymous>"
            },
            "editTodo": {
              "__func": "<anonymous>"
            },
            "changeStatus": {
              "__func": "<anonymous>"
            },
            "isFetching": {
              "__func": "<anonymous>"
            },
            "todosLoaded": {
              "__func": "<anonymous>"
            },
            "error": {
              "__func": "<anonymous>"
            },
            "isError": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:003",
      "id": 211
    },
    {
      "time": 1512916024157,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineCreated",
      "machine": {
        "name": "_@@@5",
        "state": {
          "name": "idle"
        },
        "transitions": {
          "idle": {
            "edit": "editing"
          },
          "editing": {
            "save": {
              "__func": "save"
            },
            "cancel": "idle"
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "edit": {
          "__func": "<anonymous>"
        },
        "isEditing": {
          "__func": "<anonymous>"
        },
        "save": {
          "__func": "<anonymous>"
        },
        "cancel": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 212
    },
    {
      "time": 1512916024157,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onMachineConnected",
      "meta": {
        "machines": [
          {
            "name": "_@@@5",
            "state": {
              "name": "idle"
            },
            "transitions": {
              "idle": {
                "edit": "editing"
              },
              "editing": {
                "save": {
                  "__func": "save"
                },
                "cancel": "idle"
              }
            },
            "isIdle": {
              "__func": "<anonymous>"
            },
            "edit": {
              "__func": "<anonymous>"
            },
            "isEditing": {
              "__func": "<anonymous>"
            },
            "save": {
              "__func": "<anonymous>"
            },
            "cancel": {
              "__func": "<anonymous>"
            },
            "destroy": {
              "__func": "<anonymous>"
            }
          }
        ],
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 213
    },
    {
      "time": 1512916024160,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionProcessed",
      "actionName": "add new todo",
      "args": [
        {
          "label": "new one",
          "done": false
        }
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:003",
      "id": 214
    },
    {
      "time": 1512916025334,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": false
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionDispatched",
      "actionName": "change status",
      "args": [
        3,
        true
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": false
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:01:174",
      "id": 215
    },
    {
      "time": 1512916025335,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "saveTodos",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": true
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 216
    },
    {
      "time": 1512916025335,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorStep",
      "yielded": {
        "__type": "call",
        "func": "save",
        "args": [
          [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": true
            }
          ]
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 217
    },
    {
      "time": 1512916025335,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": null,
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 218
    },
    {
      "time": 1512916025336,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          },
          {
            "label": "new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:001",
      "id": 219
    },
    {
      "time": 1512916025336,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorResumed",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          },
          {
            "label": "new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 220
    },
    {
      "time": 1512916025336,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onGeneratorEnd",
      "value": {
        "name": "idle",
        "todos": [
          {
            "label": "Another thing here",
            "done": true
          },
          {
            "label": "new one",
            "done": true
          },
          {
            "label": "A new one",
            "done": false
          },
          {
            "label": "new one",
            "done": true
          }
        ]
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 221
    },
    {
      "time": 1512916025336,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateWillChange",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 222
    },
    {
      "time": 1512916025336,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onStateChanged",
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "id": 223
    },
    {
      "time": 1512916025341,
      "uid": "8327e224-7994-47b8-af95-7731afa9e482",
      "state": [
        {
          "name": "ToDos",
          "state": {
            "name": "idle",
            "todos": [
              {
                "label": "Another thing here",
                "done": true
              },
              {
                "label": "new one",
                "done": true
              },
              {
                "label": "A new one",
                "done": false
              },
              {
                "label": "new one",
                "done": true
              }
            ]
          }
        },
        {
          "name": "_@@@1",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@2",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@3",
          "state": {
            "name": "idle"
          }
        },
        {
          "name": "_@@@5",
          "state": {
            "name": "idle"
          }
        }
      ],
      "type": "onActionProcessed",
      "actionName": "change status",
      "args": [
        3,
        true
      ],
      "machine": {
        "name": "ToDos",
        "state": {
          "name": "idle",
          "todos": [
            {
              "label": "Another thing here",
              "done": true
            },
            {
              "label": "new one",
              "done": true
            },
            {
              "label": "A new one",
              "done": false
            },
            {
              "label": "new one",
              "done": true
            }
          ]
        },
        "transitions": {
          "idle": {
            "fetch todos": {
              "__func": "fetchTodos"
            },
            "add new todo": {
              "__func": "addNewTodo"
            },
            "delete todo": {
              "__func": "deleteTodo"
            },
            "edit todo": {
              "__func": "editTodo"
            },
            "change status": {
              "__func": "changeStatus"
            }
          },
          "fetching": {
            "todos loaded": {
              "__func": "todosLoaded"
            },
            "error": {
              "__func": "error"
            }
          },
          "error": {
            "fetch todos": {
              "__func": "fetchTodos"
            }
          }
        },
        "isIdle": {
          "__func": "<anonymous>"
        },
        "fetchTodos": {
          "__func": "<anonymous>"
        },
        "addNewTodo": {
          "__func": "<anonymous>"
        },
        "deleteTodo": {
          "__func": "<anonymous>"
        },
        "editTodo": {
          "__func": "<anonymous>"
        },
        "changeStatus": {
          "__func": "<anonymous>"
        },
        "isFetching": {
          "__func": "<anonymous>"
        },
        "todosLoaded": {
          "__func": "<anonymous>"
        },
        "error": {
          "__func": "<anonymous>"
        },
        "isError": {
          "__func": "<anonymous>"
        },
        "destroy": {
          "__func": "<anonymous>"
        }
      },
      "meta": {
        "middlewares": 2
      },
      "origin": "http://localhost:3000/",
      "timeDiff": "+ 0:00:005",
      "id": 224
    }
  ]
}

},{}],456:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _constants = require('../constants');

var _react3 = require('stent/lib/react');

var _Dashboard = require('./Dashboard.jsx');

var _Dashboard2 = _interopRequireDefault(_Dashboard);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-unused-vars */

var App = function (_React$Component) {
  _inherits(App, _React$Component);

  function App() {
    _classCallCheck(this, App);

    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));
  }

  _createClass(App, [{
    key: '_renderPage',
    value: function _renderPage() {
      var page = this.props.page;


      switch (page) {
        case _constants.PAGES.DASHBOARD:
          return _react2.default.createElement(_Dashboard2.default, null);
      }
      return _react2.default.createElement(
        'p',
        null,
        '...'
      );
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { style: { height: '100%' } },
        this._renderPage()
      );
    }
  }]);

  return App;
}(_react2.default.Component);

;

exports.default = (0, _react3.connect)(App).with('DevTools').map(function (_ref) {
  var state = _ref.state;
  return { page: state.page };
});

},{"../constants":480,"./Dashboard.jsx":457,"react":433,"react-dom":187,"stent/lib/react":451}],457:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _react3 = require('stent/lib/react');

var _renderAsTree = require('../helpers/renderAsTree');

var _onMachineCreated = require('./handlers/onMachineCreated');

var _onMachineCreated2 = _interopRequireDefault(_onMachineCreated);

var _onMachineConnected = require('./handlers/onMachineConnected');

var _onMachineConnected2 = _interopRequireDefault(_onMachineConnected);

var _onMachineDisconnected = require('./handlers/onMachineDisconnected');

var _onMachineDisconnected2 = _interopRequireDefault(_onMachineDisconnected);

var _onActionDispatched = require('./handlers/onActionDispatched');

var _onActionDispatched2 = _interopRequireDefault(_onActionDispatched);

var _onActionProcessed = require('./handlers/onActionProcessed');

var _onActionProcessed2 = _interopRequireDefault(_onActionProcessed);

var _onGeneratorStep = require('./handlers/onGeneratorStep');

var _onGeneratorStep2 = _interopRequireDefault(_onGeneratorStep);

var _onGeneratorEnd = require('./handlers/onGeneratorEnd');

var _onGeneratorEnd2 = _interopRequireDefault(_onGeneratorEnd);

var _onGeneratorResumed = require('./handlers/onGeneratorResumed');

var _onGeneratorResumed2 = _interopRequireDefault(_onGeneratorResumed);

var _onStateChanged = require('./handlers/onStateChanged');

var _onStateChanged2 = _interopRequireDefault(_onStateChanged);

var _onStateWillChange = require('./handlers/onStateWillChange');

var _onStateWillChange2 = _interopRequireDefault(_onStateWillChange);

var _UnrecognizedEvent = require('./handlers/UnrecognizedEvent');

var _UnrecognizedEvent2 = _interopRequireDefault(_UnrecognizedEvent);

var _SagaEffectTriggered = require('./handlers/SagaEffectTriggered');

var _SagaEffectTriggered2 = _interopRequireDefault(_SagaEffectTriggered);

var _SagaEffectResolved = require('./handlers/SagaEffectResolved');

var _SagaEffectResolved2 = _interopRequireDefault(_SagaEffectResolved);

var _SagaEffectActionDispatched = require('./handlers/SagaEffectActionDispatched');

var _SagaEffectActionDispatched2 = _interopRequireDefault(_SagaEffectActionDispatched);

var _SagaEffectCanceled = require('./handlers/SagaEffectCanceled');

var _SagaEffectCanceled2 = _interopRequireDefault(_SagaEffectCanceled);

var _SagaEffectRejected = require('./handlers/SagaEffectRejected');

var _SagaEffectRejected2 = _interopRequireDefault(_SagaEffectRejected);

var _ReduxAction = require('./handlers/ReduxAction');

var _ReduxAction2 = _interopRequireDefault(_ReduxAction);

var _Settings = require('./Settings.jsx');

var _Settings2 = _interopRequireDefault(_Settings);

var _reactVirtualized = require('react-virtualized');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars


var StentHandlers = {
  onMachineCreated: _onMachineCreated2.default,
  onMachineConnected: _onMachineConnected2.default,
  onMachineDisconnected: _onMachineDisconnected2.default,
  onActionDispatched: _onActionDispatched2.default,
  onActionProcessed: _onActionProcessed2.default,
  onGeneratorStep: _onGeneratorStep2.default,
  onGeneratorEnd: _onGeneratorEnd2.default,
  onGeneratorResumed: _onGeneratorResumed2.default,
  onStateChanged: _onStateChanged2.default,
  onStateWillChange: _onStateWillChange2.default
};
var Handlers = {
  '@saga_effectTriggered': _SagaEffectTriggered2.default,
  '@saga_effectResolved': _SagaEffectResolved2.default,
  '@saga_actionDispatched': _SagaEffectActionDispatched2.default,
  '@saga_effectCancelled': _SagaEffectCanceled2.default,
  '@saga_effectRejected': _SagaEffectRejected2.default,
  '@redux_ACTION': _ReduxAction2.default
};

var Dashboard = function (_React$Component) {
  _inherits(Dashboard, _React$Component);

  function Dashboard(props) {
    _classCallCheck(this, Dashboard);

    var _this = _possibleConstructorReturn(this, (Dashboard.__proto__ || Object.getPrototypeOf(Dashboard)).call(this, props));

    _this._renderEvent = _this._renderEvent.bind(_this);
    _this._rowRenderer = _this._rowRenderer.bind(_this);
    _this.state = {
      filterByTypes: null,
      source: null,
      settingsVisibility: false
    };
    return _this;
  }

  _createClass(Dashboard, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (newProps.events.length > 1) {
        this.setState({ source: newProps.events[0].uid });
      }
    }
  }, {
    key: '_onSourceChange',
    value: function _onSourceChange(source) {
      this.setState({ source: source });
    }
  }, {
    key: '_renderSourceSelector',
    value: function _renderSourceSelector() {
      var _this2 = this;

      var options = this.props.events.reduce(function (result, event) {
        if (!result.find(function (o) {
          return o === event.uid;
        })) result.push(event.uid);
        return result;
      }, []);

      return _react2.default.createElement(
        'select',
        { onChange: function onChange(e) {
            return _this2._onSourceChange(e.target.value);
          }, className: 'left mr1', key: 'filter3' },
        options.map(function (uid, i) {
          return _react2.default.createElement(
            'option',
            { value: uid, key: i },
            '<source ' + (i + 1) + '>'
          );
        })
      );
    }
  }, {
    key: '_renderEvent',
    value: function _renderEvent(event) {
      var _props = this.props,
          pinnedEvent = _props.pinnedEvent,
          pin = _props.pin;
      var type = event.type,
          withMarker = event.withMarker;
      // eslint-disable-next-line no-unused-vars

      var Component = StentHandlers[type] || Handlers[type] || _UnrecognizedEvent2.default;
      var isPinned = (pinnedEvent || {})['id'] === event.id;

      var className = (type ? type : '') + ' actionRow relative' + (withMarker ? ' withMarker' : '') + (isPinned ? ' pinned' : '');

      return _react2.default.createElement(Component, {
        key: event.id,
        className: className,
        onClick: function onClick() {
          return pin(event.id);
        },
        event: event
      });
    }
  }, {
    key: '_renderState',
    value: function _renderState() {
      var pinnedEvent = this.props.pinnedEvent;


      if (!pinnedEvent) return null;
      if (pinnedEvent.type in StentHandlers) {
        return (0, _renderAsTree.renderMachinesAsTree)(pinnedEvent.state);
      }
      return (0, _renderAsTree.renderStateAsTree)(pinnedEvent.state);
    }
  }, {
    key: '_changeSettingsVisibility',
    value: function _changeSettingsVisibility(eventsToRender) {
      this.setState({ settingsVisibility: !this.state.settingsVisibility });
      if (eventsToRender.length > 0) {
        this.props.pin(eventsToRender[eventsToRender.length - 1].id);
      }
    }
  }, {
    key: '_rowRenderer',
    value: function _rowRenderer(eventsToRender, _ref) {
      var index = _ref.index,
          isScrolling = _ref.isScrolling,
          isVisible = _ref.isVisible,
          key = _ref.key,
          parent = _ref.parent,
          style = _ref.style;

      return _react2.default.createElement(
        'div',
        { key: key, style: style },
        this._renderEvent(eventsToRender[index])
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state = this.state,
          filterByTypes = _state.filterByTypes,
          source = _state.source;
      var _props2 = this.props,
          clear = _props2.clear,
          marker = _props2.marker,
          navViewState = _props2.navViewState,
          navViewEvent = _props2.navViewEvent,
          navViewAnalysis = _props2.navViewAnalysis,
          navState = _props2.navState,
          events = _props2.events,
          pinnedEvent = _props2.pinnedEvent;


      if (events.length === 0) {
        return _react2.default.createElement(
          'p',
          { style: { margin: '0.2em 0 0 0' } },
          'Waiting for events ...'
        );
      }

      var eventsToRender = events.filter(function (_ref2) {
        var uid = _ref2.uid,
            type = _ref2.type;

        // filter by source
        if (uid !== source) return false;
        // filter by type
        if (filterByTypes !== null && type && filterByTypes.indexOf(type) < 0) {
          return false;
        }
        return true;
      });

      return _react2.default.createElement(
        'div',
        { className: 'dashboard' },
        _react2.default.createElement(
          'div',
          { className: 'logLeft' },
          _react2.default.createElement(
            'div',
            { className: 'logNav' },
            _react2.default.createElement(
              'a',
              { onClick: function onClick() {
                  return marker();
                }, key: 'marker', className: 'ml05 mr1 try2' },
              _react2.default.createElement('i', { className: 'fa fa-bookmark' })
            ),
            _react2.default.createElement(
              'a',
              { onClick: function onClick() {
                  return clear();
                }, key: 'clear', className: 'mr1 try2' },
              _react2.default.createElement('i', { className: 'fa fa-ban' })
            ),
            _react2.default.createElement(
              'a',
              { onClick: function onClick() {
                  return _this3._changeSettingsVisibility(eventsToRender);
                },
                key: 's',
                className: 'right mr05 try2' },
              _react2.default.createElement('i', { className: 'fa fa-gear' })
            ),
            this._renderSourceSelector()
          ),
          _react2.default.createElement(
            'ul',
            { className: 'log' },
            _react2.default.createElement(
              _reactVirtualized.AutoSizer,
              null,
              function (_ref3) {
                var height = _ref3.height,
                    width = _ref3.width;
                return _react2.default.createElement(_reactVirtualized.List, {
                  ref: function ref(l) {
                    return _this3.list = l;
                  },
                  rowRenderer: function rowRenderer() {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                      args[_key] = arguments[_key];
                    }

                    return _this3._rowRenderer.apply(_this3, [eventsToRender].concat(args));
                  },
                  height: height,
                  rowCount: eventsToRender.length,
                  rowHeight: 28,
                  width: width,
                  scrollToIndex: !pinnedEvent ? -1 : eventsToRender.findIndex(function (e) {
                    return e.id === pinnedEvent.id;
                  }) });
              }
            )
          ),
          this.state.settingsVisibility && _react2.default.createElement(_Settings2.default, {
            onClose: function onClose() {
              return _this3._changeSettingsVisibility(eventsToRender);
            },
            onChange: function onChange(types) {
              return _this3.setState({ filterByTypes: types });
            },
            events: events,
            types: this.state.filterByTypes })
        ),
        _react2.default.createElement(
          'div',
          { className: 'logRight' },
          _react2.default.createElement(
            'div',
            { className: 'logNav fullHeight', key: 'nav' },
            _react2.default.createElement(
              'a',
              { onClick: navViewState, className: navState === 'state' ? 'selected' : null },
              _react2.default.createElement('i', { className: 'fa fa-heart mr05' }),
              'State'
            ),
            _react2.default.createElement(
              'a',
              { onClick: navViewEvent, className: navState === 'event' ? 'selected' : null },
              _react2.default.createElement('i', { className: 'fa fa-dot-circle-o mr05' }),
              'Event'
            ),
            _react2.default.createElement(
              'a',
              { onClick: navViewAnalysis, className: navState === 'analysis' ? 'selected' : null },
              _react2.default.createElement('i', { className: 'fa fa-bar-chart-o mr05' }),
              'Analysis'
            )
          ),
          _react2.default.createElement(
            'div',
            { className: 'logTree', key: 'content' },
            navState === 'state' ? this._renderState() : null,
            navState === 'event' ? (0, _renderAsTree.renderEventAsTree)(pinnedEvent) : null,
            navState === 'analysis' ? 'Work in progress ...' : null
          )
        )
      );
    }
  }]);

  return Dashboard;
}(_react2.default.Component);

;

exports.default = (0, _react3.connect)((0, _react3.connect)(Dashboard).with('DevTools').map(function (_ref4) {
  var state = _ref4.state,
      flushEvents = _ref4.flushEvents,
      addMarker = _ref4.addMarker,
      _pin = _ref4.pin;

  return {
    clear: function clear() {
      return flushEvents();
    },
    marker: function marker() {
      return addMarker();
    },
    pin: function pin(id) {
      return _pin(id);
    },
    pinnedEvent: state.pinnedEvent,
    events: state.events
  };
})).with('Nav').map(function (n) {
  return {
    navViewState: n.viewState,
    navViewEvent: n.viewEvent,
    navViewAnalysis: n.viewAnalysis,
    navState: n.state.name
  };
});

},{"../helpers/renderAsTree":486,"./Settings.jsx":458,"./handlers/ReduxAction":460,"./handlers/SagaEffectActionDispatched":461,"./handlers/SagaEffectCanceled":462,"./handlers/SagaEffectRejected":463,"./handlers/SagaEffectResolved":464,"./handlers/SagaEffectTriggered":465,"./handlers/UnrecognizedEvent":466,"./handlers/onActionDispatched":470,"./handlers/onActionProcessed":471,"./handlers/onGeneratorEnd":472,"./handlers/onGeneratorResumed":473,"./handlers/onGeneratorStep":474,"./handlers/onMachineConnected":475,"./handlers/onMachineCreated":476,"./handlers/onMachineDisconnected":477,"./handlers/onStateChanged":478,"./handlers/onStateWillChange":479,"react":433,"react-virtualized":392,"stent/lib/react":451}],458:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Settings = function (_React$Component) {
  _inherits(Settings, _React$Component);

  function Settings(props) {
    _classCallCheck(this, Settings);

    var _this = _possibleConstructorReturn(this, (Settings.__proto__ || Object.getPrototypeOf(Settings)).call(this, props));

    var types = _this._extractTypes();

    if (props.types !== null) {
      Object.keys(types).forEach(function (type) {
        types[type] = props.types.indexOf(type) >= 0;
      });
    }

    _this.state = { types: types };
    return _this;
  }

  _createClass(Settings, [{
    key: '_extractTypes',
    value: function _extractTypes() {
      return this.props.events.reduce(function (result, event) {
        if (typeof event.type !== 'undefined') {
          result[event.type] = true;
        } else if (typeof event.label !== 'undefined') {
          result[event.label] = true;
        }
        return result;
      }, {});
    }
  }, {
    key: '_onChange',
    value: function _onChange(type) {
      var types = this.state.types;


      types[type] = !types[type];
      this.setState({ types: types });
      this.props.onChange(Object.keys(types).filter(function (type) {
        return types[type];
      }));
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var onClose = this.props.onClose;
      var types = this.state.types;


      return _react2.default.createElement(
        'div',
        { className: 'settings' },
        _react2.default.createElement(
          'a',
          { className: 'close', onClick: onClose },
          _react2.default.createElement('i', { className: 'fa fa-times' })
        ),
        _react2.default.createElement(
          'p',
          null,
          _react2.default.createElement(
            'strong',
            null,
            'Events:'
          )
        ),
        _react2.default.createElement(
          'div',
          null,
          Object.keys(types).map(function (type, i) {
            return _react2.default.createElement(
              'label',
              { key: i, className: 'block mb05' },
              _react2.default.createElement('input', { type: 'checkbox', checked: types[type], onChange: function onChange(event) {
                  return _this2._onChange(type);
                } }),
              type
            );
          })
        )
      );
    }
  }]);

  return Settings;
}(_react2.default.Component);

exports.default = Settings;

},{"react":433}],459:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TimeDiff;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function TimeDiff(_ref) {
  var timeDiff = _ref.timeDiff;

  if (!timeDiff) return null;

  return _react2.default.createElement(
    'small',
    { className: 'timeDiff' },
    _react2.default.createElement('i', { className: 'fa fa-clock-o', style: { marginRight: '0.5em' } }),
    timeDiff
  );
} // eslint-disable-next-line no-unused-vars

},{"react":433}],460:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReduxAction;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isDefined = require('../../helpers/isDefined');

var _isDefined2 = _interopRequireDefault(_isDefined);

var _SagaEffectName = require('./helpers/SagaEffectName');

var _SagaEffectName2 = _interopRequireDefault(_SagaEffectName);

var _renderJSONPreview = require('../../helpers/renderJSONPreview');

var _renderJSONPreview2 = _interopRequireDefault(_renderJSONPreview);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars


function ReduxAction(_ref) {
  var event = _ref.event;

  var label = '';
  var action = event.action,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: '#c8ecf1' });

  if ((0, _isDefined2.default)(action)) {
    var type = action.type,
        rest = _objectWithoutProperties(action, ['type']);

    label = _react2.default.createElement(
      'span',
      null,
      _react2.default.createElement(
        'strong',
        null,
        type
      ),
      ' ',
      _react2.default.createElement(
        'small',
        null,
        (0, _renderJSONPreview2.default)(rest)
      )
    );
  }

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-dot-circle-o' }),
      label
    )
  );
}

},{"../../helpers/isDefined":483,"../../helpers/renderJSONPreview":488,"../TimeDiff.jsx":459,"./helpers/SagaEffectName":468,"./helpers/calculateRowStyles":469,"react":433}],461:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SagaEffectActionDispatched;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isDefined = require('../../helpers/isDefined');

var _isDefined2 = _interopRequireDefault(_isDefined);

var _SagaEffectName = require('./helpers/SagaEffectName');

var _SagaEffectName2 = _interopRequireDefault(_SagaEffectName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SagaEffectActionDispatched(_ref) {
  var event = _ref.event;

  var label = '';
  var action = event.action,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: '#c8ead6' });

  if ((0, _isDefined2.default)(action)) {
    label = _react2.default.createElement(
      'span',
      null,
      'Action ',
      _react2.default.createElement(
        'strong',
        null,
        action.type
      ),
      ' dispatched'
    );
  }

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-toggle-right' }),
      label
    )
  );
}
// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars

},{"../../helpers/isDefined":483,"../TimeDiff.jsx":459,"./helpers/SagaEffectName":468,"./helpers/calculateRowStyles":469,"react":433}],462:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SagaEffectCanceled;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _SagaEffectName = require('./helpers/SagaEffectName');

var _SagaEffectName2 = _interopRequireDefault(_SagaEffectName);

var _SagaEffectIds = require('./helpers/SagaEffectIds');

var _SagaEffectIds2 = _interopRequireDefault(_SagaEffectIds);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function SagaEffectCanceled(_ref) {
  var event = _ref.event;

  var label = 'canceled';
  var style = (0, _calculateRowStyles2.default)(event, { color: '#c8ead6' });
  var timeDiff = event.timeDiff;


  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-times-rectangle-o' }),
      _react2.default.createElement(_SagaEffectIds2.default, { event: event }),
      label
    )
  );
}
// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars

},{"../TimeDiff.jsx":459,"./helpers/SagaEffectIds":467,"./helpers/SagaEffectName":468,"./helpers/calculateRowStyles":469,"react":433}],463:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SagaEffectCanceled;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isDefined = require('../../helpers/isDefined');

var _isDefined2 = _interopRequireDefault(_isDefined);

var _readFromPath = require('../../helpers/readFromPath');

var _readFromPath2 = _interopRequireDefault(_readFromPath);

var _SagaEffectName = require('./helpers/SagaEffectName');

var _SagaEffectName2 = _interopRequireDefault(_SagaEffectName);

var _SagaEffectIds = require('./helpers/SagaEffectIds');

var _SagaEffectIds2 = _interopRequireDefault(_SagaEffectIds);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function SagaEffectCanceled(_ref) {
  var event = _ref.event;

  var label = 'canceled';
  var error = event.error,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: '#c8ead6' });

  if ((0, _isDefined2.default)(error)) {
    var message = (0, _readFromPath2.default)(error, 'message', false);

    if (message) {
      label = _react2.default.createElement(
        'strong',
        null,
        message
      );
    } else {
      label = 'error';
    }
  }

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-frown-o' }),
      _react2.default.createElement(_SagaEffectIds2.default, { event: event }),
      label
    )
  );
}
// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars

},{"../../helpers/isDefined":483,"../../helpers/readFromPath":485,"../TimeDiff.jsx":459,"./helpers/SagaEffectIds":467,"./helpers/SagaEffectName":468,"./helpers/calculateRowStyles":469,"react":433}],464:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars


exports.default = SagaEffectResolved;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isDefined = require('../../helpers/isDefined');

var _isDefined2 = _interopRequireDefault(_isDefined);

var _SagaEffectIds = require('./helpers/SagaEffectIds');

var _SagaEffectIds2 = _interopRequireDefault(_SagaEffectIds);

var _SagaEffectName = require('./helpers/SagaEffectName');

var _SagaEffectName2 = _interopRequireDefault(_SagaEffectName);

var _renderJSONPreview = require('../../helpers/renderJSONPreview');

var _renderJSONPreview2 = _interopRequireDefault(_renderJSONPreview);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getResultRepresentation = function getResultRepresentation(result, i) {
  if ((0, _isDefined2.default)(result) && result !== null) {
    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
      if ('@@redux-saga/TASK' in result) {
        return _react2.default.createElement(
          'strong',
          { key: i },
          result.name,
          '\xA0'
        );
      }
      return (0, _renderJSONPreview2.default)(result);
    }
    return result;
  }
  return null;
};

function SagaEffectResolved(_ref) {
  var event = _ref.event;

  var label = '';
  var result = event.result,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: '#c8ead6' });

  if ((0, _isDefined2.default)(result)) {
    if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object' && result !== null) {
      if ('@@redux-saga/TASK' in result) {
        label = getResultRepresentation(result);
      } else if ('type' in result) {
        label = result.type;
      } else if (Array.isArray(result)) {
        if (_typeof(result[0]) === 'object' && '@@redux-saga/TASK' in result[0]) {
          label = result.map(getResultRepresentation);
        } else {
          label = (0, _renderJSONPreview2.default)(result);
        }
      } else {
        label = (0, _renderJSONPreview2.default)(result);
      }
    } else if (result !== null) {
      label = result;
    }
  }

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-check-square-o' }),
      _react2.default.createElement(_SagaEffectIds2.default, { event: event }),
      label
    )
  );
}

},{"../../helpers/isDefined":483,"../../helpers/renderJSONPreview":488,"../TimeDiff.jsx":459,"./helpers/SagaEffectIds":467,"./helpers/SagaEffectName":468,"./helpers/calculateRowStyles":469,"react":433}],465:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SagaEffectTriggered;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _readFromPath = require('../../helpers/readFromPath');

var _readFromPath2 = _interopRequireDefault(_readFromPath);

var _isDefined = require('../../helpers/isDefined');

var _isDefined2 = _interopRequireDefault(_isDefined);

var _SagaEffectIds = require('./helpers/SagaEffectIds');

var _SagaEffectIds2 = _interopRequireDefault(_SagaEffectIds);

var _SagaEffectName = require('./helpers/SagaEffectName');

var _SagaEffectName2 = _interopRequireDefault(_SagaEffectName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function SagaEffectTriggered(_ref) {
  var event = _ref.event;

  var label = '';
  var effect = event.effect,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: '#c8ead6' });

  if ((0, _isDefined2.default)(effect)) {
    var saga = (0, _readFromPath2.default)(effect, 'saga.__func');

    if ((0, _readFromPath2.default)(effect, 'root') === true) {
      label = _react2.default.createElement(
        'span',
        null,
        'Root saga ',
        saga ? _react2.default.createElement(
          'strong',
          null,
          '(',
          saga,
          ')'
        ) : ''
      );
    } else {
      label = _react2.default.createElement(
        'span',
        null,
        _react2.default.createElement(_SagaEffectName2.default, { effect: effect })
      );
    }
  }

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-square-o' }),
      _react2.default.createElement(_SagaEffectIds2.default, { event: event }),
      label
    )
  );
}
// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars

},{"../../helpers/isDefined":483,"../../helpers/readFromPath":485,"../TimeDiff.jsx":459,"./helpers/SagaEffectIds":467,"./helpers/SagaEffectName":468,"./helpers/calculateRowStyles":469,"react":433}],466:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UnrecognizedEvent;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function UnrecognizedEvent(_ref) {
  var event = _ref.event;

  var icon = event.icon || 'fa-angle-double-right';
  var label = event.label && event.label.replace(/ /g, '') !== event.type ? _react2.default.createElement(
    'div',
    { style: { marginLeft: '1.6em' } },
    event.label
  ) : '';
  var style = (0, _calculateRowStyles2.default)(event, { color: '#e6e6e6' });

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: event.timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa ' + icon, style: { marginRight: '0.5em' } }),
      _react2.default.createElement(
        'strong',
        null,
        event.type
      ),
      label
    )
  );
}
// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars
;

},{"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],467:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SagaEffectIds;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _readFromPath = require('../../../helpers/readFromPath');

var _readFromPath2 = _interopRequireDefault(_readFromPath);

var _isDefined = require('../../../helpers/isDefined');

var _isDefined2 = _interopRequireDefault(_isDefined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function SagaEffectIds(_ref) {
  var event = _ref.event;

  var effectId = (0, _readFromPath2.default)(event, 'effectId', false);
  var parentEffectId = (0, _readFromPath2.default)(event, 'parentEffectId', false);

  return _react2.default.createElement(
    'span',
    { style: { marginRight: '0.3em' } },
    (0, _isDefined2.default)(effectId) && _react2.default.createElement(
      'strong',
      null,
      '#',
      effectId,
      (0, _isDefined2.default)(parentEffectId) && parentEffectId !== false && _react2.default.createElement(
        'span',
        { className: 'sagaParentEffect' },
        parentEffectId
      )
    )
  );
} // eslint-disable-next-line no-unused-vars
;

},{"../../../helpers/isDefined":483,"../../../helpers/readFromPath":485,"react":433}],468:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // eslint-disable-next-line no-unused-vars


exports.default = SagaEffectName;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _readFromPath = require('../../../helpers/readFromPath');

var _readFromPath2 = _interopRequireDefault(_readFromPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var readFN = function readFN(effectName, effect) {
  return (0, _readFromPath2.default)(effect, effectName + '.fn.__func');
};
var readPattern = function readPattern(effectName, effect) {
  return (0, _readFromPath2.default)(effect, effectName + '.pattern');
};
var readSelector = function readSelector(effectName, effect) {
  return (0, _readFromPath2.default)(effect, effectName + '.selector.__func');
};
var readName = function readName(effectName, effect) {
  return (0, _readFromPath2.default)(effect, effectName + '.name');
};

function SagaEffectName(_ref) {
  var effect = _ref.effect;

  if ((typeof effect === 'undefined' ? 'undefined' : _typeof(effect)) !== 'object') return null;

  if ('ALL' in effect) {
    return _react2.default.createElement(
      'span',
      null,
      'all ',
      _react2.default.createElement(
        'strong',
        null,
        '(',
        effect.ALL.length,
        ')'
      )
    );
  } else if ('FORK' in effect) {
    var fn = readFN('FORK', effect);

    return _react2.default.createElement(
      'span',
      null,
      'fork ',
      fn && _react2.default.createElement(
        'strong',
        null,
        fn
      )
    );
  } else if ('TAKE' in effect) {
    var pattern = readPattern('TAKE', effect);

    return _react2.default.createElement(
      'span',
      null,
      'take ',
      pattern && _react2.default.createElement(
        'strong',
        null,
        pattern
      )
    );
  } else if ('CALL' in effect) {
    var _fn = readFN('CALL', effect);

    return _react2.default.createElement(
      'span',
      null,
      'call ',
      _fn && _react2.default.createElement(
        'strong',
        null,
        _fn
      )
    );
  } else if (Array.isArray(effect)) {
    return _react2.default.createElement(
      'span',
      null,
      '(',
      effect.length,
      ')'
    );
  } else if ('SELECT' in effect) {
    var selector = readSelector('SELECT', effect);

    return _react2.default.createElement(
      'span',
      null,
      'select ',
      selector && _react2.default.createElement(
        'strong',
        null,
        selector
      )
    );
  } else if ('CANCEL' in effect) {
    var name = readName('CANCEL', effect);

    return _react2.default.createElement(
      'span',
      null,
      'cancel ',
      _react2.default.createElement(
        'strong',
        null,
        '#',
        effect.CANCEL.id
      ),
      ' ',
      name && '(' + name + ')'
    );
  } else if ('PUT' in effect) {
    return _react2.default.createElement(
      'span',
      null,
      'put ',
      _react2.default.createElement(
        'strong',
        null,
        effect.PUT.action.type
      )
    );
  } else if ('_invoke' in effect) {
    return _react2.default.createElement(
      'span',
      null,
      '...'
    );
  }
  return null;
};

},{"../../../helpers/readFromPath":485,"react":433}],469:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = calculateRowStyles;
function calculateRowStyles(_ref) {
  var color = _ref.color;
  var defaults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return {
    backgroundColor: color ? color : defaults.color ? defaults.color : '#e6e6e6'
  };
}

},{}],470:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onActionDispatched;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onActionDispatched(_ref) {
  var event = _ref.event,
      timeDiff = _ref.timeDiff;
  var actionName = event.actionName,
      machine = event.machine;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(192, 189, 202)' });

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-share' }),
      _react2.default.createElement(
        'strong',
        null,
        actionName
      ),
      _react2.default.createElement('i', { className: 'fa fa-long-arrow-right', style: { marginRight: '0.5em', marginLeft: '0.5em' } }),
      _react2.default.createElement(
        'strong',
        null,
        (0, _getMachineName2.default)(machine)
      )
    )
  );
}
// eslint-disable-next-line no-unused-vars

},{"../../helpers/getMachineName":482,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],471:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onActionProcessed;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onActionProcessed(_ref) {
  var event = _ref.event;
  var actionName = event.actionName,
      machine = event.machine,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(192, 189, 202)' });

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-thumbs-o-up' }),
      _react2.default.createElement(
        'strong',
        null,
        actionName
      ),
      _react2.default.createElement('i', { className: 'fa fa-long-arrow-right', style: { marginRight: '0.5em', marginLeft: '0.5em' } }),
      _react2.default.createElement(
        'strong',
        null,
        (0, _getMachineName2.default)(machine)
      )
    )
  );
}
// eslint-disable-next-line no-unused-vars

},{"../../helpers/getMachineName":482,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],472:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onGeneratorEnd;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _shortenJSON = require('../../helpers/shortenJSON');

var _shortenJSON2 = _interopRequireDefault(_shortenJSON);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onGeneratorEnd(_ref) {
  var event = _ref.event;
  var value = event.value,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(201, 202, 189)' });
  var short = value ? 'with ' + (0, _shortenJSON2.default)(value) : '';

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-check-circle-o' }),
      'generator ',
      _react2.default.createElement(
        'strong',
        null,
        'completed'
      ),
      ' ',
      short
    )
  );
}
// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars

},{"../../helpers/getMachineName":482,"../../helpers/shortenJSON":489,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],473:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onGeneratorResumed;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _shortenJSON = require('../../helpers/shortenJSON');

var _shortenJSON2 = _interopRequireDefault(_shortenJSON);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onGeneratorResumed(_ref) {
  var event = _ref.event;
  var value = event.value,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(201, 202, 189)' });
  var short = value ? 'with ' + (0, _shortenJSON2.default)(value) : '';

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-arrow-circle-right' }),
      'generator ',
      _react2.default.createElement(
        'strong',
        null,
        'resumed'
      ),
      ' ',
      short
    )
  );
}
// eslint-disable-next-line no-unused-vars
// eslint-disable-next-line no-unused-vars

},{"../../helpers/getMachineName":482,"../../helpers/shortenJSON":489,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],474:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars

// eslint-disable-next-line no-unused-vars


exports.default = onGeneratorStep;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _shortenJSON = require('../../helpers/shortenJSON');

var _shortenJSON2 = _interopRequireDefault(_shortenJSON);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function onGeneratorStep(_ref) {
  var event = _ref.event;
  var yielded = event.yielded,
      timeDiff = event.timeDiff;

  var message = '';
  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(201, 202, 189)' });

  if (typeof yielded === 'string') {
    message = _react2.default.createElement(
      'span',
      null,
      'generator yielded ',
      _react2.default.createElement(
        'strong',
        null,
        '{ name: ',
        yielded,
        ' }'
      )
    );
  } else if ((typeof yielded === 'undefined' ? 'undefined' : _typeof(yielded)) === 'object') {
    if (yielded.__type === 'call') {
      var argsText = yielded.args.length === 0 ? 'with no arguments' : 'with ' + (0, _shortenJSON2.default)(yielded.args);

      message = _react2.default.createElement(
        'span',
        null,
        'calling ',
        _react2.default.createElement(
          'strong',
          null,
          yielded.func
        ),
        ' ',
        argsText
      );
    } else if (yielded.name) {
      message = _react2.default.createElement(
        'span',
        null,
        'generator yielded ',
        _react2.default.createElement(
          'strong',
          null,
          '{ name: ',
          yielded.name,
          ', ...}'
        )
      );
    }
  }
  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-arrow-circle-left' }),
      message
    )
  );
};

},{"../../helpers/getMachineName":482,"../../helpers/shortenJSON":489,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],475:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onMachineConnected;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onMachineConnected(_ref) {
  var event = _ref.event;
  var state = event.state,
      meta = event.meta,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(170, 189, 207)' });
  var machinesConnectedTo = state.map(_getMachineName2.default).join(', ');
  var component = meta.component ? _react2.default.createElement(
    'strong',
    null,
    '<' + meta.component + '>'
  ) : null;

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-link' }),
      component,
      ' connected to ',
      _react2.default.createElement(
        'strong',
        null,
        machinesConnectedTo
      )
    )
  );
}
// eslint-disable-next-line no-unused-vars

},{"../../helpers/getMachineName":482,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],476:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onMachineCreated;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onMachineCreated(_ref) {
  var event = _ref.event,
      timeDiff = _ref.timeDiff;
  var machine = event.machine;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(200, 212, 201)' });

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-plus' }),
      _react2.default.createElement(
        'strong',
        null,
        (0, _getMachineName2.default)(machine)
      ),
      ' machine created'
    )
  );
}
// eslint-disable-next-line no-unused-vars
;

},{"../../helpers/getMachineName":482,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],477:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onMachineDisconnected;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onMachineDisconnected(_ref) {
  var event = _ref.event;
  var state = event.state,
      meta = event.meta,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(170, 189, 207)' });
  var machinesConnectedTo = state.map(_getMachineName2.default).join(', ');
  var component = meta.component ? _react2.default.createElement(
    'strong',
    null,
    '<' + meta.component + '>'
  ) : null;

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-unlink' }),
      component,
      ' disconnected from ',
      _react2.default.createElement(
        'strong',
        null,
        machinesConnectedTo
      )
    )
  );
}
// eslint-disable-next-line no-unused-vars

},{"../../helpers/getMachineName":482,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],478:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onStateChanged;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onStateChanged(_ref) {
  var event = _ref.event;
  var machine = event.machine,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(201, 172, 186)' });

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-heart' }),
      _react2.default.createElement(
        'strong',
        null,
        (0, _getMachineName2.default)(machine)
      ),
      '\'s state changed to ',
      _react2.default.createElement(
        'strong',
        null,
        machine.state.name
      )
    )
  );
}
// eslint-disable-next-line no-unused-vars

},{"../../helpers/getMachineName":482,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],479:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onStateWillChange;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getMachineName = require('../../helpers/getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _calculateRowStyles = require('./helpers/calculateRowStyles');

var _calculateRowStyles2 = _interopRequireDefault(_calculateRowStyles);

var _TimeDiff = require('../TimeDiff.jsx');

var _TimeDiff2 = _interopRequireDefault(_TimeDiff);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line no-unused-vars
function onStateWillChange(_ref) {
  var event = _ref.event;
  var machine = event.machine,
      timeDiff = event.timeDiff;

  var style = (0, _calculateRowStyles2.default)(event, { color: 'rgb(201, 172, 186)' });

  return _react2.default.createElement(
    'div',
    { style: style },
    _react2.default.createElement(_TimeDiff2.default, { timeDiff: timeDiff }),
    _react2.default.createElement(
      'div',
      { className: 'actionRowContent' },
      _react2.default.createElement('i', { className: 'fa fa-heart' }),
      _react2.default.createElement(
        'strong',
        null,
        (0, _getMachineName2.default)(machine)
      ),
      '\'s state(',
      _react2.default.createElement(
        'strong',
        null,
        machine.state.name
      ),
      ') will change'
    )
  );
}
// eslint-disable-next-line no-unused-vars

},{"../../helpers/getMachineName":482,"../TimeDiff.jsx":459,"./helpers/calculateRowStyles":469,"react":433}],480:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var PAGES = exports.PAGES = {
  DASHBOARD: 'LOG'
};

},{}],481:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatMilliseconds;
function formatMilliseconds(millisec) {
  var seconds = (millisec / 1000).toFixed(0);
  var minutes = Math.floor(seconds / 60);
  var hours = '';
  var ms = Math.floor(millisec % 1000);
  if (minutes > 59) {
    hours = Math.floor(minutes / 60);
    hours = hours >= 10 ? hours : "0" + hours;
    minutes = minutes - hours * 60;
    minutes = minutes >= 10 ? minutes : "0" + minutes;
  }
  if (ms < 100) {
    if (ms < 10) {
      ms = '00' + ms;
    } else {
      ms = '0' + ms;
    };
  }

  seconds = Math.floor(seconds % 60);
  seconds = seconds >= 10 ? seconds : "0" + seconds;
  if (hours !== "") {
    return hours + ":" + minutes + ":" + seconds + ':' + ms;
  }
  return minutes + ":" + seconds + ':' + ms;
}

},{}],482:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getMachineName;
function getMachineName(_ref) {
  var name = _ref.name;

  if (name.indexOf('_@@@') === 0) {
    return '<unnamed>';
  }
  return name;
};

},{}],483:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var isDefined = function isDefined(v) {
  return typeof v !== 'undefined';
};

exports.default = isDefined;

},{}],484:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeEvent = normalizeEvent;

var _formatMilliseconds = require('./formatMilliseconds');

var _formatMilliseconds2 = _interopRequireDefault(_formatMilliseconds);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INDEX = 0;
var timeOfLastReceivedEvent = {};
var getId = function getId() {
  return INDEX++;
};

function normalizeEvent(event) {
  var lastTime = timeOfLastReceivedEvent[event.uid || 'nouid'];

  if (lastTime) {
    var diff = event.time - lastTime;

    if (diff > 0) {
      event.timeDiff = '+ ' + (0, _formatMilliseconds2.default)(diff);
    }
  }
  event.id = getId();

  if (event.uid && event.time) {
    timeOfLastReceivedEvent[event.uid] = event.time;
  }

  return event;
};

},{"./formatMilliseconds":481}],485:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = readFromPath;

var _isDefined = require('./isDefined');

var _isDefined2 = _interopRequireDefault(_isDefined);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function readFromPath(object, path) {
  var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!object) return fallback;

  var parts = path.split('.');
  var key = parts.shift();

  if ((0, _isDefined2.default)(object[key])) {
    if (parts.length > 0) {
      return readFromPath(object[key], parts.join('.'), fallback);
    }
    return object[key];
  }
  return fallback;
};

},{"./isDefined":483}],486:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.renderMachinesAsTree = renderMachinesAsTree;
exports.renderStateAsTree = renderStateAsTree;
exports.renderEventAsTree = renderEventAsTree;

var _getMachineName = require('./getMachineName');

var _getMachineName2 = _interopRequireDefault(_getMachineName);

var _renderJSON = require('./renderJSON');

var _renderJSON2 = _interopRequireDefault(_renderJSON);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } /* eslint-disable no-unused-vars */


function renderMachinesAsTree() {
  var machines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var unnamed = 1;

  return (0, _renderJSON2.default)(machines.reduce(function (tree, machine) {
    var machineName = (0, _getMachineName2.default)(machine);

    if (machineName === '<unnamed>') machineName = '<unnamed(' + ++unnamed + ')>';
    tree[machineName] = machine.state;
    return tree;
  }, {}), 'Machines');
};

function renderStateAsTree() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  return (0, _renderJSON2.default)(state, 'State');
};

function renderEventAsTree(event) {
  var _ref = event || {},
      state = _ref.state,
      origin = _ref.origin,
      id = _ref.id,
      uid = _ref.uid,
      icon = _ref.icon,
      withMarker = _ref.withMarker,
      color = _ref.color,
      rest = _objectWithoutProperties(_ref, ['state', 'origin', 'id', 'uid', 'icon', 'withMarker', 'color']);

  return (0, _renderJSON2.default)(_extends({}, rest), 'Event');
};

},{"./getMachineName":482,"./renderJSON":487}],487:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable no-unused-vars */


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactJsonTree = require('react-json-tree');

var _reactJsonTree2 = _interopRequireDefault(_reactJsonTree);

var _renderJSONPreview = require('./renderJSONPreview');

var _renderJSONPreview2 = _interopRequireDefault(_renderJSONPreview);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var treeTheme = {
  extend: {
    scheme: 'chalk',
    author: 'chris kempson (http://chriskempson.com)',
    base00: '#151515',
    base01: '#202020',
    base02: '#303030',
    base03: '#505050',
    base04: '#b0b0b0',
    base05: '#d0d0d0',
    base06: '#e0e0e0',
    base07: '#f5f5f5',
    base08: '#fb9fb1',
    base09: '#eda987',
    base0A: '#ddb26f',
    base0B: '#acc267',
    base0C: '#12cfc0',
    base0D: '#6fc2ef',
    base0E: '#e1a3ee',
    base0F: '#deaf8f'
  },
  tree: {
    backgroundColor: '#e6e6e6',
    marginTop: 2,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0
  },
  nestedNodeLabel: function nestedNodeLabel(_ref, expanded) {
    var style = _ref.style;
    return {
      style: _extends({}, style, {
        color: expanded ? '#000' : '#000'
      })
    };
  }
};

function labelRenderer(what) {
  return function (key, parentKey, expanded, rootKey) {
    if (key[0] === 'root' && parentKey === 'Object' && rootKey === true) {
      return what;
    }
    return _react2.default.createElement(
      'strong',
      null,
      key[0]
    );
  };
}
function shouldExpandNode(keyName, data, level) {
  if (level < 1) return true;
  return false;
}
function valueRenderer(raw) {
  return _react2.default.createElement(
    'em',
    null,
    raw
  );
}

function getItemString(type, data, itemType, itemString) {
  if (data !== null && data !== undefined) {
    return _react2.default.createElement(
      'span',
      null,
      (0, _renderJSONPreview2.default)(data)
    );
  }
  return null;
}

var renderJSON = function renderJSON(json) {
  var what = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'root';

  return _react2.default.createElement(_reactJsonTree2.default, {
    data: json,
    theme: treeTheme,
    getItemString: getItemString,
    labelRenderer: labelRenderer(what),
    shouldExpandNode: shouldExpandNode,
    valueRenderer: valueRenderer,
    hideRoot: false
  });
};

exports.default = renderJSON;

},{"./renderJSONPreview":488,"react":433,"react-json-tree":324}],488:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = renderJSONPreview;
/* eslint-disable no-use-before-define */
var PREVIEW_STR_LIMIT = 40;

function previewObject(object) {
  var keys = Object.keys(object);

  if (keys.length === 0) return '{}';

  var objectInternals = keys.map(function (key) {
    if (_typeof(object[key]) === 'object') {
      if (Array.isArray(object[key])) {
        return key + ': ' + previewArray(object[key]);
      }
      return key + ': { ... }';
    } else if (typeof object[key] === 'string') {
      return key + ': "' + object[key].toString() + '"';
    }
    return key + ': ' + object[key].toString();
  });

  return '{ ' + objectInternals.join(', ') + ' }';
}
function previewArray(array) {
  if (array.length === 0) return '[]';
  return '[...' + array.length + ']';
}

function renderJSONPreview(data) {
  var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PREVIEW_STR_LIMIT;

  var result = void 0;

  if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
    result = Array.isArray(data) ? previewArray(data) : previewObject(data);
  } else if (typeof data === 'string') {
    result = '"' + data + '"';
  } else if (typeof data === 'number') {
    result = data;
  } else {
    return null;
  }

  return result.length > limit ? result.substr(0, limit) + '...' : result;
};

},{}],489:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shortenJSON;
var STR_LIMIT = 40;

function shortenJSON(data) {
  var str = JSON.stringify(data);

  if (str.length <= STR_LIMIT) return str;
  return str.substr(0, STR_LIMIT) + '...';
};

},{}],490:[function(require,module,exports){
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _stent = require('stent');

var _machines = require('./stent/machines');

var _react3 = require('stent/lib/react');

var _bridge = require('./services/bridge');

var _bridge2 = _interopRequireDefault(_bridge);

var _App = require('./components/App.jsx');

var _App2 = _interopRequireDefault(_App);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var devToolsMachine = _stent.Machine.get('DevTools');

_bridge2.default.on(function (action) {
  return devToolsMachine.actionReceived(action);
});

_reactDom2.default.render(_react2.default.createElement(_App2.default, null), document.querySelector('#container'));

},{"./components/App.jsx":456,"./services/bridge":491,"./stent/machines":492,"react":433,"react-dom":187,"stent":449,"stent/lib/react":451}],491:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var listeners = [];
var bridge = {
  on: function on(callback) {
    listeners.push(callback);
  }
};
var notify = function notify(message) {
  return listeners.forEach(function (f) {
    return f(message);
  });
};
var wire = function wire() {
  if (!chrome || !chrome.runtime || !chrome.runtime.onMessage) return;

  chrome.runtime.onMessage.addListener(function (message) {
    notify(message);
  });
};

wire();

exports.default = bridge;

},{}],492:[function(require,module,exports){
'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _stent = require('stent');

var _exampleState = require('../_mocks/example.state.json');

var _exampleState2 = _interopRequireDefault(_exampleState);

var _exampleRedux = require('../_mocks/example.redux.json');

var _exampleRedux2 = _interopRequireDefault(_exampleRedux);

var _exampleSaga = require('../_mocks/example.saga.json');

var _exampleSaga2 = _interopRequireDefault(_exampleSaga);

var _exampleSagaShort = require('../_mocks/example.saga.short.json');

var _exampleSagaShort2 = _interopRequireDefault(_exampleSagaShort);

var _constants = require('../constants');

var _normalize = require('../helpers/normalize');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var initialState = function initialState() {
  return {
    name: 'working',
    page: _constants.PAGES.DASHBOARD,
    events: [],
    pinnedEvent: null,
    autoscroll: true
  };
};
var MAX_EVENTS = 500;

var machine = _stent.Machine.create('DevTools', {
  state: initialState(),
  transitions: {
    'working': {
      'action received': function actionReceived(_ref, newEvents) {
        var events = _ref.events,
            autoscroll = _ref.autoscroll,
            pinnedEvent = _ref.pinnedEvent,
            rest = _objectWithoutProperties(_ref, ['events', 'autoscroll', 'pinnedEvent']);

        var eventsToAdd = newEvents.map(function (newEvent) {
          if (newEvent.pageRefresh === true) {
            events = [];
            return false;
          }
          if (typeof newEvent.type === 'undefined' || typeof newEvent.uid === 'undefined') {
            return false;
          }
          return (0, _normalize.normalizeEvent)(newEvent);
        }).filter(function (newEvent) {
          return newEvent;
        });

        if (eventsToAdd.length === 0) return undefined;

        events = events.concat(eventsToAdd);

        if (events.length > MAX_EVENTS) {
          events.splice(0, MAX_EVENTS - events.length);
        }

        if (autoscroll) {
          pinnedEvent = events[events.length - 1];
        }

        return _extends({
          events: events,
          autoscroll: autoscroll,
          pinnedEvent: pinnedEvent
        }, rest);
      },
      'flush events': function flushEvents() {
        return initialState();
      },
      'add marker': function addMarker(state) {
        if (state.pinnedEvent) {
          state.pinnedEvent.withMarker = true;
        }
        return state;
      },
      'pin': function pin(_ref2, id) {
        var events = _ref2.events,
            currentPinnedEvent = _ref2.pinnedEvent,
            rest = _objectWithoutProperties(_ref2, ['events', 'pinnedEvent']);

        var event = this.getEventById(id);
        var autoscroll = event.id === events[events.length - 1].id;

        return _extends({}, rest, {
          autoscroll: autoscroll,
          pinnedEvent: event ? event : currentPinnedEvent,
          events: events
        });
      }
    }
  },
  getEventById: function getEventById(eventId) {
    return this.state.events.find(function (_ref3) {
      var id = _ref3.id;
      return id === eventId;
    });
  }
});

// Extension navigation
_stent.Machine.create('Nav', {
  state: { name: 'state' },
  transitions: {
    'state': {
      'view event': 'event',
      'view analysis': 'analysis'
    },
    'event': {
      'view state': 'state',
      'view analysis': 'analysis'
    },
    'analysis': {
      'view state': 'state',
      'view event': 'event'
    }
  }
});

// shortcuts
Mousetrap.bind('ctrl+`', function (e) {
  console.log(JSON.stringify(machine.state, null, 2));
});

// development goodies
if (typeof window !== 'undefined' && window.location && window.location.href) {
  if (window.location.href.indexOf('populate=') > 0) {
    var s = void 0;

    if (window.location.href.indexOf('populate=1') > 0) {
      s = _exampleState2.default;
    } else if (window.location.href.indexOf('populate=2') > 0) {
      s = _exampleRedux2.default;
    } else if (window.location.href.indexOf('populate=3') > 0) {
      s = _exampleSaga2.default;
    } else if (window.location.href.indexOf('populate=4') > 0) {
      s = _exampleSagaShort2.default;
    }

    setTimeout(function () {
      console.log('About to inject ' + s.events.length + ' actions');
      machine.actionReceived(s.events);
    }, 20);
  };
}

},{"../_mocks/example.redux.json":452,"../_mocks/example.saga.json":453,"../_mocks/example.saga.short.json":454,"../_mocks/example.state.json":455,"../constants":480,"../helpers/normalize":484,"stent":449}]},{},[490]);
